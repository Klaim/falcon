/*#
 * @file        qrrscode.fal
 * @brief       Reed-Solomon error correction support.
 * @begin       26-Sep-2010
 * @author      <a href="mailto:giuseppe.greco@agamura.com">Giuseppe Greco</a>
 *
 * @copyright   (C) 2010 href="http://www.falconpl.org">The Falcon Programming Language</a>
 * @legalnotice Released under FPLL 1.1 or GPL 2.0 at your choice.
 */

import QrError from .qrerror as QrError

class QrRsItem(symsize, gfpoly, fcr, prim, nroots, pad)
    _mm = 0
    _nn = 0
    _alphaTo = nil
    _indexOf = nil
    _genpoly = nil
    _nroots = 0
    _fcr = 0
    _prim = 0
    _iprim = 0
    _pad = 0
    _gfpoly = 0

    init
        // Common code for intializing a Reed-Solomon control block (char or int symbols)
        // Copyright 2004 Phil Karn, KA9Q
        // May be used under the terms of the GNU Lesser General Public License (LGPL)

        if (symsize < 0 or symsize > 8) \
            or (fcr < 0 or fcr >= (1 << symsize)) \
            or (prim <= 0 or prim >= (1 << symsize)) \
            or (nroots < 0 or nroots >= (1 << symsize)) \
            or (pad < 0 or pad >= ((1 << symsize) -1 - nroots))
            raise QrError(QrError.encoding_error, i"error initializing Reed-Solomon control block")
        end

        self._mm = symsize
        self._nn = (1 << symsize) - 1
        self._pad = pad

        self._alphaTo = arrayBuffer(self._nn + 1, 0)
        self._indexOf = arrayBuffer(self._nn + 1, 0)

        self._indexOf[0] = self._nn
        self._alphaTo[self._nn] = 0
        sr = 1

        for i in [0:self._nn]     
            self._indexOf[sr] = i
            self._alphaTo[i] = sr
            sr <<= 1
            if sr && (1 << symsize); sr ^= gfpoly; end
            sr &= self._nn
        end

        if sr != 1
            raise QrError(QrError.encoding_error, i"polynominal is not primitive")
        end

        self._genpoly = arrayBuffer(nroots + 1, 0)
        self._fcr = fcr
        self._prim = prim
        self._nroots = nroots
        self._gfpoly = gfpoly

        iprim = 1; while (iprim % prim) != 0; iprim += self._nn; end
        self._iprim = int(iprim / prim)
        self._genpoly[0] = 1

        root = fcr * prim
        for i in [0:nroots]
            self._genpoly[i + 1] = 1

            for j in [i:1:-1]
                if self._genpoly[j] != 0
                    self._genpoly[j] = self._genpoly[j - 1] ^^ self._alphaTo[self._modnn(self._indexOf[self._genpoly[j]] + root)]
                else
                    self._genpoly[j] = self._genpoly[j - 1]
                end
            end
            self._genpoly[0] = self._alphaTo[self._modnn(self._indexOf[self._genpoly[0]] + root)]
            root += prim
        end

        for i in [0:nroots + 1]
            self._genpoly[i] = self._indexOf[self._genpoly[i]]
        end
    end

    function encodeChar(data, parity)
        parity = arrayBuffer(self._nroots, 0)

        for i in [0:self._nn - self._nroots - self._pad]
            feedback = self._indexOf[data[i] ^^ parity[0]]
            if feedback != self._nn     
                feedback = self._modnn(self._nn - self._genpoly[self._nroots] + feedback)
                for j in [1:self._nroots]
                    parity[j] ^= self._alphaTo[self._modnn(feedback + self._genpoly[self._nroots - j])]
                end
            end

            if len(parity) > 0; arrayRemove(parity, 0); end
            if feedback != self._nn
                arrayAdd(parity, self._alphaTo[self._modnn(feedback + self._genpoly[0])])
            else
                arrayAdd(parity, 0)
            end
        end
    end

    function _modnn(x)
        while x >= self._nn
            x -= self._nn
            x = (x >> self._mm) + (x && self._nn)
        end

        return x
    end
end

object QrRs
    _items = []

    function getItem(symsize, gfpoly, fcr, prim, nroots, pad)
        for rs in self._items
            if rs.pad != pad; continue; end
            if rs.nroots != nroots; continue; end
            if rs.mm != symsize; continue; end
            if rs.gfpoly != gfpoly; continue; end
            if rs.fcr != fcr; continue; end
            if rs.prim != prim; continue; end
            return rs;
        end

        rs = QrRsItem(symsize, gfpoly, fcr, prim, nroots, pad)
        arrayIns(self._items, 0, rs)

        return rs
    end
end

export QrRsItem, QrRs
