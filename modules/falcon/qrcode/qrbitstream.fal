/*#
 * @file        qrbitstream.fal
 * @brief       Bit stream manipulation.
 * @begin       12-Sep-2010
 * @author      <a href="mailto:giuseppe.greco@agamura.com">Giuseppe Greco</a>
 *
 * @copyright   (C) 2010 href="http://www.falconpl.org">The Falcon Programming Language</a>
 * @legalnotice Released under FPLL 1.1 or GPL 2.0 at your choice.
 */

import QrError from .qrerror as QrError

class QrBitStream(size)
    data = nil

    init
        self.data = size != nil ? arrayBuffer(size, 0) : []
    end

    function __get_size()
        return len(self.data)
    end

    function allocate(size)
        if size != len(self.data)
            arrayResize(self.data, size)
            arrayFill(self.data, 0)
        end
    end

    function newFromNum(bits, num)
        bitStream = QrBitStream()
        bitStream.allocate(bits)

        mask = 1 << (bits - 1)
        for i in [0:bits]
            bitStream.data[i] = num && mask ? 1 : 0
            mask >>= 1
        end

        return bitStream
    end

    function newFromBytes(size, data)
        if data == nil
            raise QrError(QrError.invalid_param, "data is null")
        end

        bitStream = QrBitStream(size * 8)
        dataLen = len(data)
        p = 0

        for i in [0:size]
            mask = 0x80
            for j in [0:8]
                if i < dataLen and data[i] && mask 
                    bitStream.data[p] = 1
                else
                    bitStream.data[p] = 0
                end
                p++
                mask >>= 1
            end
        end

        return bitStream
    end

    function append(bitStream)
        if bitStream == nil
            raise QrError(QrError.invalid_param, "bitStream is null")
        end

        if bitStream.size != 0
            if self.size == 0
                self.data = bitStream.data
            else
                arrayMerge(self.data, bitStream.data)
            end
        end
    end

    function appendNum(bits, num)
        if bits != 0
            bitStream = QrBitStream.newFromNum(bits, num)
            self.append(bitStream)
        end
    end

    function appendBytes(size, data)
        if data == nil
            raise QrError(QrError.invalid_param, "data is null")
        end

        if size != 0
            bitStream = QrBitStream.newFromBytes(size, data)
            self.append(bitStream)
        end
    end

    function toByte()
        size = self.size
        if size == 0; return []; end

        data = arrayBuffer(int((size + 7) / 8), 0)
        bytes = int(size / 8)
        p = 0

        for i in [0:bytes]
            v = 0
            for j in [0:8]
                v <<= 1
                v |= self.data[p]
                p++
            end
            data[i] = v
        end

        if size && 7
            v = 0
            for j in [0:size && 7]
                v <<= 1
                v |= self.data[p]
                p++
            end
            data[bytes] = v
        end

        return data
    end
end

export QrBitStream
