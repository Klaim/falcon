/*#
 * @file        qrspec.fal
 * @brief       QR code specifications.
 * @begin       26-Sep-2010
 * @author      <a href="mailto:giuseppe.greco@agamura.com">Giuseppe Greco</a>
 *
 * @copyright   (C) 2010 href="http://www.falconpl.org">The Falcon Programming Language</a>
 * @legalnotice Released under FPLL 1.1 or GPL 2.0 at your choice.
 */
 
const QRSPEC_VERSION_MAX = 40
const QRSPEC_WIDTH_MAX = 177
const QRCAP_WIDTH = 0
const QRCAP_WORDS = 1
const QRCAP_REMINDER = 2
const QRCAP_EC = 3

class QrSpec
    frames = nil

    capacity = [
        [  0,    0, 0, [   0,    0,    0,    0]],
        [ 21,   26, 0, [   7,   10,   13,   17]], // 1
        [ 25,   44, 7, [  10,   16,   22,   28]],
        [ 29,   70, 7, [  15,   26,   36,   44]],
        [ 33,  100, 7, [  20,   36,   52,   64]],
        [ 37,  134, 7, [  26,   48,   72,   88]], // 5
        [ 41,  172, 7, [  36,   64,   96,  112]],
        [ 45,  196, 0, [  40,   72,  108,  130]],
        [ 49,  242, 0, [  48,   88,  132,  156]],
        [ 53,  292, 0, [  60,  110,  160,  192]],
        [ 57,  346, 0, [  72,  130,  192,  224]], //10
        [ 61,  404, 0, [  80,  150,  224,  264]],
        [ 65,  466, 0, [  96,  176,  260,  308]],
        [ 69,  532, 0, [ 104,  198,  288,  352]],
        [ 73,  581, 3, [ 120,  216,  320,  384]],
        [ 77,  655, 3, [ 132,  240,  360,  432]], //15
        [ 81,  733, 3, [ 144,  280,  408,  480]],
        [ 85,  815, 3, [ 168,  308,  448,  532]],
        [ 89,  901, 3, [ 180,  338,  504,  588]],
        [ 93,  991, 3, [ 196,  364,  546,  650]],
        [ 97, 1085, 3, [ 224,  416,  600,  700]], //20
        [101, 1156, 4, [ 224,  442,  644,  750]],
        [105, 1258, 4, [ 252,  476,  690,  816]],
        [109, 1364, 4, [ 270,  504,  750,  900]],
        [113, 1474, 4, [ 300,  560,  810,  960]],
        [117, 1588, 4, [ 312,  588,  870, 1050]], //25
        [121, 1706, 4, [ 336,  644,  952, 1110]],
        [125, 1828, 4, [ 360,  700, 1020, 1200]],
        [129, 1921, 3, [ 390,  728, 1050, 1260]],
        [133, 2051, 3, [ 420,  784, 1140, 1350]],
        [137, 2185, 3, [ 450,  812, 1200, 1440]], //30
        [141, 2323, 3, [ 480,  868, 1290, 1530]],
        [145, 2465, 3, [ 510,  924, 1350, 1620]],
        [149, 2611, 3, [ 540,  980, 1440, 1710]],
        [153, 2761, 3, [ 570, 1036, 1530, 1800]],
        [157, 2876, 0, [ 570, 1064, 1590, 1890]], //35
        [161, 3034, 0, [ 600, 1120, 1680, 1980]],
        [165, 3196, 0, [ 630, 1204, 1770, 2100]],
        [169, 3362, 0, [ 660, 1260, 1860, 2220]],
        [173, 3532, 0, [ 720, 1316, 1950, 2310]],
        [177, 3706, 0, [ 750, 1372, 2040, 2430]]  //40
    ]

    eccTable = [
        [[ 0,  0], [ 0,  0], [ 0,  0], [ 0,  0]],
        [[ 1,  0], [ 1,  0], [ 1,  0], [ 1,  0]], // 1
        [[ 1,  0], [ 1,  0], [ 1,  0], [ 1,  0]],
        [[ 1,  0], [ 1,  0], [ 2,  0], [ 2,  0]],
        [[ 1,  0], [ 2,  0], [ 2,  0], [ 4,  0]],
        [[ 1,  0], [ 2,  0], [ 2,  2], [ 2,  2]], // 5
        [[ 2,  0], [ 4,  0], [ 4,  0], [ 4,  0]],
        [[ 2,  0], [ 4,  0], [ 2,  4], [ 4,  1]],
        [[ 2,  0], [ 2,  2], [ 4,  2], [ 4,  2]],
        [[ 2,  0], [ 3,  2], [ 4,  4], [ 4,  4]],
        [[ 2,  2], [ 4,  1], [ 6,  2], [ 6,  2]], //10
        [[ 4,  0], [ 1,  4], [ 4,  4], [ 3,  8]],
        [[ 2,  2], [ 6,  2], [ 4,  6], [ 7,  4]],
        [[ 4,  0], [ 8,  1], [ 8,  4], [12,  4]],
        [[ 3,  1], [ 4,  5], [11,  5], [11,  5]],
        [[ 5,  1], [ 5,  5], [ 5,  7], [11,  7]], //15
        [[ 5,  1], [ 7,  3], [15,  2], [ 3, 13]],
        [[ 1,  5], [10,  1], [ 1, 15], [ 2, 17]],
        [[ 5,  1], [ 9,  4], [17,  1], [ 2, 19]],
        [[ 3,  4], [ 3, 11], [17,  4], [ 9, 16]],
        [[ 3,  5], [ 3, 13], [15,  5], [15, 10]], //20
        [[ 4,  4], [17,  0], [17,  6], [19,  6]],
        [[ 2,  7], [17,  0], [ 7, 16], [34,  0]],
        [[ 4,  5], [ 4, 14], [11, 14], [16, 14]],
        [[ 6,  4], [ 6, 14], [11, 16], [30,  2]],
        [[ 8,  4], [ 8, 13], [ 7, 22], [22, 13]], //25
        [[10,  2], [19,  4], [28,  6], [33,  4]],
        [[ 8,  4], [22,  3], [ 8, 26], [12, 28]],
        [[ 3, 10], [ 3, 23], [ 4, 31], [11, 31]],
        [[ 7,  7], [21,  7], [ 1, 37], [19, 26]],
        [[ 5, 10], [19, 10], [15, 25], [23, 25]], //30
        [[13,  3], [ 2, 29], [42,  1], [23, 28]],
        [[17,  0], [10, 23], [10, 35], [19, 35]],
        [[17,  1], [14, 21], [29, 19], [11, 46]],
        [[13,  6], [14, 23], [44,  7], [59,  1]],
        [[12,  7], [12, 26], [39, 14], [22, 41]], //35
        [[ 6, 14], [ 6, 34], [46, 10], [ 2, 64]],
        [[17,  4], [29, 14], [49, 10], [24, 46]],
        [[ 4, 18], [13, 32], [48, 14], [42, 32]],
        [[20,  4], [40,  7], [43, 22], [10, 67]],
        [[19,  6], [18, 31], [34, 34], [20, 61]]  //40
    ]

    alignmentPattern = [      
        [ 0,  0],
        [ 0,  0], [18,  0], [22,  0], [26,  0], [30,  0], // 1- 5
        [34,  0], [22, 38], [24, 42], [26, 46], [28, 50], // 6-10
        [30, 54], [32, 58], [34, 62], [26, 46], [26, 48], //11-15
        [26, 50], [30, 54], [30, 56], [30, 58], [34, 62], //16-20
        [28, 50], [26, 50], [30, 54], [28, 54], [32, 58], //21-25
        [30, 58], [34, 62], [26, 50], [30, 54], [26, 52], //26-30
        [30, 56], [34, 60], [30, 58], [34, 62], [30, 54], //31-35
        [24, 50], [28, 54], [32, 58], [26, 54], [30, 58]  //35-40
    ]                                                                 

    versionPattern = [
        0x07c94, 0x085bc, 0x09a99, 0x0a4d3, 0x0bbf6, 0x0c762, 0x0d847, 0x0e60d,
        0x0f928, 0x10b78, 0x1145d, 0x12a17, 0x13532, 0x149a6, 0x15683, 0x168c9,
        0x177ec, 0x18ec4, 0x191e1, 0x1afab, 0x1b08e, 0x1cc1a, 0x1d33f, 0x1ed75,
        0x1f250, 0x209d5, 0x216f0, 0x228ba, 0x2379f, 0x24b0b, 0x2542e, 0x26a64,
        0x27541, 0x28c69
    ]

    formatInfo = [
        array(0x77c4, 0x72f3, 0x7daa, 0x789d, 0x662f, 0x6318, 0x6c41, 0x6976),
        array(0x5412, 0x5125, 0x5e7c, 0x5b4b, 0x45f9, 0x40ce, 0x4f97, 0x4aa0),
        array(0x355f, 0x3068, 0x3f31, 0x3a06, 0x24b4, 0x2183, 0x2eda, 0x2bed),
        array(0x1689, 0x13be, 0x1ce7, 0x19d0, 0x0762, 0x0255, 0x0d0c, 0x083b)
    ]

    lengthTableBits = [
        [10, 12, 14],
        [ 9, 11, 13],
        [ 8, 16, 16],
        [ 8, 10, 12]
    ]

    function getDataLength(version, errorCorrectionLevel)
        return self.capacity[version][QRCAP_WORDS] - self.capacity[version][QRCAP_EC][errorCorrectionLevel]
    end

    function getEccLength(version, errorCorrectionLevel)
        return self.capacity[version][QRCAP_EC][errorCorrectionLevel]
    end

    function getWidth(version)
        return self.capacity[version][QRCAP_WIDTH]
    end

    function getRemainder(version)
        return self.capacity[version][QRCAP_REMINDER]
    end

    function getMinVersion(size, errorCorrectionLevel)
        for i in [1:QRSPEC_VERSION_MAX + 1]
            words = self.capacity[i][QRCAP_WORDS] - self.capacity[i][QRCAP_EC][errorCorrectionLevel]
            if words >= size; return i; end
        end

        raise QrError(QrError.version_not_found)
    end

    function lengthIndicator(mode, version)
        if mode == QR_MODE_STRUCTURE; return 0; end

        if version <= 9
            l = 0
        elif version <= 26
            l = 1
        else
            l = 2
        end

        return self.lengthTableBits[mode][l]
    end

    function maxWords(mode, version)
        if mode == QR_MODE_STRUCTURE; return 3; end

        if version <= 9
            l = 0
        elif version <= 26
            l = 1
        else
            l = 2
        end

        bits = self.lengthTableBits[mode][l]
        words = (1 << bits) - 1
        if mode == QR_MODE_KANJI; words *= 2; end

        return words
    end

    function getEccSpec(version, errorCorrectionLevel, spec /* ref */)
        if len(spec) < 5; spec = [0, 0, 0, 0, 0]; end

        b1 = self.eccTable[version][errorCorrectionLevel][0]
        b2 = self.eccTable[version][errorCorrectionLevel][1]
        data = self.getDataLength(version, errorCorrectionLevel)
        ecc  = self.getEccLength(version, errorCorrectionLevel)

        if b2 == 0
            spec[0] = b1
            spec[1] = data / b1
            spec[2] = ecc / b1
            spec[3] = 0
            spec[4] = 0
        else
            spec[0] = b1
            spec[1] = data / (b1 + b2)
            spec[2] = ecc  / (b1 + b2)
            spec[3] = b2
            spec[4] = spec[1] + 1
        end
    end

    function putAlignmentMarker(frame /* ref */, ox, oy)
        finder = [
            "\xa1\xa1\xa1\xa1\xa1",
            "\xa1\xa0\xa0\xa0\xa1",
            "\xa1\xa0\xa1\xa0\xa1",
            "\xa1\xa0\xa0\xa0\xa1",
            "\xa1\xa1\xa1\xa1\xa1"
        ]

        yStart = oy - 2
        xStart = ox - 2

        for y in [0:5]     
            QrStr.set($frame, xStart, yStart + y, finder[y])
        end
    end

    function putAlignmentPattern(version, frame /* ref */, width)
        if version < 2; return; end

        d = self.alignmentPattern[version][1] - self.alignmentPattern[version][0]
        if d < 0
            w = 2
        else
            w = (width - self.alignmentPattern[version][0]) / d + 2
        end

        if w * w - 3 == 1
            x = self.alignmentPattern[version][0]
            y = self.alignmentPattern[version][0]
            self.putAlignmentMarker($frame, x, y)
            return
        end

        cx = self.alignmentPattern[version][0]
        for x in [1:w - 1]
            self.putAlignmentMarker($frame, 6, cx)
            self.putAlignmentMarker($frame, cx, 6)
            cx += d
        end

        cy = self.alignmentPattern[version][0]
        for y in [0:w - 1]
            cx = self.alignmentPattern[version][0]
            for x in [0:w - 1]
                self.putAlignmentMarker($frame, cx, cy)
                cx += $d
            end
            cy += d
        end
    end

    function getVersionPattern(version)
        if version < 7 or version > QRSPEC_VERSION_MAX
            return 0
        end

        return self.versionPattern[version -7]
    end

    function getFormatInfo(mask, errorCorrectionLevel)
        if mask < 0 or $mask > 7; return 0; end
        if errorCorrectionLlevel < 0 or errorCorrectionLevel > 3; return 0; end
        return self.formatInfo[errorCorrectionLevel][mask]
    end

    function putFinderPattern(frame /* ref */, ox, oy)
        finder = [
            "\xc1\xc1\xc1\xc1\xc1\xc1\xc1",
            "\xc1\xc0\xc0\xc0\xc0\xc0\xc1",
            "\xc1\xc0\xc1\xc1\xc1\xc0\xc1",
            "\xc1\xc0\xc1\xc1\xc1\xc0\xc1",
            "\xc1\xc0\xc1\xc1\xc1\xc0\xc1",
            "\xc1\xc0\xc0\xc0\xc0\xc0\xc1",
            "\xc1\xc1\xc1\xc1\xc1\xc1\xc1"
        ]

        for y in [0:7]     
            QrStr.set($frame, ox, oy + y, finder[y])
        end
    end

    function createFrame(version)
        width = self.capacity[version][QRCAP_WIDTH]
        frameLine = strFill(strBuffer(width), '\0')
        frame = arrayBuffer(width, frameLine)

        self.putFinderPattern($frame, 0, 0)
        self.putFinderPattern($frame, width - 7, 0)
        self.putFinderPattern($frame, 0, width - 7)

        yOffset = width - 7

        for y in [0:7]
            frame[y][7] = "\xc0"
            frame[y][width - 8] = "\xc0"
            frame[yOffset][7] = "\xc0"
            yOffset++
        end

        setPattern = strFill(strBuffer(8), "\xc0")
        QrStr.set($frame, 0, 7, setPattern)
        QrStr.set($frame, width - 8, 7, setPattern)
        QrStr.set($frame, 0, width - 8, setPattern)

        setPattern = strFill(strBuffer(9), "\x84")
        QrStr.set($frame, 0, 8, setPattern)
        QrStr.set($frame, width - 8, 8, setPattern, 8)

        yOffset = width - 8

        for y in [0:8]
            frame[y][8] = "\x84"
            frame[yOffset][8] = "\x84"
            yOffset++
        end

        for i in [1:width - 15]
            frame[6][7 + i] = chr(0x90 || (i && 1))
            frame[7 + i][6] = chr(0x90 || (i && 1))
        end

        self.putAlignmentPattern(version, $frame, width)

        if version >= 7
            vinf = self.getVersionPattern(version)

            v = vinf
            for x in [0:6]
                for y in [0:3]
                    frame[(width - 11) + y][x] = chr(0x88 || (v && 1))
                    v >>= 1
                end
            end

            v = vinf
            for y in [0:6]
                for x in [0:3]
                    frame[y][x + (width - 11)] = chr(0x88 || (v && 1))
                    v >>= 1
                end
            end
        end

        frame[width - 8][8] = "\x81"
        return frame
    end

    function serialize(frame)
        return ZLib().compressText(strMerge(frame, "\n"))
    end

    function unserialize(code)
        return strSplit(ZLib().uncompressText(code), "\n")
    end

    function newFrame(version)
        if version < 1 or version > QRSPEC_VERSION_MAX; return nil; end

        if self.frames == nil
            self.frames = arrayBuffer(version, nil)
        elif len(self.frames) < version
            arrayResize(self.frames, version)
        end

        if self.frames[version - 1] == nil
            fileName = QrConfig.cache_dir + "frame_" + version + ".dat"

            if QrConfig.cacheable
                if not fileType(fileName) == FileStat.NOTFOUND
                    buffer = strBuffer(FileStat(fileName).size)
                    inputStream = InputStream(fileName)
                    self.frames[version - 1] = self.unserialize(inputStream.read(buffer))
                    inputStream.close()
                else
                    self.frames[version - 1] = self.createFrame(version)
                    outputStream = OutputStream(fileName)
                    outputStream.write(self.serialilze(self.frames[version - 1]))
                    outputStream.close()
                end
            else
                self.frames[version - 1] = self.createFrame(version)
            end
        end

        if self.frames[version - 1] == nil; return nil; end
        return self.frames[version - 1]
    end

    function rsBlockNum(spec); return spec[0] + spec[3]; end
    function rsBlockNum1(spec); return spec[0]; end
    function rsDataCodes1(spec); return spec[1]; end
    function rsEccCodes1(spec); return spec[2]; end
    function rsBlockNum2(spec); return spec[3]; end
    function rsDataCodes2(spec); return spec[4]; end
    function rsEccCodes2(spec); return spec[2]; end
    function rsDataLength(spec); return (spec[0] * spec[1]) + (spec[3] * spec[4]); end
    function rsEccLength(spec); return (spec[0] + spec[3]) * spec[2]; end
end

object QrStr
    function set(srctab, x, y, repl, replen)
        substr = strFront(srctab[y], x)
        srclen = len(srctab[y])
        parlen = len(substr)

        if replen == nil
            parlen += len(repl)
            substr += repl
        elif replen > 0
            parlen += replen
            substr += strFront(repl, replen)
        end

        delta = srclen - parlen
        if delta > 0; substr += strBack(srctab[y], delta); end

        return (srctab[y] = substr)
    end
end

export QrSpec
