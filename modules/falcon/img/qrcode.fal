/*
   FALCON - The Falcon Programming Language.
   FILE: qrcode.fal

   QR Code library front end.
   -----------------------------------------------------------------------------
   Author: Giancarlo Niccolai & Giuseppe Greco
   Begin:Wed, 27 Oct 2010 21:51:41 +0200

   -----------------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from self.lib in qr

/*# @main QR-Code generator module.

   This module exposes two classes (@a Maker and @a Image) that are meant to
   create QR-Code images.

   QR-Code is a sort of barcode that can store binary and text information on paper or
   screen devices, and can be read back with optical devices.

   QR-Code is a patent held by  @link http://www.denso-wave.com/qrcode/index-e.html "Denso wave",
   but is released free of charge for everyone to use.

   A minimal sample program may be:
   
   @code
   import from img.qrcode in qr

   // Generates a QR Code image with a utf-8 encded text
   img = qr.Maker().text("Hello world", qr.ECL.L, "utf-8")

   // Save it as a PNG with 3 pixels per bit and 2 pixels of white border.
   img.savePng("hello.png", 3, 2)
   @endcodce

   The library has support for dumping the image directly to an arbitrary stream
   (and so, for example, generating a live document on a web server).

   The code of this library is heavily based on @link http://fukuchi.org/works/qrencode/index.en.html "Lib QR Encode".
*/

// workaround to circumvent error in module loader
QrMask = qr.QrMask

/*# Error correction level enumeration .
   Sets the trade off between generation complexity and scan readability.

   Can be one of:
   - **L**: Low correction
   - **M**: Medium correction
   - **Q**: Medium-high correction
   - **H**: High correction.
*/
ECL = qr.QrErrorCorrectionLevel

/*# QRcode generator.

   This class Is used to create QRCode images.

   The class instance is used to generate one or more
   @a Image instances, which are the actual content
   that can be streamed to a target file or to an
   arbitrary stream.
*/ 
class Maker
   /*#
   * Caching directory -- set to nil to disable cache.
   */
   cache_dir = nil

   /*#
   * Encoding of final output.
   */
   encoding = "utf-8"

   /*#
   * Specifies whether or not to estimate best mask.
   *
   * Set this attribute to false if performance is an issue.
   */
   find_best_mask = true

   /*#
   * The number of masks to be checked - mask ids are generated randomly.
   */
   find_from_random = 0

   /*#
   * Default mask.
   *
   * Only used when best mask estimation is disabled.
   */
   default_mask = 2

   /*#
   * Max awidth (in pixels) allowed for png images.
   */
   png_max_size = 1024

   /*# Encode a text oriented string.
      @param text The text to be encoded
      @optparam errorCorrectionLevel The error correction level (defaults to ECL.L).
      @optparam encoding Optional text encoding for the final output.
      @optparam caseSensitive Set to false to create alphanumeric sequences.

      @see Maker.ECL
   */
   function text(text, errorCorrectionLevel, encoding, caseSensitive)
      qrinput = self._getInput(errorCorrectionLevel)
      if encoding == nil: encoding = self.encoding
      if caseSensitive == nil: caseSensitive = true

      if encoding
         text = transcodeTo(text, encoding)
      end
      
      qr.QrSplit.splitStringToInput(text, qrinput, qr.QrMode.eight_bit, caseSensitive)
      return self._encodeInput(qrinput)
   end

   /*# Encode raw binary data.
      @param text The text to be encoded
      @optparam errorCorrectionLLevel The error correction level (defaults to ECL.L).

      @see Maker.ECL
   */
   function raw(data, errorCorrectionLevel)
      qrinput = self._getInput(errorCorrectionLevel)
      qrinput.append(qr.QrMode.eight_bit, len(data), data)
      return self._encodeInput(qrinput)
   end

   function encodeStruct(data, errorCorrectionLevel)
      // TODO
   end

   /* Private part */

   function _getInput(errorCorrectionLevel)
      if errorCorrectionLevel == nil: errorCorrectionLevel = qr.QrErrorCorrectionLevel.L
      if errorCorrectionLevel < qr.QrErrorCorrectionLevel.L \
         or errorCorrectionLevel > qr.QrErrorCorrectionLevel.H
            raise qr.QrError(qr.QrError.invalid_error_correction_level, @i'$(errorCorrectionLevel) is not supported')
      end

      return qr.QrInput(0, errorCorrectionLevel)
   end

   function _encodeMask(qrinput, mask)
      spec = qr.QrSpec()
      raw = qr.QrRawCode(qrinput)
      version = raw.version
      width = spec.getWidth(version)
      frame = spec.createFrame(version, self.cache_dir)

      filler = qr.QrFrameFiller(width, frame)
      if filler == nil
         raise qr.QrError(qr.QrError.encoding_error, i"error creating frame filler")
      end

      for i in [0:raw.dataLength + raw.eccLength]
         code = raw.getCode()
         bit = 0x80
         for j in [0:8]
            addr = filler.next()
            filler.setFrameAt(addr, 0x02 || ((bit && code) != 0 ? 1 : 0))
            bit >>= 1
         end
      end

      raw = nil

      for i in [0:spec.getRemainder(version)]
         addr = filler.next()
         filler.setFrameAt(addr, 0x02)
      end

      frame = filler.frame
      maskObj = qr.QrMask(self)

      if mask < 0
         if self.find_best_mask
            masked = maskObj.mask(width, frame, qrinput.errorCorrectionLevel)
         else
            masked = maskObj.makeMask(width, frame, self.default_mask % 8, qrinput.errorCorrectionLevel)
         end
      else
         masked = maskObj.makeMask(width, frame, mask, qrinput.errorCorrectionLevel)
      end

      if masked == nil
         raise qr.QrError(qr.QrError.encoding_error, i"error masking frame")
      end

      return Image(version, width, masked, self)
   end

   function _encodeInput(qrinput)
      return self._encodeMask(qrinput, -1)
   end
end

/*# Class representing a QR code image.
   @param version The version of this QR image.
   @param width The width of this QR image.
   @param data Raw binary data.
   @param maker The maker that built this Image (used for configuration).

   @note This class should not be instanced directly; it should be
         created trhough the @a Maker methods.
         
   This class contains the data that can be rendered to an output image.

   @prop version (read only) The version of this QR Image (indicating its
         complexity and data size).
   @prop width Size in read points of this image.
*/
class Image(version, width, data, maker)
   _version = version
   _width = width
   _code = data
   _maker = maker
   _binarized = nil

   /*# Saves the image on the given file name as a JPG image.
      @param fname The name/uri of the file where to save the image.
      @raise IoError i/o on error.
   */
   function saveJpg(fname, size, margin)
      self._saveOn(qr.QrImage.jpg, fname, size, margin)
   end

   /*# Saves the image on the given file name as a PNG image.
      @param fname The name/uri of the file where to save the image.
      @raise IoError i/o on error.
   */
   function savePng(fname, size, margin)
      self._saveOn(qr.QrImage.png, fname, size, margin)
   end

   /*# Saves the image on the given open stream as a JPG image.
      @param outStream The stream where the image must be saved.
      @raise IoError on i/o error.
   */
   function jpg(outStream, size, margin)
      self._makeImage(qr.QrImage.jpg, outStream, size, margin)
   end

   /*# Saves the image on the given open stream as a PNG image.
      @param outStream The stream where the image must be saved.
      @raise IoError on i/o error.
   */
   function png(outStream, size, margin)
      self._makeImage(qr.QrImage.png, outStream, size, margin)
   end

   function __get_version()
      return self._version
   end

   function __get_width()
      return self._width
   end

   /* Private part */

   function _makeImage(fnmaker, outStream, size, margin)
      if not self._binarized
         binarized = self._binarized = qr.QrTools.binarize(self._code)
      else
         binarized = self._binarized
      end

      maxSize = int(self._maker.png_max_size / (len(self._code) + 2 * margin))
      fnmaker(binarized, outStream, min(max(1, size), maxSize), margin)
   end

   function _saveOn(func, fname, size, margin)
      stream = OutputStream(fname)

      try
         self._makeImage(func, stream, size, margin)
         stream.close()
      catch in error
         stream.close()
         raise error
      end
   end
end
