/*
   FALCON - Generic Parser

   FILE: context.fal

   Generic parser, Syntactic Tree context.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Thu, 19 Aug 2010 01:34:20 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from .node

/*# Syntree context.

   Has support to create the syntree as the parsing proceeds.
*/

class Context()
   row = 1
   
   topNode = node.Node( node.node_top_type )
   nodeStack = [ self.topNode ]
   standouts = []
   currentNode = self.topNode

   listDepth = 0

   function pushNode( lnode )
      self.currentNode.add( lnode )
      self.nodeStack.add( lnode )
      self.currentNode = lnode

      if lnode provides standout and lnode.standout
         self.standouts.add( lnode )
      end
   end

   function popNode()
      ns = self.nodeStack
      lnode = ns[-1]
      if ns.len() == 1
         raise ParseError( 10010, "Context empty in pop" )
      end
      ns.resize(ns.len()-1)
      self.currentNode = ns[-1]
      return lnode
   end

   function add( data )
      self.currentNode.add( data )
      if data provides standout and data.standout
         self.standouts.add( data )
      end
   end

   function setListDepth( lvl, ltype )
      if lvl == self.listDepth
         self.popNode()
         self.pushNode( node.Node("li") )
      elif lvl < self.listDepth
         // we must go back of 2 elements per level
         i = lvl
         while i++ < self.listDepth
            self.popNode()
            self.popNode()
         end
         self.listDepth = lvl
         
         // but also, change the item that was li-ing if the list continues
         if lvl > 0
            self.popNode()
            self.pushNode( node.Node("li") )
         end
      else
         // we must go forward of 2 elements per level
         i = self.listDepth
         while i++ < lvl
            self.pushNode(node.Node(ltype))
            self.pushNode(node.Node("li"))
         end
      end

      self.listDepth = lvl
   end
   
end
