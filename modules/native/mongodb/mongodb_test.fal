/*
    Test sample for Falcon MongoDB module
    Need a running server on localhost:27017
 */

import from mongo

_n = 0

function Assert( x, msg )
    ++_n
    if not x
        > @"*** TEST FAILURE ($(_n)) ***"
        exit( _n )
    else
        > msg
    end
end

db = mongo.MongoDB( "olelew00tw00t", 4321 )
inspect( db )

// Getting host & port
> "Host = " + db.host()
> "Port = " + db.port()

// connect failure
try
    db.connect()
catch mongo.MongoDBError
    > "Caught connection failure!"
end

// Setting host & port
db.host( "127.0.0.1" )
db.port( 27017 )
> "Host = " + db.host()
> "Port = " + db.port()

// connect success
db.connect()
Assert( db.isConnected(), "Connected!" )

// drop collection if it exists
db.dropCollection( "none", "test" )

// drop database
db.dropDatabase( "none" )

// authentication failure
Assert( not db.authenticate( "none", "shall", "pass" ), "user shall unknown to none!" )

// add user
Assert( db.addUser( "none", "shall", "pass" ), "Added user shall to none!" )

// authentication success
Assert( db.authenticate( "none", "shall", "pass" ), "shall authenticated!" )

// create an object id
> "Creating object id!"
oid = mongo.ObjectID()
> oid // toString
inspect( oid )

// create an empty bson object
> "Creating empty bson object!"
obj = mongo.BSON()
inspect( obj.asDict() )
// create non-empty bson object
> "Creating non-empty bson object!"
ob = mongo.BSON( [ "key" => "value" ] )
inspect( ob.asDict() )

// append something
> "Creating bson object!"
curtime = TimeStamp()
curtime.currentTime()
mem = MemBuf( 3, 1 )
mem.put( 0x00 ).put( 0x01 ).put( 0x02 )

obj.genOID().append([
    "key1" => 3,
    "key2" => 1.1,
    "key3" => true,
    "key4" => nil,
    "key5" => "hello",
    "key6" => [ 0,1,2 ],
    "key7" => [ "a"=>0, "b"=>1 ],
    "key8" => curtime,
    "key9" => mem
    ])

// hasKey and value
Assert( obj.hasKey( "key4" ), "Has key4!" )
Assert( not obj.hasKey( "foo" ), "Has not key foo!" )
Assert( obj.value( "key4" ) == nil, "Key4 is nil!" )
Assert( obj.value( "key3" ) == true, "Key3 is true!" )

// Turn object back to dict
inspect( obj.asDict() )

// Iterate over obj
iter = mongo.BSONIter( obj )
while iter.next()
    > iter.key() + " => " + iter.value()
end

// insert object
Assert( db.insert( "none.test", obj ), "Inserting bson object!" )

// reset object
> "Resetting bson object!"
obj.reset()

// find one
> "Find one object!"
obj = db.findOne( "none.test" );
inspect( obj.asDict() )
> "Find one with query!"
ob = db.findOne( "none.test", mongo.BSON(["key1"=>3]) )
inspect( ob.asDict() )
Assert( db.findOne( "none.test", mongo.BSON(["key1"=>2]) ) == nil, "Find one nothing!" )

// update
> "Updating!"
db.update( "none.test", mongo.BSON(["key1"=>3]),
           mongo.BSON(["$set"=>["key1"=>2],"$inc"=>["key2"=>1.2]]) )
Assert( db.findOne( "none.test", mongo.BSON(["key1"=>2]) ) != nil, "Find one updated!" )

// count
Assert( db.count( "none", "test" ) == 1, "Count 1!" )

// find
res = db.find( "none.test" )
Assert( res.len() == 1, "Find!" )

// remove
> "Remove!"
db.remove( "none.test", mongo.BSON(["key1"=>2]) )
Assert( db.count( "none", "test" ) == 0, "Count 0!" )

// disconnect
db.disconnect()
Assert( not db.isConnected(), "Disconnected!" )

> "TEST OK"
