/*
 * FALCON - The Falcon Programming Language
 * FILE: zlib.cpp
 *
 * zlib module main file
 * -------------------------------------------------------------------
 * Author: Jeremy Cowgar
 * Begin: Thu Jan 3 2007
 * -------------------------------------------------------------------
 * (C) Copyright 2008: the FALCON developers (see list in AUTHORS file)
 *
 * See LICENSE file for licensing details.
 * In order to use this file in it's compiled form, this source or
 * part of it you have to read, understand and accept the conditions
 * that are stated in the LICENSE file that comes bundled with this
 * package.
 */

/**
 * \file
 * This module exports zlib and module loader facility to falcon
 * scripts.
 */

#include <falcon/module.h>
#include "zlib_ext.h"
#include "zlib.h"

#include "version.h"
/*#
   @module feathers.zlib ZLib basic binding.
   @brief Compress/uncompress functions (zlib binding).

   The @b ZLib module provides an essential interface to the Zlib compression routines.

   The greatest part of the functionalites of the module are encapsulated in the
   @a ZLib class, which provided some class-wide methods to compress and uncompress
   data.

   The following example can be considered a minimal usage pattern:
   @code
   load zlib

   original = "Mary had a little lamb, it's fleece was white as snow."
   > "Uncompressed: ", original

   comped = ZLib.compressText( original )
   > "Compressed then uncompressed:"
   > "   ", ZLib.uncompressText( comped )

   @endcode

   The module declares also a @b ZLibError that is raised in case of
   failure in compression/decompression operations.

   @beginmodule feathers.zlib
*/



class ZLibModule: public Falcon::Module
{
public:
   // setup DLL engine common data
   ZLibModule():
      Module("zlib")
   {

      //language( "en_US" );
      //engineVersion( FALCON_VERSION_NUM );
      //version( VERSION_MAJOR, VERSION_MINOR, VERSION_REVISION );


      //====================================
      // Error enumeration

      /*#
         @enum ZLibErrorCode
         @brief Error codes generated by ZLib methods.


         In case of ZLibError raised by the ZLib module
         function and methods, the @a ZLibError.code property
         assumes one of this values:
         - @b errno: Generic/unknown error.
         - @b stream: Error in reading the ZLIB data.
         - @b data: Error in the compression buffer.
         - @b memory: Not enough memory to complete the operation.
         - @b version: Version of this library is not able to handle
            the given compressed buffer.
      */
      /*Falcon::Symbol *c_errcode = addClass( "ZLibErrorCode" );
      addClassProperty( c_errcode, "errno")
         .setInteger( FALCON_ZLIB_ERROR_BASE - Z_ERRNO );
      addClassProperty( c_errcode, "stream")
         .setInteger( FALCON_ZLIB_ERROR_BASE - Z_STREAM_ERROR );
      addClassProperty( c_errcode, "data")
         .setInteger( FALCON_ZLIB_ERROR_BASE - Z_DATA_ERROR );
      addClassProperty( c_errcode, "memory")
         .setInteger( FALCON_ZLIB_ERROR_BASE - Z_BUF_ERROR );
      addClassProperty( c_errcode, "version")
         .setInteger( FALCON_ZLIB_ERROR_BASE - Z_VERSION_ERROR );*/


      //====================================
      // ZLib class

      addMantra( new Falcon::Ext::Function_getVersion);
      addMantra( new Falcon::Ext::Function_compress);
      addMantra( new Falcon::Ext::Function_compressText);
      addMantra( new Falcon::Ext::Function_uncompress);
      addMantra( new Falcon::Ext::Function_uncompressText);
      

      ////============================================================
      //// ZlibError class
      
      addMantra(Falcon::Ext::ClassZLibError::singleton());
   }

   virtual ~ZLibModule() {};
};
FALCON_MODULE_DECL
{
   Falcon::Module* mod = new ZLibModule;
   return mod;
}

/* end of zlib.cpp */


