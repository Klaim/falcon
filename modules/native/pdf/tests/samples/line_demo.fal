import from hpdf

function drawLine(page, x, y, label)
  page.beginText()
  page.moveTextPos(x, y - 10)
  page.showText(label)
  page.endText()

  page.moveTo(x, y - 15)
  page.lineTo(x + 220, y - 15)
  page.stroke()
end

function drawLine2(page, x, y, label)
  page.beginText()
  page.moveTextPos(x, y)
  page.showText(label)
  page.endText()

  page.moveTo(x + 30, y - 25)
  page.lineTo(x + 160, y - 25)
  page.stroke()
end

function drawRect(page, x, y, label)
  page.beginText()
  page.moveTextPos(x, y - 10)
  page.showText(label)
  page.endText()

  page.rectangle(x, y - 40, 220, 25)
end


page_title = "LineDemo"

pdf = hpdf.Doc();

// create default-font
font = pdf.getFont ("Helvetica")

// add a new page object.
page = pdf.addPage()

//print the lines of the page.
page.setLineWidth(1)
page.rectangle(50, 50, page.getWidth() - 100, page.getHeight() - 110)
page.stroke()

// print the title of the page (with positioning center).
page.setFontAndSize(font, 24)
tw = page.textWidth(page_title)
page.beginText();
page.moveTextPos ((page.getWidth() - tw) / 2, page.getHeight() - 50)
page.showText(page_title)
page.endText()

page.setFontAndSize(font, 10)

// Draw verious widths of lines.
page.setLineWidth(0)
drawLine(page, 60, 770, "line width = 0")

page.setLineWidth(1.0)
drawLine(page, 60, 740, "line width = 1.0")

page.setLineWidth(2.0)
drawLine(page, 60, 710, "line width = 2.0")

// Line dash pattern
dash_mode1 = [3]
dash_mode2 = [3, 7]
dash_mode3 = [8, 7, 2, 7]

page.setLineWidth(1.0)

page.setDash(dash_mode1, 1)
drawLine(page, 60, 680, "dash_ptn=[3], phase=1 -- 2 on, 3 off, 3 on...")

page.setDash(dash_mode2, 2)
drawLine(page, 60, 650, "dash_ptn=[7, 3], phase=2 -- 5 on 3 off, 7 on,...")

page.setDash(dash_mode3, 0)
drawLine(page, 60, 620, "dash_ptn=[8, 7, 2, 7], phase=0")

page.setDash(nil, 0)

page.setLineWidth(30)
page.setRGBStroke(0.0, 0.5, 0.0)

// Line Cap Style
page.setLineCap(hpdf.LineCap.BUTT_END)
drawLine2(page, 60, 570, "HPDF_BUTT_END")

page.setLineCap(hpdf.LineCap.ROUND_END)
drawLine2(page, 60, 505, "HPDF_ROUND_END")

page.setLineCap(hpdf.LineCap.PROJECTING_SCUARE_END)
drawLine2(page, 60, 440, "HPDF_PROJECTING_SCUARE_END")

// Line Join Style
page.setLineWidth(30)
page.setRGBStroke(0.0, 0.0, 0.5)

page.setLineJoin(hpdf.LineJoin.MITER_JOIN)
page.moveTo(120, 300)
page.lineTo(160, 340)
page.lineTo(200, 300)
page.stroke()

page.beginText()
page.moveTextPos(60, 360)
page.showText("HPDF_MITER_JOIN")
page.endText()

page.setLineJoin(hpdf.LineJoin.ROUND_JOIN);
page.moveTo(120, 195)
page.lineTo(160, 235)
page.lineTo(200, 195)
page.stroke()

page.beginText()
page.moveTextPos(60, 255)
page.showText("HPDF_ROUND_JOIN")
page.endText()

page.setLineJoin(hpdf.LineJoin.BEVEL_JOIN)
page.moveTo(120, 90)
page.lineTo(160, 130)
page.lineTo(200, 90)
page.stroke()

page.beginText()
page.moveTextPos(60, 150)
page.showText("HPDF_BEVEL_JOIN")
page.endText()

// Draw Rectangle
page.setLineWidth(2)
page.setRGBStroke(0.0, 0.0, 0.0)
page.setRGBFill(0.75, 0.0, 0.0)

drawRect(page, 300, 770, "Stroke")
page.stroke()

drawRect(page, 300, 720, "Fill")
page.fill()

drawRect(page, 300, 670, "Fill then Stroke")
 page.fillStroke()

// // Clip Rect
// page.gSave() // Save the current graphic state
// drawRect(page, 300, 620, "Clip Rectangle");
// page.clip()
// page.stroke()
// page.setFontAndSize(font, 13)

// page.beginText()
// page.moveTextPos(290, 600)
// page.setTextLeading(12)
// page.showText("Clip Clip Clip Clip Clip Clipi Clip Clip Clip")
// page.showTextNextLine("Clip Clip Clip Clip Clip Clip Clip Clip Clip")
// page.showTextNextLine("Clip Clip Clip Clip Clip Clip Clip Clip Clip")
// page.endText()
// page.gRestore()

// Curve Example(CurveTo2)
x = 330
y = 440
x1 = 430
y1 = 530
x2 = 480
y2 = 470
x3 = 480
y3 = 90

page.setRGBFill(0, 0, 0)

page.beginText()
page.moveTextPos(300, 540)
page.showText("CurveTo2(x1, y1, x2. y2)")
page.endText()

page.beginText()
page.moveTextPos(x + 5, y - 5)
page.showText("Current point")
page.moveTextPos(x1 - x, y1 - y)
page.showText("(x1, y1)")
page.moveTextPos(x2 - x1, y2 - y1)
page.showText("(x2, y2)")
page.endText()

page.setDash(dash_mode1, 0)

page.setLineWidth(0.5)
page.moveTo(x1, y1)
page.lineTo(x2, y2)
page.stroke()

page.setDash(nil, 0)

page.setLineWidth(1.5)

page.moveTo(x, y)
page.curveTo2(x1, y1, x2, y2)
page.stroke()

// Curve Example(CurveTo3)
y -= 150
y1 -= 150
y2 -= 150

page.beginText()
page.moveTextPos(300, 390)
page.showText("CurveTo3(x1, y1, x2. y2)")
page.endText()

page.beginText()
page.moveTextPos(x + 5, y - 5)
page.showText("Current point")
page.moveTextPos(x1 - x, y1 - y)
page.showText("(x1, y1)")
page.moveTextPos(x2 - x1, y2 - y1)
page.showText("(x2, y2)")
page.endText()

page.setDash(dash_mode1, 0)

page.setLineWidth(0.5)
page.moveTo(x, y)
page.lineTo(x1, y1)
page.stroke()

page.setDash(nil, 0);

page.setLineWidth(1.5)
page.moveTo(x, y);
page.curveTo3(x1, y1, x2, y2);
page.stroke();

// Curve Example(CurveTo)
y -= 150;
y1 -= 160;
y2 -= 130;
x2 += 10;

page.beginText();
page.moveTextPos(300, 240);
page.showText("CurveTo(x1, y1, x2. y2, x3, y3)");
page.endText();

page.beginText()
page.moveTextPos(x + 5, y - 5)
page.showText("Current point")
page.moveTextPos(x1 - x, y1 - y)
page.showText("(x1, y1)")
page.moveTextPos(x2 - x1, y2 - y1)
page.showText("(x2, y2)")
page.moveTextPos(x3 - x2, y3 - y2)
page.showText("(x3, y3)")
page.endText()

page.setDash(dash_mode1, 0)

page.setLineWidth(0.5)
page.moveTo(x, y)
page.lineTo(x1, y1)
page.stroke()
page.moveTo(x2, y2)
page.lineTo(x3, y3)
page.stroke()

page.setDash(nil, 0)

page.setLineWidth(1.5)
page.moveTo(x, y)
page.curveTo(x1, y1, x2, y2, x3, y3)
page.stroke()

pdf.saveToFile(scriptName + ".pdf")




