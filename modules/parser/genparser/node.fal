/*
   FALCON - The Falcon Programming Language

   Generic Parser - Line oriented general rule based parser.

   FILE: node.fal

   The syntactic tree.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin:Tue, 17 Aug 2010 22:15:59 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

node_text_type = "text"
node_top_type = "top"

function _isBlank( c )
   return c == 0x20 or c == 0xD or c == 0xA or c == 0x8
end

class Node( type, initContent )
   type = type

   /* Can be a string or a node list. */
   content = initContent

   /*# If true, will be moved notified to the renderer while processing. */
   standout = false
   
   add = self._nilAdder

   function _nilAdder( data )
      select data
         case StringType
            self.content = data
            self.add = self._stringAdder
            
         case Node
            self.content = List(data)
            self.add = self._listAdder
            
         default
            raise ParseError( 10001, "Invalid data added to a node: " + data.describe() )
      end
   end


   function _stringAdder( data )
      select data
         case StringType
            if self.content.len() > 0 and not _isBlank(self.content[*-1])
               self.content += " "
            end
            self.content += data

         case Node
            self.content = List( Node( node_text_type, self.content), data )
            self.add = self._listAdder

         default
            raise ParseError( 10001, "Invalid data added to a node: " + data.describe() )
      end
   end


   function _listAdder( data )
      select data
         case StringType
            back = self.content.back()
            if back.type == node_text_type
               if back.content.len() > 0 and not _isBlank(back.content[*-1])
                  back.content += " "
               end
               back.content += data
            else
               self.content.push( Node( node_text_type, data) )
            end
            
         case Node
            self.content.push( data )

         default
            raise ParseError( 10001, "Invalid data added to a node: " + data.describe() )
      end
   end  
end

class InfoNode( type, infos ) from Node( type )
   infos = infos
end

class LevelNode( type, level, data ) from Node( type, data )
   level = level
end

/*# A node that should standout.

   This node is somewhere in the syntree, but it must be brougt to a general list of standout nodes.

   Used for tocs, categories, footnotes and so on.
*/
class StandoutNode( type, data ) from Node( type, data )
   standout = true
end

