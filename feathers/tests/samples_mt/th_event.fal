/*
   FALCON - Samples

   FILE: th_event.fal

   Auto reset event test for interthread coordination.

   This test shows how to perform a stop-and-go sequence using events.
   Each thread is waken up by the previous one and wakes up the next
   when its computation is done.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sun, 13 Apr 2008 23:26:44 +0200

   -------------------------------------------------------------------
   (C) Copyright 2004: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

load threading
const threadCount = 5
const countTo = 10000

class MyThread(id, prevEvent, nextEvent) from Thread
   id = id
   prevEvent = prevEvent
   nextEvent = nextEvent
   isLast = false

   function run()
      for count in [0: countTo+1]
         // Wait for the previous thread to be done
         self.wait( self.prevEvent )
         >> self.id, ": ", count, "; "
         // and eventually go back
         if self.isLast: >> "\r"
         // wake up the next thread
         self.nextEvent.set()
      end
   end

end

// create the needed events
evts = arrayBuffer( threadCount )
for i in [0:evts.len()]
   evts[i] = Event()
end
evts += evts[0] // create the circular buffer.

// ... and assign them to our arrays
t = arrayBuffer(threadCount)
for i in [0:t.len()]
   // assign the i, i+1 (circular) to the events.
   t[i] = MyThread( "ID" + i.toString(),
      evts[i], evts[ i + 1 ] )
end

// In form the last thread that he's the last
t[-1].isLast = true

// start all the threads
for thread in t
   thread.start()
end

// start the game
evts[0].set()

// now that we started the threads, join them.
for thread in t
   Threading.wait( thread )
end

>
> "Main thread complete."
