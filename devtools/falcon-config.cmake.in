######################################################################
# The Falcon Programming Language.
# CMake module for find_package( falcon )
######################################################################


get_filename_component(SELF_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

# OPTIONAL for the case this project is built as a subproject.
include(${SELF_DIR}/falcon-core-targets.cmake OPTIONAL)

#Versioning
set( falcon_VERSION "@FALCON_VERSION_ID@" )
set( falcon_VERSION_NAME "@FALCON_VERSION_NAME@" )

set( falcon_MAJOR_VERSION @FALCON_VERSION_MAJOR@ )  
set( falcon_MINOR_VERSION @FALCON_VERSION_MINOR@ )
set( falcon_SUBMINOR_VERSION @FALCON_VERSION_REVISION@ )
set( falcon_PATCH_VERSION @FALCON_VERSION_PATCH@ )

# Prepare Falcon in build environment.

# Under windows, position is fixed at $INSTALLDIR\bin\cmake
# OTOH, we don't know where the user will want to install us.

if( WIN32 )
   set(falcon_PREFIX "${SELF_DIR}/../..")
   #Will be bin and lib
   set(falcon_BINARY_DIR "${falcon_PREFIX}/@FALCON_BIN_DIR@")
   set(falcon_LIBRARY_DIR "${falcon_PREFIX}/@FALCON_LIB_DIR@")
   
   #This can change depending on the version
   set(falcon_INCLUDE_DIR "${falcon_PREFIX}/@FALCON_INC_DIR@")
   list(APPEND falcon_INCLUDE_DIRS  ${falcon_INCLUDE_DIR})
else()
   # Selection of the build prefix (either the final one or a temporary build one) is performed
   # by the caller, simply which falcon-config.cmake module to load. So, our position is relevant.
   if( "${SELF_DIR}" STREQUAL "@FALCON_FINAL_DEST@/@FALCON_MOD_DIR@/cmake" )
      #If we're below the final destination, then use the final destination as a prefix.
      if ("@FALCON_FINAL_DEST@" STREQUAL "@CMAKE_INSTALL_PREFIX@" )
         # When the prefix is the same as the final destination, there isn't a difference.
         # Warn about this, because the user of test builds may be misleaded.
         # It is right to be here in case of test (development) builds.
         Message( STATUS "Falcon module uses local settings (@CMAKE_INSTALL_PREFIX@)" )
      else()
         Message( STATUS "Falcon module configured under system-wide installation." )
      endif()
      
      set(falcon_PREFIX "@FALCON_FINAL_DEST@")
      
      set(falcon_BINARY_DIR "${falcon_PREFIX}/@FALCON_BIN_DIR@")
      set(falcon_LIBRARY_DIR "${falcon_PREFIX}/@FALCON_LIB_DIR@")

      set(falcon_INCLUDE_DIR "${falcon_PREFIX}/@FALCON_INC_DIR@")
      list(APPEND falcon_INCLUDE_DIRS  ${falcon_INCLUDE_DIR})
   else()
      #make the environment variable FALCON_SRC_TREE to override the topmost dir
      set( current_pos $ENV{FALCON_SRC_TREE})
      if( "${current_pos}" STREQUAL "" )
          set( current_pos "${CMAKE_SOURCE_DIR}" )
      endif()

      Message( STATUS "Falcon module configured under DEVELOPMENT (${current_pos}) settings" )
      set(falcon_PREFIX "@CMAKE_INSTALL_PREFIX@")

      set(falcon_BINARY_DIR "${falcon_PREFIX}/@FALCON_BIN_DIR@")
      set(falcon_LIBRARY_DIR "${falcon_PREFIX}/@FALCON_LIB_DIR@")

      #The output directory doesn't change. However, is not used as include.
      set(falcon_INCLUDE_DIR "${falcon_PREFIX}/@FALCON_INC_DIR@")

      # Use the source directory for include -- for first
      list(INSERT falcon_INCLUDE_DIRS 0 "${current_pos}/core/include")
      # But adds generated include files
      list(INSERT falcon_INCLUDE_DIRS  0 "${SELF_DIR}/../include" )
   endif()
endif()

# Fixed output directories
set(falcon_MODULE_DIR "${falcon_PREFIX}/@FALCON_MOD_DIR@")
set(falcon_MAN_DIR "${falcon_PREFIX}/@FALCON_MAN_DIR@")

#Check if everything is in place.
find_program(falcon_EXECUTABLE falcon "${falcon_BINARY_DIR}")
find_library(falcon_ENGINE falcon_engine "${falcon_LIBRARY_DIR}")
find_file(falcon_ENGINE_INC engine.h "${falcon_INCLUDE_DIR}" )
   
# Prepare Falcon in development environment.
list(APPEND falcon_INCLUDE_DIRS  ${falcon_INCLUDE_DIR})
list(APPEND falcon_LIBRARY_DIRS  ${falcon_LIBRARY_DIR})
list(INSERT CMAKE_LIBRARY_PATHS 0 ${falcon_LIBRARY_DIR})

set(falcon_LIBRARIES falcon_engine)

option(DISABLE_RPATH "http://wiki.debian.org/RpathIssue" off)
if(NOT DISABLE_RPATH)
   # Always find libfalcon_engone.so in build and install tree, without LD_LIBRARY_PATH.
   set(CMAKE_SKIP_BUILD_RPATH  false)
   set(CMAKE_BUILD_WITH_INSTALL_RPATH false)

   # RPATH must always point to the final destination
   # No matter if we installed directly there or in a temporary prefix
   if(CMAKE_INSTALL_RPATH)
      set(CMAKE_INSTALL_RPATH_USE_LINK_PATH false)
   else()
      set(CMAKE_INSTALL_RPATH "@FALCON_FINAL_DEST@/@FALCON_LIB_DIR@")
      set(CMAKE_INSTALL_RPATH_USE_LINK_PATH true)
   endif()
endif()

# for install(TARGETS .. ${FALCON_INSTALL_DESTINATIONS})
set(FALCON_INSTALL_DESTINATIONS
  RUNTIME DESTINATION ${falcon_BINARY_DIR}
  LIBRARY DESTINATION ${falcon_LIBRARY_DIR}
  ARCHIVE DESTINATION ${falcon_LIBRARY_DIR}
)
# NOTE modules are installed via 
#   install(FILES .. DESTINATION ${FALCON_MOD_DIR})
# since they are neither RUNTIME, LIBRARY nor ARCHIVE. 

#In windows, we normally install in c:\falcon
if(WIN32)
   #mingw requires -mthreads global option
   if(CMAKE_GENERATOR STREQUAL "MinGW Makefiles")
      list(APPEND CMAKE_EXE_LINKER_FLAGS -mthreads )
      list(APPEND CMAKE_SHARED_LINKER_FLAGS -mthreads )
      list(APPEND CMAKE_MODULE_LINKER_FLAGS -mthreads )
   endif()
endif(WIN32)
#
##</See ${PROJECT_SOURCE_DIR}/CMakeLists.txt for dublication of this>

macro( falcon_define_module varname modname )
   set( ${varname} "${modname}_fm" )
endmacro( falcon_define_module )

function(FALCON_FINALIZE_MODULE tgt )
   target_link_libraries(${tgt} ${falcon_LIBRARIES} )
   falcon_install_module( ${tgt} )
endfunction(FALCON_FINALIZE_MODULE)

function(FALCON_FINALIZE_MODULE2 tgt libs)
   target_link_libraries(${tgt} ${falcon_LIBRARIES} ${libs} )
   falcon_install_module( ${tgt} )
endfunction(FALCON_FINALIZE_MODULE2)

function(FALCON_INSTALL_MODULE tgt )
  if(APPLE)
    set_target_properties(${tgt} PROPERTIES 
      PREFIX ""
      SUFFIX ".dylib" )
  else()
    set_target_properties(${tgt} PROPERTIES 
      PREFIX "" )
  endif()

  #give the ability to store modules in a temporary space
  if ( NOT FALCON_MOD_DIR )
     set (FALCON_MOD_DIR "${falcon_MODULE_DIR}" )
  endif()
   
  install( TARGETS ${tgt}
           DESTINATION ${FALCON_MOD_DIR} )
endfunction(FALCON_INSTALL_MODULE)
