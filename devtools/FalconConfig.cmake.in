######################################################################
# The Falcon Programming Language.
# CMake module for find_package( falcon )
######################################################################


get_filename_component(SELF_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

# OPTIONAL for the case this project is built as a subproject.
include(${SELF_DIR}/falcon-core-targets.cmake OPTIONAL)

set(Falcon_MOD_DIR "@FALCON_MOD_DIR@")
set(Falcon_BIN_DIR "@FALCON_BIN_DIR@")
set(Falcon_LIB_DIR "@FALCON_LIB_DIR@")
set(Falcon_MAN_DIR "@FALCON_MAN_DIR@")

#Versioning
set( Falcon_VERSION "@FALCON_VERSION_ID@" )
set( Falcon_VERSION_NAME "@FALCON_VERSION_NAME@" )

set( Falcon_MAJOR_VERSION @FALCON_VERSION_MAJOR@ )  
set( Falcon_MINOR_VERSION @FALCON_VERSION_MINOR@ )
set( Falcon_SUBMINOR_VERSION @FALCON_VERSION_REVISION@ )
set( Falcon_PATCH_VERSION @FALCON_VERSION_PATCH@ )

# Prepare Falcon in build environment.

if( WIN32 )
   set(Falcon_PREFIX "${SELF_DIR}/../../..")
   #Will be bin and lib
   set(Falcon_BINARY_DIR "${Falcon_PREFIX}/@FALCON_BIN_DIR@")
   set(Falcon_LIBRARY_DIR "${Falcon_PREFIX}/@FALCON_LIB_DIR@")
   
   #This can change depending on the version
   set(Falcon_INCLUDE_DIR "${Falcon_PREFIX}/@FALCON_INC_DIR@")
   list(APPEND Falcon_INCLUDE_DIRS  ${Falcon_INCLUDE_DIR})
else()
   # Selection of the build prefix (either the final one or a temporary build one) is performed
   # by the caller, simply which FalconConfig.cmake module to load. So, our position is relevant.
   if( "${SELF_DIR}" STREQUAL "@FALCON_FINAL_DEST@/@FALCON_MOD_DIR@/cmake" )
      #If we're below the final destination, then use the final destination as a prefix.
      if ("@FALCON_FINAL_DEST@" STREQUAL "@CMAKE_INSTALL_PREFIX@" )
         # When the prefix is the same as the final destination, there isn't a difference.
         # Warn about this, because the user of test builds may be misleaded.
         # It is right to be here in case of test (development) builds.
         Message( STATUS "Falcon module uses local settings (@CMAKE_INSTALL_PREFIX@)" )
      else()
         Message( STATUS "Falcon module configured under system-wide installation." )
      endif()
      
      set(Falcon_PREFIX "@FALCON_FINAL_DEST@")
      
      set(Falcon_BINARY_DIR "${Falcon_PREFIX}/@FALCON_BIN_DIR@")
      set(Falcon_LIBRARY_DIR "${Falcon_PREFIX}/@FALCON_LIB_DIR@")

      set(Falcon_INCLUDE_DIR "${Falcon_PREFIX}/@FALCON_INC_DIR@")
      list(APPEND Falcon_INCLUDE_DIRS  ${Falcon_INCLUDE_DIR})
   else()
      set(Falcon_PREFIX "@CMAKE_INSTALL_PREFIX@")
      set(Falcon_BINARY_DIR "${Falcon_PREFIX}/@FALCON_BIN_DIR@")
      set(Falcon_LIBRARY_DIR "${Falcon_PREFIX}/@FALCON_LIB_DIR@")

      # If defined, prefer the source directory include files over the installed ones
      if(DEFINED FALCON_SRC_TREE)           
        list(APPEND Falcon_INCLUDE_DIRS "${FALCON_SRC_TREE}/core/include")
        message( STATUS "Falcon module configured under DEVELOPMENT (${FALCON_SRC_TREE}) settings" )
      endif()
      #The output directory doesn't change. However, is not used as include.
      set(Falcon_INCLUDE_DIR "${Falcon_PREFIX}/@FALCON_INC_DIR@")           
      # But adds generated include files
      list(APPEND Falcon_INCLUDE_DIRS "${SELF_DIR}/../../../@FALCON_INC_DIR@" )
   endif()
endif()

#Check if everything is in place.
find_program(Falcon_EXECUTABLE falcon "${Falcon_BINARY_DIR}")
find_library(Falcon_ENGINE falcon_engine "${Falcon_LIBRARY_DIR}")
find_file(Falcon_ENGINE_INC falcon/engine.h "${Falcon_INCLUDE_DIR}" )
   
# Prepare Falcon in development environment.
list(APPEND Falcon_INCLUDE_DIRS  ${Falcon_INCLUDE_DIR})
list(APPEND Falcon_LIBRARY_DIRS  ${Falcon_LIBRARY_DIR})

set(Falcon_LIBRARIES falcon_engine)

if(NOT WIN32)
   option(DISABLE_RPATH "http://wiki.debian.org/RpathIssue" off)
else()
   set(DISABLE_RAPTH on)
endif()
if(NOT DISABLE_RPATH)
   # Always find libfalcon_engone.so in build and install tree, without LD_LIBRARY_PATH.
   set(CMAKE_SKIP_BUILD_RPATH  false)
   set(CMAKE_BUILD_WITH_INSTALL_RPATH false)

   # RPATH must always point to the final destination
   # No matter if we installed directly there or in a temporary prefix
   if(CMAKE_INSTALL_RPATH)
      set(CMAKE_INSTALL_RPATH_USE_LINK_PATH false)
   else()
      set(CMAKE_INSTALL_RPATH "@FALCON_FINAL_DEST@/@FALCON_LIB_DIR@")
      set(CMAKE_INSTALL_RPATH_USE_LINK_PATH true)
   endif()
endif()

# for install(TARGETS .. ${FALCON_INSTALL_DESTINATIONS})
set(FALCON_INSTALL_DESTINATIONS
  RUNTIME DESTINATION ${Falcon_BINARY_DIR}
  LIBRARY DESTINATION ${Falcon_LIBRARY_DIR}
  ARCHIVE DESTINATION ${Falcon_LIBRARY_DIR}
)
# NOTE modules are installed via 
#   install(FILES .. DESTINATION ${FALCON_MOD_DIR})
# since they are neither RUNTIME, LIBRARY nor ARCHIVE. 

#In windows, we normally install in c:\falcon
if(WIN32)
   #mingw requires -mthreads global option
   if(CMAKE_GENERATOR STREQUAL "MinGW Makefiles")
      list(APPEND CMAKE_EXE_LINKER_FLAGS -mthreads )
      list(APPEND CMAKE_SHARED_LINKER_FLAGS -mthreads )
      list(APPEND CMAKE_MODULE_LINKER_FLAGS -mthreads )
   endif()
endif(WIN32)
#
##</See ${PROJECT_SOURCE_DIR}/CMakeLists.txt for dublication of this>

macro( falcon_define_module varname modname )
   set( ${varname} "${modname}_fm" )
endmacro( falcon_define_module )

function(FALCON_FINALIZE_MODULE tgt )
   target_link_libraries(${tgt} ${Falcon_LIBRARIES} )
   falcon_install_module( ${tgt} )
endfunction(FALCON_FINALIZE_MODULE)

function(FALCON_FINALIZE_MODULE2 tgt libs)
   target_link_libraries(${tgt} ${Falcon_LIBRARIES} ${libs} )
   falcon_install_module( ${tgt} )
endfunction(FALCON_FINALIZE_MODULE2)

function(FALCON_INSTALL_MODULE tgt )
  if(APPLE)
    set_target_properties(${tgt} PROPERTIES 
      PREFIX ""
      SUFFIX ".dylib" )
  else()
    set_target_properties(${tgt} PROPERTIES
      PREFIX "" )
  endif()

  install( TARGETS ${tgt}
           DESTINATION @FALCON_MOD_DIR@ )
endfunction(FALCON_INSTALL_MODULE)

## Backward compatibility definitions
message(STATUS "The falcon_INCLUDE_DIR(S) and falcon_LIBRARIES variables are deprecated, "
"replace them with Falcon_INCLUDE_DIR(S) and Falcon_LIBRARIES.")
set(falcon_INCLUDE_DIR ${Falcon_INCLUDE_DIR})
set(falcon_INCLUDE_DIRS ${Falcon_INCLUDE_DIRS})
set(falcon_LIBRARIES ${Falcon_LIBRARIES})
