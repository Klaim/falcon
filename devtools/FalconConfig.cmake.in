######################################################################
# The Falcon Programming Language.
# CMake module for find_package( falcon )
######################################################################


get_filename_component(SELF_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)

# OPTIONAL for the case this project is built as a subproject.
if(NOT TARGET falcon_engine)
  include(${SELF_DIR}/falcon-core-targets.cmake OPTIONAL)
endif()

set(Falcon_APP_DIR "@FALCON_APP_DIR@")
set(Falcon_MOD_DIR "@FALCON_MOD_DIR@")
set(Falcon_BIN_DIR "@FALCON_BIN_DIR@")
set(Falcon_LIB_DIR "@FALCON_LIB_DIR@")
set(Falcon_MAN_DIR "@FALCON_MAN_DIR@")
set(Falcon_INC_DIR "@FALCON_INC_DIR@")
set(Falcon_ARCH_DIR lib)

set(Falcon_PREFIX ${SELF_DIR}/../../..)
set(Falcon_INCLUDE_DIR ${Falcon_PREFIX}/@FALCON_INC_DIR@)
set(Falcon_BINARY_DIR {Falcon_PREFIX}/@FALCON_BIN_DIR@)
set(Falcon_LIBRARY_DIR ${Falcon_PREFIX}/@FALCON_LIB_DIR@)
set(Falcon_INCLUDE_DIR  ${Falcon_PREFIX}/@FALCON_INC_DIR@)

# If defined, prefer the source directory include files over the installed ones
if(DEFINED ENV{FALCON_SRC_TREE})
  list(APPEND Falcon_INCLUDE_DIRS "$ENV{FALCON_SRC_TREE}/core/include")
  if(NOT WIN32)
    message( STATUS "Falcon module configured under DEVELOPMENT (${FALCON_SRC_TREE}) settings" )
  endif()
endif()
list(APPEND Falcon_INCLUDE_DIRS "${Falcon_INCLUDE_DIR}")

#Versioning
set( Falcon_VERSION "@FALCON_VERSION_ID@" )
set( Falcon_VERSION_NAME "@FALCON_VERSION_NAME@" )
#
set( Falcon_MAJOR_VERSION @FALCON_VERSION_MAJOR@ )
set( Falcon_MINOR_VERSION @FALCON_VERSION_MINOR@ )
set( Falcon_SUBMINOR_VERSION @FALCON_VERSION_REVISION@ )
set( Falcon_PATCH_VERSION @FALCON_VERSION_PATCH@ )

#Check if everything is in place.
find_program(Falcon_EXECUTABLE falcon "${Falcon_BINARY_DIR}")
find_program(Falcon_falpack_EXECUTABLE falpack "${Falcon_BINARY_DIR}")
find_library(Falcon_ENGINE falcon_engine "${Falcon_LIBRARY_DIR}")
find_file(Falcon_ENGINE_INC falcon/engine.h "${Falcon_INCLUDE_DIR}" )

# Prepare Falcon in development environment.
list(APPEND Falcon_INCLUDE_DIRS  ${Falcon_INCLUDE_DIR})
list(APPEND Falcon_LIBRARY_DIRS  ${Falcon_LIBRARY_DIR})

set(Falcon_LIBRARIES falcon_engine)

if(NOT WIN32)
   option(DISABLE_RPATH "http://wiki.debian.org/RpathIssue" off)
else()
   set(DISABLE_RAPTH on)
endif()
if(NOT DISABLE_RPATH)
   # Always find libfalcon_engone.so in build and install tree, without LD_LIBRARY_PATH.
   set(CMAKE_SKIP_BUILD_RPATH  false)
   set(CMAKE_BUILD_WITH_INSTALL_RPATH false)

   # RPATH must always point to the final destination
   # No matter if we installed directly there or in a temporary prefix
   if(CMAKE_INSTALL_RPATH)
      set(CMAKE_INSTALL_RPATH_USE_LINK_PATH false)
   else()
      set(CMAKE_INSTALL_RPATH "@CMAKE_INSTALL_PREFIX@/@FALCON_LIB_DIR@")
      set(CMAKE_INSTALL_RPATH_USE_LINK_PATH true)
   endif()
endif()

# for install(TARGETS .. ${FALCON_INSTALL_DESTINATIONS})
set(FALCON_INSTALL_DESTINATIONS
  RUNTIME DESTINATION ${Falcon_BIN_DIR}
  LIBRARY DESTINATION ${Falcon_LIB_DIR}
  ARCHIVE DESTINATION ${Falcon_ARCH_DIR}
)
# NOTE modules are installed via
#   install(FILES .. DESTINATION ${FALCON_MOD_DIR})
# since they are neither RUNTIME, LIBRARY nor ARCHIVE.

#In windows, we normally install in c:\falcon
if(WIN32)
   #mingw requires -mthreads global option
   if(CMAKE_GENERATOR STREQUAL "MinGW Makefiles")
      list(APPEND CMAKE_EXE_LINKER_FLAGS -mthreads )
      list(APPEND CMAKE_SHARED_LINKER_FLAGS -mthreads )
      list(APPEND CMAKE_MODULE_LINKER_FLAGS -mthreads )
   endif()
endif(WIN32)
#
include(${SELF_DIR}/modfunctions.cmake)