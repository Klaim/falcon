/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: nest.fal

   Main file driving the engine.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sun, 27 Jun 2010 14:01:38 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import NestError from .error as NestError
import from .utils
import ConfigBinder from .bindings as ConfigBinder
import SkinBinder from .bindings as SkinBinder
import NestModule from .nestmodule as NestModule

/*#
   Service variable.

   To be used in services like
   class X from Service
      ...
      varname = ServiceVar( )
   end
   
*/
class ServiceVar(  binding )
   isSession = false   
   _binding = binding
   
   _value = nil
   _valueSet = false
   _listeners = nil

   init
      if binding provides initVar
         binding.initVar( self )
      end
   end

   function reinit( binding )
      self._binding = binding
      
      if binding provides initVar
         binding.initVar( self )
      end
   end

   function __set_value( value )
      self._value = value
      self._valueSet = true
      for item in self._listeners
         item( value )
      end
   end

   function __get_value(): return self._value

   function __get_isSet(): return self._valueSet
   
   /*# Listen point for subscribers */
   function listen( lr )
      if not self._listeners: self._listeners = [].NM()
      self._listeners.add( lr )
   end

   /***************************************** Private part */
   function bind( name, service )
      if self._binding
         self._binding.bind( name, service, self )
      end
   end
   
end

/*# Main Nest modular component.
   @optparam instance A string representing a specific name for this service.

   If the @b instance is not specificed the service is "instanceless" (or nameless).
*/
class Service( instance ) from NestModule( instance )
   extscripts = []
   stylesheets = []

   scripts = []
   styles = []
   
   /*# Skin name. 
      Set to a logical skin name.
   */ 
   skin = ServiceVar( SkinBinder )
   
   /*# Minimum user authorization level needed to use this service at all.

      When the Nest.auth_level variable is higher (less privileged) than this
      value, the service won't be run nor rendered.
   */
   level = ServiceVar( ConfigBinder )

   //=========================================
   // Public interface
   //=========================================

   /*# Configures the service.
      @param config A dictionary containing configuration key/value pairs.
      
      In this phase, the service structure is still incomplete, and data providers may be missing.

      This means that variables meant to be broadcast shouldn't be set here. Use the bind
      process, that happens later on.

      The default implementation just stores the @b config parameter in the @a NestModule.configuration
      property. This is where configuration binders will check for this value.
   */
   function configure( config )
      self.configuration = config
      if "skin" in config
         self.skin.value = config["skin"]
      end
   end
   
   /*# Hook called when the service is loaded.

      After the service is loaded and configured by Nest, it gets a chance to punch in
      and perform some essential operations before Nest can proceed with the rest of the page.
   */
   function startup()
   end

   /*# Action performed by the service before rendering.
   
      This method is always called after the whole of the page has been loaded,
      and all the services are readied and started up.
   */
   function run()
   end

   /*# Ask Nest system to prepare to render ourselves at this point.

      This sends a request to Nest to insert the output of the Service
      here.

   */
   function render()
      Nest.renderService( self )
   end

   /*# Execute rendering.

      This callback is called if the service previously registered through @ Service.render,
      and is invoked directly by Nest at page output completion.

      The default function loads the skin given in _skin_file, if present.

      Implementors may override this if this simple behavior is not enough, or if the service
      rendering is simple enough not to require skin files.
   */
   function perform_render()
      if not self.allowed(): return ""
      if (sf = self.skin.value) and sf.isCallable()
         return self.renderSkin( sf )
      end
      return ""
   end
   
   /*# Called at termination.

      This method is called after all the rendering are perfomed and the page output is sent
      to the remote user. Normally, it shouln't generate any output, unless critical errors
      are detected and cannot be handled locally.
   */
   function finalize()
   end

   /*# Check if the current user is allowed to access this service.
   
       Skins and other variable element should check for this value before performing
       any operation or displaying any data.
   */
   function allowed()
      return self.level.value == nil or Nest.auth_level <= self.level.value
   end

    /*# Check if the current user is allowed to access this service.

      Differently from @a Service.allowed, it also logs an error message if the service is not
      allowed.
   */
   function checkAllowed()
      name = self.fullName()
      Nest.logd( "Checking authorization level for " + name)
      if not self.allowed()
         Nest.logw( @ "Running $(name) with level $(Nest.auth_level) when required $(self.level.value)" )
         return false
      end
      Nest.logd( "Authorization level for " + name + " granted")
      return true
   end
   
//=========================================
// Utilities
//=========================================

   /*# Return the name full of a variable contained in this class. */
   function varName( var )
      if self.instance: return self.className() + "." + self.instance + ":" + var
      return self.className() + ":" + var
   end
   
   /*# Bind the variables through the variable binders.
      @param listener a function to call back if the variables are session variables and change.
   */
   function bind( listener )
      for key, prop in self.retrieve()
         if prop.derivedFrom( ServiceVar )
         
            if prop.isSession and listener
               prop.listen( .[ listener self.varName(key) ] )
            end

            prop.bind( key, self )
         end
      end
   end // function configure


   /*# Check variables */
   function getVariables()
      x = self.retrieve()
      for k, v in x
         if not v.derivedFrom( ServiceVar )
            continue dropping
         end
      end
      
      return x
   end

   function getVariableData()
      x = self.retrieve()
      r = [=>]
      for k, v in x
         if v.derivedFrom( ServiceVar )
            r[k] = v.value 
         end
      end
      
      return r
   end

   /*# Loads a required skin file, sending it configuration data. */
   function renderSkin( callable )
      s = StringStream()
      old = stdOut( s )
      try
         callable( bless(self.getVariableData()), self )
         stdOut( old )
      catch in e
         stdOut( old )
         raise e
      end

      return s.closeToString()
   end

end
