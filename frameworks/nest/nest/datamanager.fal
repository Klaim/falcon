/*
   FALCON - Base Data Manager

   Nest - Falcon web applcation engine

   FILE: datamanager.fal

   Base class for data managers.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Mon, 09 Aug 2010 15:33:56 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from utils

/*# Base data manager.
	This is just an abstract class of definitions to be implemented by the 
	real data managers.
	
	The final application should write a data manager class 
*/

class DataManager( name, location )
	// name of this data manager.
	name = name
	
	//# Place in where this script is located.
	location = location
	
	//# Entities currently loaded by this dataManager
	entities = [=>]
	
	/*# Configure this data manager.
      @param vars an array of variables to be configured.
   	@raise CodeError if the configuration is not coherent with the type of data manager.   
   */
   function configure( vars )
   	raise CodeError( 10000, i"Please override" )
   end


   /*# Query an entity.
   
      @param entity The entity to be queried.
      @param fields Array of fields or dictionary of conditions to be retreived.
      @param start Start after N fetched records (nil for all).
      @param count Move N records in the returned data.

      @return A Table containing the query results.
   */
   function query( entity, fields, start, count )
   	raise CodeError( 10000, i"Please override" )
   end

   /*# Query an entity -- for a single item.
      @param entity The entity to be queried.
      @param eid The ID of the entity to retreive.
      @param fields The fields to be retreived (nil for all).

      @return A dictionary containing the required fields (or all).
   */
   function queryItem( entity, eid, fields )
   	raise CodeError( 10000, i"Please override" )
   end

   /*# Inserts a new item in the data pool.
      @param entity The entity to be added.
      @param data A dictionary of data to be stored.
      @return The new entity ID.
   */
   function add( entity, data )
   	raise CodeError( 10000, i"Please override" )
   end

   /*# Modifies the values of an entity in the database.
      @param entity The entity to be added.
      @param data A dictionary of data to be stored.
      @return The new entity ID.
   */
   function update( entity, eid, data )
   	raise CodeError( 10000, i"Please override" )
   end

   /*# Modifies the values of an entity in the database.
      @param entity The entity to be added.
      @param data A dictionary of data to be stored.
      @return The new entity ID.
   */
   function delete( entity, eid )
   	raise CodeError( 10000, i"Please override" )
   end
   
   /*# Create the database. 
   	The base class loads all the entities and sends them to the
   	createEntity method.
   */
   
   function create()
   	entloc = self.location + "/" + self.name
   	ents = [=>]
   	
   	// scan the data manager entities in its directory
   	d = Directory( entloc )
   	while( name = d.read() )
   		if name.endsWith( ".fal" ) or name.endsWith( ".fam" )
   			ents[ name[0:name.rfind( "." ) ] = 0
   		end
   	end
   	d.close()
   		
   	// now load all of them
   	for ename, dummy in ents
   		entity = self.loadEntity( ename )
	   	// TODO: Sort them in the correct dependency order
	   	entity.create()
	   	entity.initialize()
   	end
   end
   
   /*# Loads an entity definition.
   	@param ename The name of the entity to be loaded.
   */
   function entity( ename )
   	if ename in self.entities
   		return self.entities[ename]
   	end
   	
   	entloc = utils.findFileInDirs(
            [ self.location + "/" + self.name ],
            name,
            ["fal", "fam"]
         )
         
      if not entloc
      	raise NestError( NestError.entity_not_found, "", ename )
      end
   	
   	cls = Nest.compileClass( entloc, ename )
   	if cls != nil
   		ent = cls( self )
   		self.entities[ename] = cls
   		return cls
   	end 
   	
   end
   
end
