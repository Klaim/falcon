/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: utils.fal

   File with general utils
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Tue, 29 Jun 2010 16:52:46 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/


function findFile( dir, rname, exts )
   // search under dir for the file or the file + some of the exts.
   fpath = Path()
   fpath.fulloc = dir
   fpath.file = rname

   for ext in exts 
      fpath.extension = ext
      if fileType( fpath.path ) == FileStat.NORMAL
         return fpath.path
      end
   end
   
   // no luck with the extension. Have we the file as-is?
   fname = dir + "/" + rname
   if fileType( fname ) == FileStat.NORMAL
      return fname
   end
   
   // no luck at all
   return nil
end


function findFileInDirs( locations, name, exts )
   for loc in locations
      if ( f = findFile( loc, name, exts ) )
         return f
      end
   end
end


function reldir( parent, child )
   if child.startsWith( "/" )
      return child
   end
   
   if not parent.endsWith("/"): parent += "/"
   return parent + child
end


function checkModifiedSince( res_file )
   if "If-Modified-Since" in Request.headers
      try
         // don't bother too much if we don't succeed at first.
         since = TimeStamp()
         date = Request.headers["If-Modified-Since"]
         since.fromRFC2822(date)
         fs = FileStat(res_file)
         if fs.mtime <= since
            Reply.status = 304
            Reply.reason = "Not modified"
            Reply.setHeader( "Content-Type" )
            Reply.setHeader( "Cache-Control" )
            Reply.commit()
            return true
         end
      catch in e
         Nest.logw( "Error during If-Modified-Since check request: " + e )
      end
   else
      // else, save the timestamp
      fs = FileStat(res_file)
      Reply.setHeader("Last-Modified", fs.mtime.toRFC2822() )
   end

end


function exitReply( status, reason, text )
   Reply.status = status
   Reply.reason = reason
   Reply.ctype("text","html","utf-8")
   stdOut().writeText( @"<body><h1>$(status) $(reason)</h1>\n<p>$(text)</p>\n</body>")
end

