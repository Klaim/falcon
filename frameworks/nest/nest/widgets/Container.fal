/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: Container.fal

   AJAX widgeting subsystem -- Generic container (seen as a field).
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sun, 02 Oct 2011 13:53:51 +0200

   -------------------------------------------------------------------
   (C) Copyright 2011: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from nest.widgets.widget in widget

/*# Generic container (seen as a field).
   @param id The widget ID
   @optparam tagtype Tag used for this container (defaults to fieldset).
   @optparam tag_beg HTML code to be put before the first child (defaults to "").
   @optparam tag_sep HTML code to be put in between children (defaults to "&nbsp;").
   @optparam tag_end HTML code to be put after the last child (defaults to "").

   This is the base class for widget containers; it can be used to
   display multiple fields as a single field in forms.

   The default tag of this container is 'fieldset'. You should
   overload the class or reset it to another 
*/
class Container( id, tagtype, tag_beg, tag_sep, tag_end ) from widget.Widget( id )
   tag = tagtype ? tagtype : "span"
   isSelfClosing = false

   tag_beg = tag_beg ? tag_beg : ""
   tag_sep = tag_sep ? tag_sep : "&nbsp;"
   tag_end = tag_end ? tag_end : ""
   
   //# value of the checkbox set (array of checked box values)
   value = nil
   checkName = "checked"

   init
      // TODO: Remove this when we have automatic parentship
      self.addClassInParentship( Container )
   end


   function renderContent()
      res = ""
      for child in self.children
         forfirst: res += self.tag_beg
         res += child.renderInParent( self )
         formiddle: res += self.tag_sep
         forlast: res += self.tag_end
      end

      return res
   end

   //# Override this for personalized label/content/info display
   function renderChild( child )
      return child.render()
   end


   function setRenderValue( val )
      if val.typeId() == ArrayType
         for item in val
            if item in self.childrenById
               child = self.childrenById[item]
               self.setChildChecked( child )
            end
         end
      elif val in self.childrenById
         self.setChildChecked( self.childrenById[val] )
      end
   end


   function setChildChecked( child )
      if self.value == nil: self.value = []

      if 'value' in child.props
         self.value += child.props['value']
      elif 'name' in child.props
         self.value += child.props['name']
      else
         self.value += child.id
      end

      child.props[self.checkName] = self.checkName
   end

   function getValue()
      return self.value
   end
end

