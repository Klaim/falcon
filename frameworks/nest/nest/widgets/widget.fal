/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: widget.fal

   Basic definition for the AJAX widgeting subsystem.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Mon, 26 Sep 2011 11:55:58 +0200

   -------------------------------------------------------------------
   (C) Copyright 2011: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from json in json

/*# Represents a request that could be sent via AJAX back to a widget.
   @optparam rp Required properties (data that must be sent back to us).
   @optparam extra Extra parameters that should be sent back here.
   @potparam jsPrefix A javascript code that should be invoked before launching the ajax request.
   
   This class is used to store the parameters of AJAX requests that the widgets
   rendered on a web site could send back to to their server-side counterparts.

   It has a set of required properties and a set of extra fixed parameters.
   The properties are a list of strings that represent a property in the rendered
   widget or in a sibling or parent widget.

   Property names are represented as path, relative to this widget. For instance,
   - "value" reprsents the text value of this object.
   - "../value" represents the text value of the parent object.
   - "../sibling/value" represents the text value of an object called "sibling"
     being rendered at the same level of this widget.
   - "/a/b/value" is the text value of a widget "b" under widget "a" in the
     topmost widget parent of this one.

   Any DOM element property can be queried this way and sent back to the receiving
   application, that will receive it in a "infos" entry, named after the relative
   property name that has been given ("value" => value,
   "../sibling/value" => "sibling.value" and so on).
*/
class AJAXRequest( rp, extra, jsPrefix ) 
   reqProps = rp
   extra = extra
   jsPrefix = jsPrefix

   function renderReqProps()
      if self.reqProps: return json.JSONencode( self.reqProps ).replace( "\"", "'" )
      return "null"
   end

   function renderExtra()
      if self.extra: return htmlEscape(json.JSONencode( self.extra )).replace( "\"", "'" )
      return "null"
   end

   /*# Renders an AJAX request bound with this widget. */
   function render( hostName, id, message )
      rps = self.renderReqProps()
      extra = self.renderExtra()
      rend = "Nest.widgetMsg('" + hostName + "', '" +
                       id + "', '"+message+"', " +rps+ ", " + extra +")"
                       
      if self.jsPrefix
         return self.jsPrefix +";"+ rend
      else
         return rend
      end
   end

end

/*# Base class for the widgeting system.
   @param id The id of the widget as know in the HTML/AJAX rendering.
*/

class Widget( id )
   //# 'local' ID of this widget in the DOM model.
   id = id

   //# HTML Tag associated with this widget.
   tag = "div"
   
   //# HTML properties associated with this widget at DOM level.
   props = nil

   //# Javascript callbacks resolving in a NEST widget ajax request.
   ajaxReqs = nil

   //# Custom message handlers.
   ajaxMessages = nil

   //# list of children.
   children = []

   //# parent of this widget.
   parent = nil

   //# list ov javascript methods to be added to this widget.
   jsMethods = [=>]

   jsListeners = [=>]

   //# Some widget cannot be closed with the XML self-closing tag.
   isSelfClosing = false

   //# Method invoked at javascript level after rendering.
   onCreate = nil
   
   /*# If true, this is a ajax host, and can receive ajax messages directly.

      Topmost widgets are always considered ajax AJAX, but there can be
      some widgets included inside parents that can have their own AJAX
      handler method.

      Is this property is true, the rendere will tell Nest to send AJAX
      requests to this widget.

      A parent can easily override this setting by setting this property
      to false even when a widget can manage its own AJAX messages; then
      the parent can route the messages to the children, if it wants,
      after having processed them.

      @note AJAX hosts \b must be exposed in a widget module (a file under
      nest/widget named after the exposed class) \b and must properly
      fill the @a Widget.initInfos verctor with the parameters that
      the Nest system must pass to the widget during initialization step. Also,
      they \b must provide a "tag", that is, they must be real possibly visible
      entities (or at least, an invisible empty "div"), and not just "widget groups". 
   */
   isAJAXHost = false

   /*# Init informations.
      This are the parameters that must be repeated to create a copy of this widget.
   */
   initInfos = [id]

   //# Text or widget used as label/prompt form or form-like widgets
   label = nil
   
   //# Text or widget associated with this field in form or form-like widgets
   fieldInfo = nil

   //# Adds a child to this widget.
   function addChild( wid )
      wid.parent = self
      self.children += wid
   end

   //# Renders an XHTML representation of this widget.
   function render()
      return self.renderLabel() + self.renderCore() + self.renderInfo()
   end
   
   function renderCore()
      id = self.getFullID()
      self.onRender()

      // render attributes -- if we have a tag we're an element in the document.
      if self.tag
         rend = "<" + self.tag + " id=\"" + id + "\" "
         rend += self.renderProps()
         rend += self.renderAJAXReqs()

         if self.isSelfClosing and not self.children
            rend += "/>"
         else
            rend += ">"
            rend += self.renderContent()
            rend += "</" + self.tag +">\n"
         end
         if self.isAJAXHost or not self.parent
            rend += self.renderInitInfos()
         end
      else
         rend = ""
         if self.isAJAXHost
            // in case of ajax hosting, we need a "mute div" to have a document entity with our name.
            rend +="<div id=\""+id+"\" style=\"display:none\"></div>"
            rend += self.renderInitInfos()
         end
         // otherwise we're just a set of children entities.
         rend += self.renderContent()
      end

      rend += self.renderAJAXMessages()

      // finally, render JS methods that this class may have
      rend += self.renderJSListeners()
      rend += self.renderJSMethods()
      return rend
   end
   

   function renderJSMethods()
      rend = ""
      
      for mthName, mthDef in self.jsMethods
         rend += "element." + mthName + "=" + mthDef + "\n"
      end

      if self.onCreate
         rend += "element.onCreate = function(){" + self.onCreate +";}\n"
         Nest.closingScript += "document.getElementById('" + self.getFullID() + "').onCreate();\n"
      end
      
      if rend
         rend = "<script language=\"javascript\">\n"+
                "(function(){ var element = document.getElementById('" + self.getFullID() + "');\n" +
                rend +
                "}());</script>\n"
      end
      return rend
   end

   function renderJSListeners()
      rend = ""
      for widget, mthDef in self.jsListeners
         forfirst: rend = "<script language=\"javascript\">\n" +
                          "(function(){ var element = document.getElementById('" + self.getFullID() + "');\n"
         rend += "Nest.listen( element, '"+ widget.getFullID() + "'," + mthDef + ");\n"
         forlast: rend += "}());</script>\n"
      end
      return rend
   end
   
   /*# Renders the contents of this widget.
      @return A string with the full HTML contents of this widget rendered.

      @note A sub-widget may define renderPrompt method to differentiate
      the prompt from the main body.
   */
   function renderContent()
      rend = ""
      for child in self.children
         forfirst: rend += "\n"
         rend += child.renderInParent( self ) +"\n"
      end
      return rend
   end

   
   function renderInParent( parent )
      return parent.renderChild( self ) 
   end

   function renderChild( child )
      return child.render() + "<br/>"
   end

   function renderLabel()
      if self.label
         if self.label provides render: return self.label.render()
         return self.label
      end
      return ""
   end

   function renderInfo()
      if self.fieldInfo
         if self.fieldInfo provides render: return self.fieldInfo.render()
         return self.fieldInfo
      end
      return ""
   end
   
   //# private
   function renderInitInfos()
      if self.initInfos
         obj = json.JSONencode( self.initInfos )
         id = self.getFullID()
         rend = @"
            <script language=\"javascript\">\n
            document.getElementById('$(id)').Nest_initInfo = $(obj);\n
            </script>\n"
      else
         rend = ""
      end

      return rend
   end
   
   //# private
   function renderProps()
      rend = ""
      for key, value in self.props
         rend += key + "=\"" + htmlEscape(toString(value)) + "\""
         formiddle: rend += " "
      end
      return rend
   end


   //# private
   function renderAJAXReqs()
      rend = ""
      for key, value in self.ajaxReqs
         forfirst
            id = self.getFullID()
            hostName = self.ajaxHostName()
            rend = " "
         end

         req = value.render( hostName, id, key )
         rend += key + "=\"" + req + ";\""
         formiddle: rend += " "
      end
      return rend
   end
   
   //# private
   function renderAJAXMessages()
      rend = ""
      for key, value in self.ajaxMessages
         forfirst
            this = "document.getElementById('" + self.getFullID() + "')";
            rend += "<script language=\"javascript\">\n(function(){"
         end

         rend += "Nest.messageHandlers['" + key +"']= function(obj){" + @value + "}\n"
         forlast: rend += "}());</script>"
      end
      
      return rend
   end
   
   /*# Returns the full ID of this widget (including the parent ones).
      @return A string representing the full ID of this widget at DOM model level.

      The full-id of a widget is its own ID preceded by a dot-separated list
      of the parent ids up to the root.
   */
   function getFullID()
      if self.parent
         return self.parent.getFullID() + "." + self.id
      end

      return self.id
   end

   /*# Get the topmost widget class name. */
   function parentName()
      if self.parent
         return self.parent.parentName()
      end
      return self.className()
   end

   /*# Get the topmost widget class name with ajax host capabilities. */
   function ajaxHostName()
      if self.isAJAXHost or not self.parent
         return self.className()
      else
         return self.parent.ajaxHostName()
      end
   end

   /*# Utility to create the code to invoke a nest javascript local message.
      @param msg The name of the message generated by the widget in the browser page.
      @param value A value associated with the message (may be any valid javascript expression).

      @note The value member is directly placed in the javascript invocation; if it's meant to
      be a string, proper quotes must be added inside the string.
   */
   function makeMessage( msg, value )
      return "Nest.message('"+self.getFullID()+ "', '" + msg + "', " + value +");"
   end

   /*# Called back right before rendering.
      Widget are often created and then added to a parent. This means that
      the information about their hierarcy is not ready at creation,
      but it's ready at render. This callback allows to do last setups
      before the widget is rendered.
   */
   function onRender()
   end

   /*# Sets the value of the widget before its rendering.
   */
   function setRenderValue( val )
      self.props['value'] = val
   end

   /*# Adds this style to the 'style' property of this widget. */
   function addStyle( style )
      if not self.props
         self.props = ["style" => style]
      else
         if "style" in self.props
            self.props["style"] += style
         else
            self.props["style"] = style
         end
      end
   end

   function ajaxMsg( msg, infos, extra )
      infos_s = infos ? json.JSONencode( infos ) : "null"
      extra_s = extra ? json.JSONencode( extra ) : "null"
      
      return "Nest.widgetMsg('" + self.ajaxHostName() +
               "', '" + self.getFullID() + "', '" + msg + "', " +
               infos_s + ", " + extra_s + ");"
   end

   //===================================================
   

   //===================================================
   /*# Route ajax requests.
      @params The parameters generated by the remote ajax request.
      @return A dictionary that is rendered as JSON and passed back.

      The default base class implementation does nothing.
   */
   function AJAX( params )
      return [=>]
   end

   //# Generates a set-property message
   function msgSetProperty( prop, value )
      return [
         "message" => "set",
         "id" => self.getFullID(),
         "property" => prop,
         "value"=>value ]
   end

   //# Generates a invoke method message
   function msgInvoke( method, data )
      return [
         "message" => "invoke",
         "id" => self.getFullID(),
         "method" => method,
         "param"=> data ]
   end
   
end
