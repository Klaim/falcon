/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: Form.fal

   AJAX widgeting subsystem -- Form-like collection of widgets.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Wed, 28 Sep 2011 11:31:25 +0200

   -------------------------------------------------------------------
   (C) Copyright 2011: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import Widget from nest.widgets.widget as Widget
import AJAXRequest from nest.widgets.widget as AR
import Hidden from nest.widgets.Hidden as Hidden

/*# Class presenting multiple widget for posting as a form.
   @param id The ID of the form.
   @optparam action The action of the form at submit.
   @optparam method The method (GET or POST), defaults to "POST".

   This class has support to route the input variables filling them
   into its children. The children will receive setValue
   callbacks with the value the Form expects them to receive,
   and may use this callback to check for correct values and eventually
   prepare their @b fieldInfo property with an error message.

   If the @b action is nil, the form is intended as generating an
   AJAX request that is sent to this widget. The default action
   of this widget is calling the hook "handle_form", which receives
   this form and the incoming data in a dictionary. The handler
   might then decide to apply the values via @a nest.Widget.routeValues
   or check the values directly from the dictionary.

   The routeValues method comes particularly handy when used in
   combination with a @a DataManager, as the data collected via
   routing can then be applied directly to the data manager.

   @note If the form is AJAX, it is given a method named "sendFormAJAX" on the
   Javascript side, and the onsubmit method is forcefully set to this method.
   it might be useful to use the onclick property of a button to invoke
   this method directly via 'Nest.i("form-id").sendFormAJAX()'.
   
*/
class Form( id, action, method ) from Widget( id )
   tag = "form"

   // we need a proxy for isAJAXHost, as a parent might remove it
   // while we still need it for rendering purposes
   _isAJAXForm = false

   init
      if self.props == nil: self.props = [=>]
      
      self.props["accept-charset"] = "UTF-8"
      if action
         self.props["method"] = method ? method : "POST"
         self.props["action"] = action         
      else
         self._isAJAXForm = true
         self.isAJAXHost = true
      end
      
      // TODO: Remove this when we have automatic parentship
      self.addClassInParentship( Form )
   end

   /*# Sets the "accept-charset" property.
      @parm cs The charset.
   */
   function setCharset( cs )
      self.props["accept-charset"] = cs
   end

   /*# Sets the "enctype" property to "multipart/form-data".

      You'll want to call this when you have some file widget in the form.
      "FileUpload" widgets call it automatically when they are added to a form.
   */
   function setSumbitData()
      self.props["enctype"] = "multipart/form-data"
   end

   /*# Helper to add a confirmation callback on a form.
      @param content The text that should be displayed in the confirm box.
      
      This will setup a simple confirm javascript on form submit.
      To do more sophisticated things, just set the 'onsubmit' property
      in Form.props to your preferred callback.
   */
   function setConfirmSubmit( content )
      self.props['onsubmit'] = 'return confirm("' + htmlEscape(content) + '");'
   end
   
   /*# Helper to add a reset callback on a form.
      @param content The text that should be displayed in the confirm box.
      
      This will setup a simple confirm javascript on form reset.
      To do more sophisticated things, just set the 'onreset' property
      in Form.props to your preferred callback.
   */
   function setConfirmReset( content )
      self.props['onreset'] = 'return confirm("' + htmlEscape(content) + '");'
   end

   /*# Adds an hidden value that is to be sent as variable.
      @param name The name of the field
      @param value The value to be assigned to the field.

      This is a helper automatically adding hidden fields to this form.
      
      The value will automatically be transformed in a set of dictionary or array
      values in case it's a dictionary or an array.
   */
   function addHidden( name, value )
      select value
         case ArrayType
            for val in value
               valstr = value.toString()
               field = Hidden( name + "." + valstr, valstr )
               field.addName = "[]"

               self.addChild( field )
            end
            
         case DictionaryType
            for key, val in value
               valstr = value.toString()
               field = Hidden( name + "." + key, valstr )
               field.addName = @"[$key]"

               self.addChild( field )
            end
            
         default
            field = Hidden( name, value )
            self.addChild( field )
      end
   end

   function onRender()
      vns = []
      for child in self.children
         self._getValueNodes( vns, child )
      end
         
      if self._isAJAXForm
         reqs = map( {child => "*/" + child.getFullID() + "/value" }, vns )
         self.ajaxReqs = [
            "sendFormAJAX"=> AR( reqs )
         ]

         self.props['onsubmit'] = "this.sendFormAJAX(); return false;"
      end

      clearFields = map( { child => "Nest.setWidVal('" + child.getFullID() +"', '');" },
            vns )
         
      self.jsMethods += [
         "clearFields"=> "function(){" + "".merge(clearFields) + "}",
         "setFields"=> "
            function( vals ) {
               var item;
               for( item in vals ) {
                  Nest.setWidVal(this.id + '.' + item, vals[item] );
               }
            }"
      ]

   end

   function getAllValues()
      vns = []
      self._getValueNodes( vns, self )
      data = [=>]
      for child in vns
         data[child.id] = child.getValue()
      end

      return data
   end

   function msgSetAllFields()
      data = self.getAllValues()
      return self.msgInvoke( "setFields", data )
   end

   function _getValueNodes( vns, child )
      // use */ to send by name and not by ID
      if child.isValueHost: vns += child
      for subchild in child.children
         self._getValueNodes( vns, subchild )
      end
   end
   
   /*# Overrides the base widget render content.
      This version calls:
         - renderFormBegin before rendering each widget.
         - renderChild for every child.
         - renderFormEnd after rendering all the children.

      Each method must return a string that is the rendered
      representation of the element.
   */
   function renderContent()
      rend = self.renderFormBegin()
      for child in self.children
         rend += child.renderInParent( self ) +"\n"
      end
      return rend + self.renderFormEnd()
   end

   /*# Called back in rendering each element of the form.
      @param child A child widget of this form.

      The base version just renders the prompt via child.renderPrompt() and then
      renders the body via child.render().
   */
   function renderChild( child )
      return child.renderPrompt() + child.render()
   end

   /*# Renders the start entry of the form elements.
      @return A string that is used before rendering any element.
      The base class returns an empty string.
   */
   function renderFormBegin()
      return ""
   end

   /*# Renders the end entry of the form elements.
      @return A string that is used before after rendering all the elements.
   */
   function renderFormEnd()
      return ""
   end

   /*# Base implementation of the AJAX form callback.
   */
   function AJAX( params )
      data = Nest.emit( "handle_form", self, params )
      if data: return data
      return [=>]
   end

end

/* end of Form.fal */
