/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: Uploader.fal

   AJAX widgeting subsystem -- Ajax-only upload button (not for forms)
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Mon, 04 Jun 2012 23:13:14 +0200

   -------------------------------------------------------------------
   (C) Copyright 2011: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import Widget from nest.widgets.widget as Widget
import JSP from nest.widgets.widget as JSP

/**
   Input specialized to upoload files for the Uploader widget.
*/
class UploaderInput(id) from Widget(id)
   tag = "input"
   init
      // have the name value automatically set
      self.props = ["name" => nil, "type" => "file"]

      // close self
      this = self
      self.jsMethods["onchange"] = {=>
            id = this.parent.getFullID()
            return @"function(){Nest.i('$(id)').sendFile()}"
         }
   end
   
end

/*# Ajax and Nest enabled file uploader.
   @param id The id of the widget
   @param receiverFunc The Nest Ajax function receiving the file.
   @optparam extra Extra paramters to be statically sent to the remote function.
   @optparam prompt a string or widget prompt.
   
   This widget, compatible with HTML4.0, allows to upload
   files to a remote Nest server, monitoring their upload
   status and getting called back when the upload is
   complete.

   This widget is not an ajax host. It is meant to call
   a remote ajax function.

   The uploader can be configured setting its fileInput member,
   which represents the visible widget on the screen that will
   ask the user to upload files. If its "name" property is still
   not set at render, it will be set to the full ID of the
   host widget, which is the uploader.

   Multiple widgets can be placed in a page, but Nest
   serializes AJAX calls. Contemporary uploads will be
   procesed one at a time. This is actually helping optimizing
   the network bandwidth, as more uploads at the same time
   tend to be fragmented.

   As this widget is not uploading a document through a form,
   it is not suitable to be inserted in a form (not even
   an AJAX form).

@section recfunc The receiver function

   The receiver function, invoked by name, is to be found in the
   nest/ajax/ directory, and operates as any Nest Ajax functions.

   As it's not part of the nest widgeting framework, it won't be
   able to send messages back to the widget directly, but this
   can be done through extensions of this widget or by simply
   listening for the returned function result in a callback
   function in the page.

   The Extra parameters that can be sent to the remote entity
   are either a string or a list/array of @a JSP instances.

   In case they are a string, they're considered pre-processed
   and passed as-is as ["extra"] in the function params
   dictionary. If they are a list of JSP instances, they are
   parsed live by Nest and their value can be configured runtime;
   their result (a dictionary of values) will be sent in the
   "extra" field of the params dictionary in the target function.
*/

class Uploader( id, receiverFunc, prompt, extra ) from Widget( id )
   ajaxFunc = receiverFunc
   prompt = prompt
   extra = extra
   fileInput = UploaderInput('file')
   
   init
      if prompt: self.addChild( prompt )
      self.addChild( self.fileInput )

      this = self
      self.jsMethods["sendFile"] = {=>
            id = this.getFullID()
            if this.extra
               params = @"Nest.i('$(id).params').value = JSON.stringify("+JSP.renderList(this.extra, id)+");"
            else
               params = ""
            end
            
            return @"
               function() {
                  this.onStart();
                  Nest.i('$(id).iframe').contentDocument.body.innerHTML = '';
                  $params
                  Nest.i('$(id).form').submit();
                  this.watchUpload()
               }"
         }

      // a function to be overridden.
      self.jsMethods["onStart"] = "function(data){Nest.message(this, 'start', {file:this.value});}"
      self.jsMethods["onComplete"] = "function(data){Nest.message(this, 'complete', JSON.parse(data));}"
      self.jsMethods["watchUpload"] = {=>
         id = this.getFullID()
         return @"
         function() {
            var content = Nest.i('$(id).iframe').contentDocument.body.innerHTML;
            if( content != '' ) {
               this.onComplete( content );
            }
            else{
               setTimeout(\"Nest.i('$(id)').watchUpload()\",250);
            }
         }"
         }
   end

   function setName( fname )
      self.fileInput.props["name"] = fname
      return self
   end

   function setOnStart( jsFunc )
      self.jsMethds.props["onStart"] = jsFunc
      return self
   end
   
   function setOnComplete( jsFunc )
      self.jsMethds.props["onComplete"] = jsFunc
      return self
   end
   
   function renderContent()
      id = self.getFullID()
      link = Nest.ajaxLink( self.ajaxFunc )
      
      res = @"
         <iframe name=\"$(id).iframe\" id=\"$(id).iframe\" style=\"visibility:hidden\" width=0 height=0></iframe>
         <form id=\"$(id).form\" target=\"$(id).iframe\" action=\"$(link)\" method=\"POST\" enctype=\"multipart/form-data\" accept-charset=\"utf-8\">
         "
      res +="<input type=\"hidden\" name=\"id\" value\=" + self.getFullID() +"\"/>\n"

      if self.extra
         // the value is filled by js.
         res += @"<input id=\"$(id).params\" type=\"hidden\" name=\"params\" value\=\"\"/>\n"
      end
      
      prompt = self.prompt
      if prompt
         res += prompt provides render ? \
                     prompt.render() : \
                     "<span>"+prompt+"</span>"
      end

      infile = self.fileInput
      if infile.props["name"] == nil: infile.props["name"] = self.getFullID()
      res += infile.render()

      res += "</form>"

      return res
   end
   
end

