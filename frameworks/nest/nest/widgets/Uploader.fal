/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: Uploader.fal

   AJAX widgeting subsystem -- Ajax-only upload button (not for forms)
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Mon, 04 Jun 2012 23:13:14 +0200

   -------------------------------------------------------------------
   (C) Copyright 2011: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import Widget from nest.widgets.widget as Widget
import JSP from nest.widgets.widget as JSP

/**
   Input specialized to upoload files for the Uploader widget.
*/
class UploaderInput(id) from Widget(id)
   tag = "input"
   init
      // have the name value automatically set
      self.props = ["name" => nil, "type" => "file"]

      // close self
      this = self
      self.jsMethods["onchange"] = @"function(){Nest.rw(this,'..').onFileChanged(this.value)}"
   end
end

class UploaderProto from Widget("proto")
   init
      self.jsMethods["onFileChanged"] = "
         function(fname){
            Nest.message(this, 'changed', {file:fname});
            if(this.isDirect) {
               this.sendFile();
               }
            }"
      self.jsMethods["onStart"] = "function(data){Nest.message(this, 'start', {file:Nest.rw(this,'file').value});}"
      self.jsMethods["onComplete"] = "function(jdata){Nest.message(this, 'complete', jdata );}"
      self.jsMethods["onReceived"] = "function(jdata){Nest.message(this, 'received', jdata); return false;}"
      self.jsMethods["onError"] = "function(data){Nest.message(this, 'error', data);}"
      self.jsMethods["onHardError"] = "function(data){Nest.message(this, 'hardError', data);}"
      self.jsMethods["watchUpload"] = "
            function() {
               var content = Nest.rw(this,'iframe').contentDocument.body.innerHTML;
               if( content != '' ) {
                  if( this.onReceived( content ) ) { return; }
                  try {
                     var data = JSON.parse(content);
                     if( data.error ) { this.onError( data ); }
                     else {this.onComplete(data);}
                  }
                  catch(e) {
                     this.onHardError( {'content':content, 'error':e} );
                  }
               }
               else{
                  setTimeout(\"Nest.i('\"+this.id+\"').watchUpload()\",250);
               }
            }"
   end
end

/*# Ajax and Nest enabled file uploader.
   @param id The id of the widget
   @param receiverFunc The Nest Ajax function receiving the file.
   @optparam extra Extra paramters to be statically sent to the remote function.
   @optparam isDirect true to upload as the file is changed.
   @optparam finput A non-standard file-input widget.
   
   This widget, compatible with HTML4.0, allows to upload
   files to a remote Nest server, monitoring their upload
   status and getting called back when the upload is
   complete.

   This widget is not an ajax host. It is meant to call
   a remote ajax function that is specified in @b receiverFunc.

   Multiple widgets can be placed in a page, but Nest
   serializes AJAX calls. Contemporary uploads will be
   procesed one at a time. This is actually helping optimizing
   the network bandwidth, as more uploads at the same time
   tend to be fragmented.

   As this widget is not uploading a document through a form,
   it is not suitable to be inserted in a form (not even
   an AJAX form).

@section recfunc The receiver function

   The receiver function, invoked by name, is to be found in the
   nest/ajax/ directory, and operates as any Nest Ajax functions.

   The file is available to the function only through input
   variables (Request.posts) under the name equal to the full ID
   of this widget.

   The Extra parameters that can be sent to the remote entity
   are either a string or a list/array of @a JSP instances.

   In case they are a string, they're considered pre-processed
   and passed as-is as the dictionary that the function receives
   as parametrs. If they are a list of JSP instances, they are
   parsed live by Nest and their value can be configured runtime;
   their result (a dictionary of values) will be sent in the
   dictionary parameter of the target function.

@section msg Messages

   The widget generates the following messages:
   - @b start {file:<filename>}  at start
   - @b complete {...} when it is complete; the data in the message is that
       returned by the remote AJAX function.
   - @b error {error:<id>, errorDesc:<...>, ...} on soft error. This is
      generated by Nest when the remote AJAX function raises an error.
   - @b hardError {error: <javascript exception>, content:<text>} when the
      remote web server generates a blank or error page.

   All the behaviors can be overriden setting the object javascript
   methods or invoking one of the setOn* methods

@section control Widget control

   When the widget is not direct (when it doesn't start an upload
   immedately as the load file dialog closes), its sendFile()
   method must be invoked directly or through a listener. For instance,

   @code
      upl = Uploader( "file", "Upload" )
      btnUpload = Button( "sendfile", "Send file" )
      upl.jsListeners[btnUpload] = "function(){this.sendFile();}"
   @endcode

@section styling Styling

   The load button is in a div forcefully styled as inline; it resides
   in a form, that one with forced inline as well.

   @code
   +++div+++++++++++++++++++++++++
   + ***form*********************+
   + * --<input type="file">    *+
   + ****************************+
   +++++++++++++++++++++++++++++++
   @endcode
   
*/

class Uploader( id, receiverFunc, extra, isDirect, finput ) from Widget( id )
   ajaxFunc = receiverFunc
   extra = extra
   isDirect = isDirect
   fileInput = finput == nil ? UploaderInput('file', isDirect) : finput
   
   init
      self.props = ["style" => "display:inline;"]
      self.fileInput.id = 'file' // to be sure.
      self.addChild( self.fileInput )

      this = self
      self.jsMethods["sendFile"] = {=>
            id = this.getFullID()
            if this.extra
               if this.extra.typeId() == StringType
                  params = this.extra
               else
                  params = @"Nest.i('$(id).params').value = JSON.stringify("+JSP.renderList(this.extra, id)+");"
               end
            else
               params = ""
            end
            
            return @"
               function() {
                  this.onStart();
                  Nest.i('$(id).iframe').contentDocument.body.innerHTML = '';
                  $params
                  Nest.i('$(id).form').submit();
                  this.watchUpload();
               }"
         }

      // a function to be overridden.
      self.setPrototype( UploaderProto )

      // TODO: Remove this when we have automatic parentship
      self.addClassInParentship( Uploader )
   end

   function onRender()
      self.jsMethods["isDirect"] = self.isDirect ? "true" : "false"
   end
   
   /**
      @brief Changes the name of this widget.
      @param fname The new name of the file button in the form fields.
      @return self to allow call chains.
   */
   function setName( fname )
      self.fileInput.props["name"] = fname
      return self
   end

   /**
      @brief Changes the start behavior.
      @param jsFunc the new method
      @return self to allow call chains.

      If not set, this widget generates a "start" message.
      @see msg
   */
   function setOnStart( jsFunc )
      self.jsMethds.props["onStart"] = jsFunc
      return self
   end
   
   /**
      @brief Changes the complete behavior.
      @param jsFunc the new method
      @return self to allow call chains.

      If not set, this widget generates a "complete" message.
      @see msg
   */
   function setOnComplete( jsFunc )
      self.jsMethds.props["onComplete"] = jsFunc
      return self
   end

   /**
      @brief Changes the error behavior.
      @param jsFunc the new method
      @return self to allow call chains.

      If not set, this widget generates a "error" message.
      @see msg
   */
   function setOnError( jsFunc )
      self.jsMethds.props["onError"] = jsFunc
      return self
   end

    /**
      @brief Changes the hard error behavior.
      @param jsFunc the new method
      @return self to allow call chains.

      If not set, this widget generates a "hardError" message.
      @see msg
   */
   function setOnHardError( jsFunc )
      self.jsMethds.props["onHardError"] = jsFunc
      return self
   end


   function renderContent()
      id = self.getFullID()
      link = Nest.ajaxLink( self.ajaxFunc )
      
      res = @"
         <iframe name=\"$(id).iframe\" id=\"$(id).iframe\" style=\"display:none\" width=0 height=0></iframe>
         <form style=\"display:inline\" id=\"$(id).form\" target=\"$(id).iframe\" action=\"$(link)\" method=\"POST\" enctype=\"multipart/form-data\" accept-charset=\"utf-8\">
         "
      res +="<input type=\"hidden\" name=\"id\" value\=" + self.getFullID() +"\"/>\n"

      if self.extra
         // the value is filled by js.
         res += @"<input id=\"$(id).params\" type=\"hidden\" name=\"params\" value\=\"\"/>\n"
      end

      infile = self.fileInput
      if infile.props["name"] == nil: infile.props["name"] = self.getFullID()
      res += infile.render()

      res += "</form>"

      return res
   end
   
end

