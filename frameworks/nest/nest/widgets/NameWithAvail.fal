/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: NameWithAvail.fal

   AJAX widgeting subsystem -- Widget with password and checkers
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Mon, 26 Sep 2011 11:55:58 +0200

   -------------------------------------------------------------------
   (C) Copyright 2011: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from nest.widgets.widget in widget
import InputText from nest.widgets.InputText as InputText
import ActiveInput from nest.widgets.ActiveInput as ActiveInput
import Image from nest.widgets.Image as Image


class ImgAvail( id, name_wid ) from Image( id, "", true )
   avail_img = Nest.resLink("name_avail.png")
   na_img = Nest.resLink("name_na.png")
   short_img = Nest.resLink("name_short.png")
   loading_img = Nest.resLink("name_loading.gif")

   name_wid = name_wid

   init
      // TODO: Remove this when we have automatic parentship
      self.addClassInParentship( ImgAvail )
   end

   function onRender()
      self.addStyle( "vertical-align:middle" )

      // initially, the image is that of too short.
      if self.short_img
         self.props["src"] = self.short_img
      else
         self.props["src"] = ""
         self.addStyle( "display:none" )
      end

      // Create a property that stores the minimum size
      self.jsMethods = [
            "minsize" => "" + self.parent.parent.minSize + ";",
            "setAvailable" => @"
               function( obj ) {
                  if( obj.avail ) { this.src=\"$(self.avail_img)\"; }
                  else { this.src=\"$(self.na_img)\"; }
               }"
            ]

      if self.short_img
         self.jsListeners = [
            self.name_wid => @"
               function( wid, msg, value ) {
               if( value.length < this.minsize ) {
                  this.src = \"$(self.short_img)\";
               }
               else {
                  this.src = \"$(self.loading_img)\";
               }
            }"
         ]
      else
         self.jsListeners = [
            self.name_wid => @"
               function( wid, msg, value ) {
               if( value.length > this.minsize ) {
                  this.src = \"$(self.loading_img)\";
                  this.style.display=\"\";
               }
               else {
                  this.style.display=\"none\";
               }
            }"
         ]
      end
   end

end


class TextAvail( id, name_wid ) from widget.Widget( id )
   tag="span"

   avail_prompt = "Name available"
   na_prompt = "Name NOT available"
   short_prompt = "Name too short"
   working_prompt = "Checking..."
   first_prompt = ""
   name_wid = name_wid

   init
      // TODO: Remove this when we have automatic parentship
      self.addClassInParentship( TextAvail )
   end

   function onRender()

      short_prompt = htmlEscape(self.short_prompt)
      working_prompt = htmlEscape(self.working_prompt)
      avail_prompt = htmlEscape(self.avail_prompt)
      na_prompt = htmlEscape(self.na_prompt)
      if not self.first_prompt and self.short_prompt
         self.first_prompt = self.short_prompt
      end
      
      // Create a property that stores the minimum size
      self.jsMethods = [
         "minsize" => "" + self.parent.parent.minSize + ";",
         "setAvailable" => @"
               function(obj){
                  if( obj.avail ) { this.innerHTML=\"$(avail_prompt)\"; }
                  else { this.innerHTML=\"$(na_prompt)\"; }
               }"
               ]

      if self.short_prompt
         self.jsListeners = [
            self.name_wid => @"
               function( wid, msg, value ) {
               if( value.length < this.minsize ) {
                  this.innerHTML = \"$(short_prompt)\";
               }
               else {
                  this.innerHTML = \"$(working_prompt)\";
               }
            }"
         ]
      else
         self.jsListeners = [
            self.name_wid => @"
               function( wid, msg, value ) {
               if( value.length > this.minsize ) {
                  this.innerHTML = \"$(working_prompt)\";
               }
               else {
                  this.innerHTML = \"\";
               }
            }"
         ]
      end
   end
   
   function renderContent()
      return self.first_prompt
   end

end


class AvailWidget( id, name_wid ) from widget.Widget( id )
   tag = "span"
   name_wid = name_wid
   img_wid = ImgAvail( "status_img", name_wid )
   status_wid = TextAvail( "status_text", name_wid )

   init
      self.addChild( self.img_wid )
      self.addChild( self.status_wid )

      // TODO: Remove this when we have automatic parentship
      self.addClassInParentship( AvailWidget )
   end

   function renderContent( framing )
      return self.img_wid.render() + "&nbsp;" + self.status_wid.render()
   end

end

// 

/*# Class checking for a name to be available.
*/
class NameWithAvail( id, prompt ) from InputText( id, prompt )
   tag = nil
   isAJAXHost = true
   initInfos = [prompt]

   minSize = 6

   name_wid = ActiveInput( "name", prompt )
   avail_wid = AvailWidget( "avail", self.name_wid )
   name_checked = widget.Widget( "name_checked" )

   init
      self.name_checked.tag = "input"
      self.name_checked.props = ["type" => "hidden"]
      self.name_wid.typeTimeout = 250
      self.name_wid.checkAjax = true
      self.name_wid.jsMethods = ["min_size" => self.minSize]

      self.addChild( self.name_wid )
      self.addChild( self.avail_wid )
      self.addChild( self.name_checked )
      
      self.name_wid.ajaxFilter = "this.min_size > this.value.length"

      // TODO: Remove this when we have automatic parentship
      self.addClassInParentship( NameWithAvail ) 
   end

   //#default rendering, not very complex.
   function renderLabel()
      return self.name_wid.renderLabel()
   end

   function renderInfo()
      return self.avail_wid.renderCore()
   end

   function renderContent()
      return self.name_checked.render() + self.name_wid.renderCore()
   end

   function setValue( val )
      self.name_wid.props['value'] = val
   end

   function onSetup()
      self.name_wid.props["name"] = self.getFullID()
      
   end


   function AJAX( params )
      name = params["infos"]["value"]

      swid = self.avail_wid.status_wid
      iwid = self.avail_wid.img_wid
      if self.checkAvail( name )
         return [
            swid.msgInvoke( "setAvailable", ["avail"=>true] ),
            iwid.msgInvoke( "setAvailable", ["avail"=>true] ),
            self.name_checked.msgSetProperty( "value", "checked" ) ]
      else
         return [
            swid.msgInvoke( "setAvailable", ["avail"=>false] ),
            iwid.msgInvoke( "setAvailable", ["avail"=>false] ),
            self.name_checked.msgSetProperty( "value", "" ) ]
      end
   end


   /*# Overridable Method checking for availability of a name.
      @param name The name to be checked
      @return true if the name is available, false otherwise.
   */
   function checkAvail( name )
      return true
   end

   function getValue()
      return self.name_wid.getValue()
   end

   function setAlertText( text )
      self.avail_wid.status_wid.first_prompt = text
   end
end

