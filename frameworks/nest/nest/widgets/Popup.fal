/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: Popup.fal

   AJAX widgeting subsystem -- Base class for popup widgets
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Thu, 12 Apr 2012 22:53:31 +0200

   -------------------------------------------------------------------
   (C) Copyright 2012: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from nest.widgets.widget in widget

/*# Generic popup widget.
   @param id The widget ID

   This is the base class for widgets that have the capability to be
   popped up.

   As they are meant to be absolutely placed on the page, they
   are represented as 'div' entities.

@section jscript Interface to Javascript

   The widget offers the following JS methods and properties:
   - show(): makes the widget visible.
   - hide(): hides the widget.
   - onShow(): callback invoked when show() is called; if it returns false,
      the widget is not shown.
   - onHide(): callback invoked when hide() is called; if it returns false,
      the widget is not hidden.
   - fadeInTime: if > 0, the widget fades in when show() is called.
   - fadeOutTime: if > 0, the widget fades out when hide() is called.
   - shown: false if currently hidden, true if currently visible.
   
   They offer an onShow and onHide callback pair that can be used to
   prevent the action to be actually performed if they return false.

@section messages Messages
   When the window changes its visibility, a 'visibility' Nest message is
   generated, with an object {visible: <bool>} as parameter. The message
   is generated after transitions (fade-in, fade-out) are completed
*/
class Popup( id, left, top, width, height, fixed, center ) from widget.Widget( id )

   top = top
   left = left
   width = width
   height = height

   center = center
   fixed = fixed
   fadeInTime = 0
   fadeOutTime = 0
   
   jsMethods = [
      "fadeInTime" => "0",
      "fadeOutTime" => "0",
      "shown" => "false",
      "show" => "
         function() {
            if( ! this.shown && this.onShow() ) {
               if ( this.relativeTo != null ) {
                  this.style.position='absolute';
                  Nest.reposition( Nest.i(this.relativeTo), this, this.left, this.top, this.heigth );
               }
               this.shown = true;
               this.showTransition();
            }
         }",
         
      "hide" => "
         function() {
            if( this.shown && this.onHide() ) {
               this.shown = false;
               this.showTransition();
            }
         }",
      "switchShow" => "
         function() {
            if( this.shown )
               this.hide();
            else
               this.show();
         }
      ",

      "onShow" => "function(){ return true; }",
      "onHide" => "function(){ return true; }",
      "showTransition" => "
         function() {
            var self = this;
            if( this.shown ) {
               this.style.display = '';
               if( this.fadeInTime > 0 )
               {                  
                  Nest.transite( this, this.fadeInTime, {'opacity':1}, {'opacity':0}, null, function(){self.endTransition();} );
               }
               else {
                  this.endTransition();
               }
            }
            else {
               if( this.fadeOutTime > 0 )
               {
                  Nest.transite(this, this.fadeOutTime, {'opacity':0}, {'opacity':1}, null, function(){self.endTransition();} );
               }
               else {
                  this.endTransition();
               }
            }
         }",
      
      "endTransition" => "
         function() {
            if( ! this.shown ) {
               this.style.display = 'none';
            }
            Nest.message( this, 'visibility', {visible: this.shown} );
         }"
   ]
      
   init
      if self.props == nil: self.props = [=>]
      self.props["style"] = @"display: none; overflow:hidden;"
      // activate effects
      Nest.requireJS("fx")

      // TODO: Remove this when we have automatic parentship
      self.addClassInParentship( Popup )
   end

   function setRelativeTo( widgetID )
      self.jsMethods["left"] = self.left
      self.jsMethods["top"] = self.top
      self.jsMethods["width"] = self.width
      self.jsMethods["height"] = self.height
      self.jsMethods["relativeTo"] = @'"$widgetID"'
   end
   
   function onRender()
      if self.fadeInTime
         self.jsMethods["fadeInTime"] = self.fadeInTime
      end
      if self.fadeOutTime
         self.jsMethods["fadeOutTime"] = self.fadeOutTime
      end
         
      if self.center
         marginleft = - (self.width/2)
         margintop = - (self.height/2)
         self.addStyle( @"
            width: $(self.width)px;
            height: $(self.height)px;
            top: 50%;
            left: 50%;
            margin-left: $(marginleft)px;
            margin-top: $(margintop)px;
         " )
      else
         self.addStyle( @"top:$(self.top)px; left:$(self.left)px; width:$(self.width)px; height:$(self.height)px;" )
      end

      if self.fixed
         self.addStyle( "position: fixed" )
      else
         self.addStyle( "position: absolute" )
      end
   end
end
