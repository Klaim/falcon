/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: Uploader.fal

   Service managing upload of files to special locations.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Fri, 20 Aug 2010 21:38:16 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import Service from nest as Service
import ServiceVar from nest as ServiceVar
import from nest.bindings in b
import NestError from nest as NestError

/*# Service for browsing and uploading of remote files.

*/
class Uploader( instance ) from Service( instance )
   //# Uploaded file (or file array).
   upld = ServiceVar( b.InputVarBinder )
   //# Current location (category), and upload target
   loc = ServiceVar( b.InputVarBinder )
   //# Selected files
   sel = ServiceVar( b.InputVarBinder )
   //# If true, files in del will be removed
   cnf = ServiceVar( b.InputVarBinder )
   //# What to do with files in sel: 'del' or 'mv' (delete or move)
   do = ServiceVar( b.InputVarBinder )
   //# Target location of move commands
   tg = ServiceVar( b.InputVarBinder )

   //# Root relative or absolute location of the file
   upload_dir = ServiceVar( b.ConfigBinder )
   //# Actions that can be performed on single files
   actions = ServiceVar( b.ConfigBinder )

   //# What has been done (an array of strings or a single string)
   performed = ServiceVar( )
   //# A list of files that are in current location.
   files = ServiceVar()
   //# Locations where a file may be moved.
   tglocs = ServiceVar()

   //# Subdirectories in the current location.
   sections = ServiceVar( )
   //# Current path, in paris of position/link to go there.
   path = ServiceVar()

   function startup()
      targetDir = self.upload_dir.value
      
      if fileType( targetDir ) != FileStat.DIR
         try
            dirMake( targetDir )
            fileChmod( targetDir, 0755 )
         catch IoError
            if not Path(targetDir).fulloc.startsWith("/")
               targetDir = dirCurrent() + targetDir
            end
            raise NestError( NestError.other, i"Cannot create or enter target directory", targetDir )
         end
      end
   end
   
   function run()
      if not self.checkAllowed(): return
      
      dirname = self.upload_dir.value
      if not dirname: dirname = "."
      if not self.loc.value: self.loc.value = "."
      loc = self.loc.value
      
      // has someone asked for an upload ?
      if ( upload = self.upld.value )
         if upload.typeId() == ArrayType
            for u in upload: self._processUpload(  dirname + "/" + loc, u )
         else
            self._processUpload( dirname + "/" + loc , upload )
         end

      // a new section?
      elif self.do.value == 'new'
         if self._makeSection( dirname, loc, self.tg.value )
            // enter it immediately
            self.loc.value = loc = loc + "/" + self.tg.value
         end
      
      // someone asked deletion?
      elif self.do.value == 'del'
         if self.cnf.value
            self._deleteFiles( dirname + "/" + loc, self.sel.value )
         end
         // otherwise, the skin should propose delete confirmation separately.

       // someone asked current directory deletion?
      elif self.do.value == 'deldir'
         if self._deleteSection( dirname, loc )
            locPaths = loc.split("/")
            if locPaths.len() == 1
               self.loc.value = loc = "."
            else
               self.loc.value = loc = "/".merge(locPaths[0:-1])
            end
         end
            
      // or for file move?
      elif self.do.value == 'mv'
         // when do action is 'mv'
         if self.cnf.value
            self._moveFiles( dirname + "/" + loc, self.sel.value, dirname + "/" + self.tg.value )
         end
         // otherwise, the skin should propose move confirmation separately.
         
      end

      // fill the files in our current location
      self._readDirList( dirname + "/" + loc )

      // and fill the target locations for move commands
      self.tglocs.value = ["/"]
      self._makeTgLocs(dirname, "" )

      // calculate path
      self._makePath( loc )
   end
   
   //==========================================================================
   // private utilities.
   //

   function _processUpload( dirname, upload )
      if Nest.log_level >= 3: Nest.logd( "Received upload: " + upload.describe() )

      // prevent stupid tricks
      filename = upload.filename
      if "../" in filename
         self.performed.value = @ i"Detected jailbreak attemp \"$(filename)\"..."
         return
      end

      Nest.logi( @ i"Storing uploaded file \"$(filename)\" in $(dirname)..." )

      try
         target = dirname + "/" + filename
         upload.store( target )
         fileChmod( target, 0644 )
         self.performed.value = @ i"File \"$(filename)\" correctly uploaded."
      catch IoError in e
         edesc = e.heading()
         self.performed.value = @ i"Error while recording the file \"$(filename)\": $(edesc)"
      end
   end

   function _deleteFiles( loc, filelist )
      action = []
      for f in filelist
         try
        
            fileRemove( loc + "/" + f )
            action += @ i"Removed file \"$(f)\""
         catch IoError in e
            syse = e.getSysErrorDesc()
            action += @ i"Filed to remove file \"$(f)\" (sys error:$(syse))"
         end
      end

      self.performed.value = action
   end


   function _moveFiles( srcdir, filelist, destdir )
      if "../" in destdir
         self.performed.value = @ i"Detected jailbreak attemp \"$(destdir)\"..."
         return
      end
      
      action = []

      for f in filelist
         try
            fileMove( srcdir + "/" + f, destdir + "/" + f )
            action += @ i"Moved file \"$(f)\""
         catch IoError in e
            syse = e.getSysErrorDesc()
            action += @ i"Filed to move file \"$(f)\" (sys error: $(syse))"
         end
      end
      
      self.performed.value = action
   end

    
   function _readDirList( loc )
      Nest.logd( "Reading files from " + loc )
      self.sections.value = []
      try
         d = Directory( loc )
         dc = []
         while ( entry = d.read() )
            file = loc + "/" + entry
            if (ft = fileType( file )) == FileStat.NORMAL
               if Nest.log_level >= 3: Nest.logd( "Reading entry " + loc + "/" + entry )
               dc += entry
            elif ft == FileStat.DIR and not entry.startsWith(".")
               self.sections.value += entry
            end
         end
         d.close()
         dc.sort()
         self.files.value = dc

      catch IoError in e
         syse = e.getSysErrorDesc()
         self.performed.value = @i"Can't load contents in current directory: $(syse)"
      end
   end


   function _makeTgLocs( dir, loc )
      dl =  dir + (loc ? "/" + loc : "")
      Nest.logd( "Making target locations in " + dl )
      
      try
         d = Directory(dl)
         while ( entry = d.read() )
            if not entry.startsWith( "." ) and fileType( dl + "/"+entry ) == FileStat.DIR
               loc_entry = loc ? loc + "/" + entry : entry
               self.tglocs.value += loc_entry
               self._makeTgLocs( dir, loc_entry )            
            end
         end
         d.close()

      catch IoError in e
         Nest.logw( "Can't read location " + dl )
      end
   end


   function _deleteSection( dirname, loc )
       if "../" in loc
         self.performed.value = @ i"Detected jailbreak attemp \"$(tg)\"..."
         return false
       elif loc == "." or not loc
         self.performed.value = @ i"Can't delete the root directory"
         return false
      end

      try
         dirRemove( dirname +"/" + loc )
         Nest.logi( "Deleted section " + loc )
         self.performed.value = "Deleted section " + loc
         return true
      catch IoError in e
         syse = e.getSysErrorDesc()
         self.performed.value = @i"Can't delete the section $(loc): $(syse)"
         return false
      end
   end


   function _makeSection( dirname, loc, tg )
       if "../" in tg
         self.performed.value = @ i"Detected jailbreak attemp \"$(tg)\"..."
         return false
       elif tg.startsWith( "." )
         self.performed.value = @ i"Invalid section name \"$(tg)\"..."
         return false
      end
      
      tgt = dirname + "/" + loc + "/" + tg
      Nest.logd( "Trying to create directory " + tgt )
      
      try
         dirMake( tgt )
         fileChmod( tgt, 0755 )
         Nest.logi( "Created section " + loc + "/" + tg )
         self.performed.value = "Created section " + tg
         return true
      catch IoError in e
         syse = e.getSysErrorDesc()
         self.performed.value = @i"Can't create the section $(tg): $(syse)"
         return false
      end
   end


   function _makePath( loc )
      if not loc or loc == ".": return

      if not loc.startsWith( "./" )
         loc = "./" + loc
      end
      
      locations = loc.split("/")
      gets = Request.gets
      gets["loc"]="."
      uri = Nest.pageLink( nil, gets )
      pairs = [ [i"Root", uri] ]

      if locations.len() > 1
         for pos in locations[1:-1]
            gets["loc"] += "/"+pos
            uri = Nest.pageLink( nil, gets )
            pairs.add( [pos, uri] )
         end
      end
      pairs.add( [locations[-1], nil] )
      self.path.value = pairs
   end
   
end
