/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: readdir/main.fal

   Service used to show directory entries.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sun, 27 Jun 2010 14:01:38 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from nest
import from nest.bindings in b


/*# Service receiving the variables in a form.

   This service is a useful shortcut and organizer for form checking code.

   It must be instantiated with a non-null intance. When instantiated, it moves
   all the variables named "<instance>.xxx" in self.formVars. Then, it launches
   the relative filters, which may alter them by returning a non-nil value
   (will be transformed to a string).
   
   For meta-information about the form processing, the filters may use the "formResult"
   hook.
*/
class Form( instance, options ) from nest.Service( instance, options )
   formFilters = nest.ServiceVar( "Functions accepting and checking the variables in the form.", b.ConfigBinder )
   check = nest.ServiceVar(
         "Global check on the form; a function called as check( self, vars). Return goes in formResult.",
         b.ConfigBinder )

   action = nest.ServiceVar( "Action for the form submit", b.ConfigBinder )
   formData = nest.ServiceVar( "Data to be displayed in the form.", b.ConfigBinder )
   formActions = nest.ServiceVar( "Things to do below the form. It's a list of input field (buttons/submits)", b.ConfigBinder )
   formId = nest.ServiceVar( "DOM ID of the form", b.ConfigBinder )
   formClass = nest.ServiceVar( "CSS Class of the form", b.ConfigBinder )
   enctype = nest.ServiceVar( "Encoding type; set multipart/form-data for multipart forms", b.ConfigBinder )
   
   formVars = nest.ServiceVar( "Variables in the form as posted by the users" )
   formResults = nest.ServiceVar( "Results that the final user may be interested in.")

   function startUp()
      if not self.instance
         raise nest.NestError( nest.NestError.other, "Service \"FormChecker\" must be given an instance name" )
      end
   end

   function run()
      Nest.logi( "Entering the " + self.fullName() + " service" )

      // check actions
      if self.action.value == nil
         self.action.value = Nest.pageLink()
      end
      
      // extract the variables
      formVars = [=>]
      for k, v in Nest.inputVars
         if k.startsWith( self.instance + "." )
            if Nest.log_level >= 3: Nest.logd( @"Adding form variable \"$k\"=\"$v\"" )
            formVars[ k[self.instance.len()+1:] ] = v
         end
      end

      // something to do?
      if formVars
         self.formVars.value = formVars
         for funcName, func in self.formFilters.value
            if funcName in formVars
               if Nest.log_level >= 3: Nest.logd( @"Calling form filter for \"$funcName\"" )
               res = func( self, funcName, formVars[funcName] )
               if Nest.log_level >= 3: Nest.logd( @"Result for filter \"$funcName\": $res" )
               if res: formVars[funcName] = res
            end
         end

         check = self.check.value
         if check.isCallable()
            check = check.base()
            Nest.logi( "Calling overall form check function" )
            res = check( self, bless(formVars) )
            if Nest.log_level >= 3: Nest.logd( @"Overall check function result: $res" )
            self.formResults.value = res
         end
      end
         
   end

   function __get_results()
      if self.formVars.isSet
         return self.formResults.value
      end
   end

    function __get_vars()
      return self.formVars.value
   end

   /*# Creates a field given a definition */
   function makeField( field )
      fvals = self.formVars.value
      value = field.name in fvals ? fvals[field.name] : ""
      
      return field.render( self.instance, value )
   end
end


class Field( name, desc, type, extra, opts, defValue )
   name = name
   desc = desc
   type = type
   extra = extra ? extra : ""
   opts = opts
   dvalue = defValue

   function render( instance, value )
      fname = instance + "." + self.name
      res = ""
      
      if self.desc
         desc = htmlEscape(self.desc)
         res += @'
            <label id="label_$(self.name)" for="$(self.name)">$(desc)</label>
            '
      end

      if not value and self.dvalue: value = strEscape( self.dvalue.toString() )
      
      // select is treated specially.
      if self.type == "select"
         res += @'<select name="$(fname)" id="$(self.name)" $(self.extra)>'
         
         for opt in self.opts
            res += "\n" + opt.render( value )
         end

         res += "\n</select>\n"
      else
         // otherwise, things are simpler.
         if self.type == "password"
            value = ""
         else
            value = strEscape( value )
         end
         
         res += @'
            <input type="$(self.type)" name="$(fname)" id="$(self.name)" value="$(value)" $(self.extra)/>
         '
      end
      
      return res
   end
   
end


class MultiField( name, desc, fields )
   name = name
   desc = desc
   fields = fields

   function render( instance, value )
      res = ""
      
      if self.desc
         desc = htmlEscape(self.desc)
         res += @'
            <label id="label_$(self.name)" for="$(self.name)">$(desc)</label>
            '
      end

      for field in self.fields
         res += field.render( instance, value )
      end

      return res
   end
end


class Option( value, desc )
   value = value
   desc = desc

   function render( val )
      esc_val = self.value.escape()
      desc = htmlEscape( self.desc )
      sel = val == self.value ? ' selected="yes"' : ""
      
      return @ "<option value=\"$(esc_val)\"$(sel)>$(desc)</option>\n"
   end
   
end


class Submit( value, name, cls, extra ) from Button( "submit", value, name, cls, extra )
end

class Button( type, value, name, cls, extra )
   type = type
   name = strEscape( name )
   value = strEscape( value )
   cls = strEscape( cls )
   extra = extra ? extra : ""

   function render( instance )
      fname = instance ? instance +"." + self.name : self.name
      return @'
            <input type="$(self.type)" name="$(fname)" id="$(self.name)" value="$(self.value)" class="$(self.cls)" $(self.extra)/>'
   end
end
