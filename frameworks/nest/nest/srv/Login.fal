/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: login/main.fal

   Service used to manage user logins.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Fri, 02 Jul 2010 18:39:59 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import Service from nest as Service
import ServiceVar from nest as ServiceVar
import NestError from nest as NestError
import from nest.bindings in b

class Login( instance ) from Service( instance )

   handler = ServiceVar( "Page where the login service checks for authentication", b.ConfigBinder )

   uid = ServiceVar( "The user-id as inputed by the remote user", b.InputVarBinder )
   pwd = ServiceVar( "The password as inputed by the remote user", b.InputVarBinder )
   logout = ServiceVar( "If not nil, this is a logout request.", b.InputVarBinder )

   logmode = ServiceVar( "Used to help skins and listeners to detect what happened (in, out, ok, fail)" )

   auth_user = Nest.ambient( "auth_user", "Authenticated user", b.SessionBinder )
   auth_level = Nest.ambient( "auth_level", "Authenticated user level -- as a Nest.AL level", b.SessionBinder )
   auth_data = Nest.ambient( "auth_data", "Arbitrary free data that can be associated to an authenticated user", b.SessionBinder )

   /*# Configurable callback to check for login requests.

      Will be called by this service on login requests.
      
      It should return nil if the user is unauthorized,
      or a pair auth_level/auth_data on success.

      The auth_user will be set after the input uid.
   */
   checker = nil
   
   function startup()
      // ensure that nothing can go before we're bound
      // remember that binding (data from session) comes after startup()
      // so here we can set defaults
      self.auth_level.value = nil

      // And the default for the handler is this same page.
      self.handler.value = Nest.pageLink()  // self link
   end
   
   function run()
      // Are we bound from session?
      if self.auth_user.value != nil
         Nest.logd( "User authenticated from session as " + self.auth_user.value + "(" + self.auth_level.value + ")" )

         // asking for a logout?
         if self.logout.value
            Nest.logi( "User \"" + self.auth_user.value + "\" performed logout." )
            // kill the session data
            self.auth_user.value = nil
            self.auth_level.value = Nest.AL.NONE
            self.auth_data.value = nil
            self.logmode.value = "out"
         end

         self.logmode.value = "ok"
         return
      end

      if not self.checker.isCallable()
         Nest.logw( "Login service has no checker configured." )
         return
      end

      // asking for a login?
      if self.uid.isSet
         self.checkLogin( self.uid.value, self.pwd.value )
      end
   end

   function checkLogin( uid, pwd )
      Nest.logd( "Checking login for " + uid + ":" + pwd )
      
      res = self.checker( uid, pwd )
      if res
         try
            al, ad = res
         catch
            raise NestError( NestError.other, i"Invalid Login checker callback return value", res.describe() )
         end

         Nest.logi( "User \"" + uid + "\" performed login(" + al + ") with data " + ad.describe() )
         self.auth_user.value = uid
         self.auth_level.value = al
         self.auth_data.value = al
         self.logmode.value = "in"
      else
         Nest.logd( "User \"" + uid + "\" failed login." )
         self.logmode.value = "fail"
      end
   end
end
