/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: _skel/main.fal

   Skeleton carbon-copy service
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Mon, 05 Jul 2010 11:17:02 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import Service from nest as Service
import ServiceVar from nest as ServiceVar
import from nest.bindings in b
import NestError from nest as NestError
import DBEntity from nest.dbentity as DBEntity

import DBIError from dbi

/*# Service used to modify database records. */
class DataControl( instance ) from Service( instance )

   // Create here the service variables, like
   cmd = ServiceVar( "The action that must be performed on the data", b.InputVarBinder )
   eid = ServiceVar( "Entity ID being modified", b.InputVarBinder )
   result = ServiceVar( "Count of affected rows, used for action effect rendering" )
   dberror = ServiceVar( "Error returned by the DB when trying to perform the operation" )

   /*# The entity must be specified directly. */
   entity = ServiceVar( "Entity instance or name in format \"db.entity\"", b.ConfigBinder )

   //# cached entity, used internally
   centity = nil
   
   function startup()
      if not self.checkAllowed(): return
      
      entity = self.entity.value
      if entity.derivedFrom( DBEntity )
         self.centity = entity
      elif entity.typeId() == StringType
         try
            dm_name, ename = entity.split(".",2)
         catch
            raise NestError( NestError.other, i"Entity name not in format \"dm_name.entity\"", entity )
         end

         self.centity = Nest.dm( dm_name ).entity( ename )
      else
         raise NestError( NestError.other, i"Entity not specified in DataControl config" )
      end
   end
   
   function run()
      if not self.checkAllowed(): return

      if not self.cmd.isSet
         Nest.logd( "Data Action: no action" )
         return
      end
      
      action = self.cmd.value
      entity = self.centity
      eid = self.eid.value
      Nest.logi( @"DataAction: $action $entity:$eid" )
      
      try
         switch action
            case "del"
               if eid.typeId() == StringType
                  self.result.value = entity.delete( eid )
               else
                  for key in eid: entity.delete( key )
               end
               self.result.value = true

            case "add"
               d = self.makeData()

               if d
                  if Nest.log_level >= 3: Nest.logd( @"Adding data:" + d.describe() )
                  self.result.value = entity.insert( d )  // on failure, add rasies
               else
                  self.dberror.value = i"No field to be added"
               end
               
            case "upd"
               d = self.makeData()
               if d
                  if Nest.log_level >= 3: Nest.logd( @"Modifying data:" + d.describe() )
                  entity.update( eid, d )
                  self.result.value = true
               else
                  self.dberror.value = i"No field to be modified"
               end
         end
      catch dbi.DBIError in dbierr
         // let the renderer take care of this
         self.dberror.value = dbierr.heading()
      end

   end

   function makeData()
      dbe = self.centity

      d = [=>]
      for field in dbe.fields
         fname = self.instance ? self.instance + "." + field : field
         value = Request.getField( fname, nil )
         if Nest.log_level >=3: Nest.logd( "Composing field: " + fname + "=" + value )
         if value: d[field] = value
      end

      return d
   end
end
