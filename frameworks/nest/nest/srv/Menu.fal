/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: Menu.fal

   Service for managing menus
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Wed, 15 Sep 2010 18:56:26 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import Service from nest as Service
import ServiceVar from nest as ServiceVar
import NestError from nest as NestError
import from nest.bindings in b

/*# Entity representing a menu item.
   @param text The text of the menu item.
   @param target The destination link.
   @optparam al Authorization level for this item to appare.
   @optparam submenu A list of MenuItems

   The @b target can be a link (possibly, a "javascript:" link) or a
   nest page PID. In the latter case, the Nest routing generator
   will create a link for the required site.

   If the @b target is nil, then the entry won't be clickable;
   this may be used both for disabled menus or to hold sub-menus.
   
*/
class MenuItem( text, target, al, submenu )
   //# text of this menu item
   text = text
   //# Target link of this menu item
   target = nil
   //# Authorization level
   auth_level = al
   
   //# Sub-menu; must be an instance of a Menu service.
   submenu = submenu

   init
      if ":" notin target
         self.target = Nest.pageLink( target )
      else
         self.target = target
      end
   end
end


/*# Menu service.
   @optparam instance An instance name for this service.

   This service is used to manage static and dynamic web site menus.

   Menus are a set of links, associated with a string to identify them, that
   can be shown or optionally hidden if the incoming user level is not
   high enough to grant him with some option.
   
   The base menu can be configured through the @a Menu.items configuration, which
   must be an array of MenuItem variables. variable.

   Other services can dynamically register new items through the the @b add_menu hook, or
   in case this service has an @b instance name, on @b add_menu.<instance>.

   Items can reference other Menu services.

   The Skin of this serivce will render the menu as a whole, while a subskin called mi_skin
   is called to render each single item.
*/
class Menu( instance ) from Service( instance )

   //# Skin for a single menu item
   mi_skin = ServiceVar( b.SkinBinder )

   //# Config: Items in the menu -- array of MenuItems
   items = ServiceVar( b.ConfigBinder )

   //# The current item, detected by the active pid by run
   current_item = ServiceVar()
   
   //#  The items that are supposed to be visible in this page
   active_items = ServiceVar()

   init
      // register to the add_menu[.instance] hook
      name = self.instance ? "add_menu." + self.instance : "add_menu"
      Nest.addHook( Nest.Hook( name, self._add_menu_hook ) )
   end

   function startup()
      // sanitize the item skin
      if not self.mi_skin.isSet
         // a default sub-skin
         self.mi_skin.value = function( item )
            if item.target
               >@'<a href="$(item.target)">$(item.text)</a>'
            else
               >@'$(item.text)'
            end
         end
      end
   end

   function run()
      if not self.allowed(): return
      Nest.logi( "Menu service run()" )

      // get the authorization level of the user
      auth_level = Nest.ambient( "auth_level" )
      
      // and set none by default
      al = auth_level.isSet ? auth_level.value : Nest.AL.NONE

      // filter out available events.
      ci = []
      for item in self.items.value
         if Nest.auth_level <= item.auth_level
            ci += item
            if Nest.pid == item.target
               self.current_item.value = item
            end
         end
      end

      self.active_items.value = ci
   end


   function _add_menu_hook( item )
      if Nest.pcheck
         if not item.derivedFrom( MenuItem )
            raise NestError( NestError.pcheck, "", none )
         end
      end

      if self.items.isSet
         self.items.value.add( item )
      else
         self.items.value = [item]
      end
   end
   
end
