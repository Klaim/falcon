/*
   FALCON - DBI Data Manager

   Nest - Falcon web applcation engine

   FILE: dbview.fal

   View specifying how a DBEntity should be seen.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sun, 31 Oct 2010 11:34:45 +0100

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import NestError from .error as NestError

/*# Field of a DBView.
   @param field The name of a field in the target entity.
   @optparam title Textual representation of the field name in this view.
   @optparam rednerer A function accepting the value of the field as input
             and returning a string representation to be displayed.
   @optparam order If given, will impose an order on the multiple returned values.
   
   This structured is used by the @a DBView class to indicate how an entitity
   should be represented.

   If the @b title parameter is not given, the field is considered as hidden,
   and not displayed.

   If the @b renderer is not given, the the field value will be placed untranslated
   in the final structure, otherwise the return value of the renderer function will
   be used.

   The @b order parameter must be one of the @a DBOrder enumeration value. To exclude
   this field from ordering clauses, just leave this parameter nil
*/
class DBViewField( field, title, rednerer, order )
   //# Name of the specified field
   name = field
   //# Optional title for visualization (set to nil to hide)
   title = title
   //# Function to transform the visualization of the field.
   rnd = rednerer
   //# Order in multi-record queries (in @a DBOrder enum)
   order = order
end

/*# Enumeration of type of conditions in the @a DBCondFilter class. */
enum DBCondType
   //# Less than
   LT = 0
   //# Greater than
   GT = 1
   //# Equal to
   EQ = 2
   //# Not equal to
   NEQ = 3
   //# Less or equal
   LE = 4
   //# Greater or equal
   GE = 5
   //# Similar to
   LIKE = 6
   //# Check if the value is null
   NULL = 7
   //# Check if the value is not null
   NOTNULL = 8
end

/*# Order for views
   @see DBViewField
*/
enum DBOrder
   //# Order values in ascending orders
   ASCENDING = 1
   //# Order values in Descending order
   DESCENDING = 2
   //# No ordering
   NONE = -1
end

/*# Structure used to apply filters on fields.

   @param ctype a @a DBCondType enumeration element.
   @optparam value The value against which to check.
   @see DBView
*/
class DBCond( ctype, value )
   ctype = ctype
   value = value

   /*# Returns a string representation of the condition.
      @return a string suitable for a SQL 'where'.
      Will create an ANSI SQL compliant 'where' condition.
   */
   function toString()
      ctype = self.ctype
      if ctype == DBCondType.LT
         c = "<"
      elif ctype == DBCondType.GT
         c = ">"
      elif ctype == DBCondType.EQ
         c = "="
      elif ctype == DBCondType.NEQ
         c = "<>"
      elif ctype == DBCondType.LE
         c = "<="
      elif ctype == DBCondType.GE
         c = ">="
      elif ctype == DBCondType.LIKE
         c = " like "
      elif ctype == DBCondType.NULL
         return  " is null"
      elif ctype == DBCondType.NOTNULL
         return " is not null"
      end

      return c + "'" + strEscape(self.value) + "'"
   end
end


/*# Creates a DB View.
   @param entity The entity on which the view acts as a filter.
   @optparam cond initial value of the table conditions.
   @optparam fields initial value of the view fields.
   
   This class represents a filter through which entities can be seen differently.
   
   If not specified in the constructor call, the @a DBView.fields and @a DBView.cond
   property can be specified at any moment.

   @note It is not necessary to specify the fields composing a primary key of an entity in
         a view, if they must not be seen; those fields are automatically added to any
         access query even if not explictly requested.
   
   @prop fields An array of @a DBViewField class entities specifying which fields
         should be retreived in this view and how to represent them.         

   @prop cond Filter conditions in a dictionary, where the left part is a field name, and the
         right part is an instance of @a DBCond class.
*/
   
class DBView( entity, fields, cond, spec )
   entity = entity

   _fields = nil
   _cond = nil

   init
      if fields: self.fields = fields
      if cond: self.cond = cond
   end
   
   function __get_fields(): return self._fields
   function __get_cond(): return self._cond
   
   function __set_fields( value )
      if Nest.pcheck
         self._checkFields( value )
      end
      
      self._fields = value
   end
   
   function __set_cond( value )
      if Nest.pcheck
         if value.typeId() != DictionaryType
            raise NestError( NestError.pcheck, nil, "D" )
         end

         entity = self.entity
         for name, check in value
            if not name in entity.fields
               raise NestError( NestError.pcheck, nil, "Field " + name + " not in entity " + self.entity.className() )
            end

            if not check.derivedFrom( DBCond )
               raise NestError( NestError.pcheck, nil, "Should be an instance of DBCond" )
            end
         end
      end
      
      self._fields = value
   end

   // Checks if a field array is correct.
   function _checkFields( value )
      if value.typeId() != ArrayType
         raise NestError( Nest.pcheck, nil, "Should be an array of DBViewField instances" )
      end

      entity = self.entity
      for field in value
         if not field.derivedFrom( DBViewField )
            raise NestError( Nest.pcheck, nil, "Should be an array of DBViewField instances" )
         end

         if not field.name in entity.fields
            raise NestError( Nest.pcheck, nil, "Field " + field.name + " not in entity " + entity.className() )
         end
      end
   end

   /*# Apply this view to retreived data.
      @param data A dictionary of key => value pairs.
      @return An array containing just the fields having a title, possibly rendered via their rndr function
   */
   function apply( data )
      dret = []
      
      for field in self._fields
         if field.title
            name = field.name
            rnd = field.rnd
            if name in data 
               dret += rnd ? rnd( data[name] ) : htmlEscape(data[name].toString())
            end
         end
      end
      
      return dret
   end

   /*# Apply this view to retreived data.
      @param data A dictionary of key => value pairs.
      @return A dictionary containing just the fields having a title, possibly rendered via their rndr function
   */
   function applyDict( data )
      dret = [=>]

      for field in self._fields
         if field.title
            name = field.name
            rnd = field.rnd
            if name in data
               dret[name] = rnd ? rnd( data[name] ) : htmlEscape(data[name].toString())
            end
         end
      end

      return dret
   end

   /*# Return the titles of the columns that should be seen in this view.
      @return array of strings representing the titles of the columns filtered by this view.
   */
   function titles()
      return [].comp( self._fields, { f => f.title ? f.title : ^+1 } )
   end
   
end
