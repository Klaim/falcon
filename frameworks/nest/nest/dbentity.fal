/*
   FALCON - DBI Database entity

   Nest - Falcon web applcation engine

   FILE: dbentity.fal

   Class abstracting an entity coming from the db.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Fri, 13 Aug 2010 12:34:08 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import NestError from .error as NestError


/*# Database entity.
   @param dbm The database manager to which this enitity is related

   This class represents a table, or anyhow an entity type in a persistent storage system.

   New site-specific entities must be placed in files under {{nest/dm/dbname}} named after
   the class they hold. For example, a "Users" entity should be placed in a class named
   "class Users", which should have its own file named {{nest/dm/dbname/Users.fal}}.

   The implementations **must** specify a @b definition property and store the entity
   definition into it.

   Each element of the @b definition property should be a string where the first word is a
   field name, and the rest is a field definition that can be applied by the
   Nest users should extend this class to describe the actual entities in their
   databases.

   Elements of the @b definition array meant to be part of the key of this field should
   must be declared as OOB (i.e. ^+ "id integer not null")

   The name under which the entity is known is defaulted to the class name, but subclasses
   may override the "name" property in their init method, if this is not desired.

   @prop definition Original definition of the database

*/
class DBEntity( dbm )
   //# Database manager to which this entity belongs.
   manager = dbm

   /*# Name of this entity as known in the database system.
      By default, the name is set to the name of the class,
      but it may be overridden by specifying the name property in
      the subclass.
   */
   name = self.className()

   //# List of fields in declaration order
   fields = []

   //# List of key fields.
   key_fields = []


   //# Definition of each field in a field => definition part dictionary
   fdefs = [=>]

   //# Extra parameters for the creation of the entity
   extra = nil

   /*# Initial data for this entity.

      Must be a dictionary of "field name" => value.

      Used by the data-manager when creating the entity to fill
      the initial values.

      Leave nil if not used.
   */
   init_data = nil


   definition = nil

   /*# Breaks a string key in a dictionary of values for the key files.
      @param kval A key expression generated by @a DBRecord.key.
      @return A dictionary of [key_fields => values] suitable to be used to
              find the record indicated by kval.
   */
   function parseKey( kval )
      kfid = 0
      kfields = [=>]
      kflen = self.key_fields.len()
      p1 = 0
      pos = kval.find( "|" )
      // keys can't be empty, and so pos can't be 0
      while pos > 0
         // too many bars?
         if kfid > kflen
            raise NestError( NestError.unpack_key, "", self.name + ": " + kval )
         end

         if kval[pos-1] != "\\"
            // a real bar separating key fields
            value = kval[p1:pos].replace( "\\|", "|").replace( "\\\\", "\\" )
            p1 = pos+1
            kfields[ self.key_fields[kfid++] ] = value
         end

         pos = kval.find( "|", pos+1 )
      end

      kfields[ self.key_fields[kfid] ] = kval[p1:].replace( "\\|", "|").replace( "\\\\", "\\" )

      // we must have found at least one expression
      if not kfields: raise NestError( NestError.unpack_key, "", self.name + ": " + kval )
      return kfields
   end

   /*# Queries a specific item in this entity.
      @param eid An entitity id (key value) identifying a record.
      @optparam view a @a DBView instance that can configure the returned data.
   */
   function find( eid, view )
      keys = self.parseKey( eid )
      return self.manager.queryItem( self, keys, view )
   end

   /*# Queries a specific item in this entity.
      @optparam view a @a DBView instance that can configure the returned data.
      @optparam start Begin retreiving at the given position.
      @optparam count Get this amount of records at maximum.
      @return An array containing at maximum count elements.
   */
   function table( view, start, count )
      return self.manager.query( self, view, start, count )
   end

   [init]
      function __enter()
         fdefs = self.definition
         for row in fdefs
            try
               fname, fd = row.split(" ", 2)
               self.fields += fname
               self.fdefs[ fname ] = fd
               if ^? row: self.key_fields += fname
            catch AccessError
               raise NestError( NestError.mf_fdef, "", row )
            end
         end

         // is "self.fields" still empty?
         if not self.fields: raise NestError( NestError.no_fields )
         if not self.key_fields: raise NestError( NestError.no_key_fields )
      end
   end

   /*# Adds a record to the database.
      @param data A dictionary of pair key=>value to be inserted.
      @return A @a DBRecord entity created with the added data.

      The returned record can be queried for its ID with
      @a DBRecord.eid() method.
   */
   function insert( data )
      self.manager.insert( self, data )
      return DBRecord( self, data )
   end

   /*# Delete a determined entity from the database.
      @param eid The Entity ID to be removed.
   */
   function delete( eid )
      dbm = self.manager
      dbm.delete( self, self.parseKey( eid ) )
   end

   /*# Update a determined entity from the database.
      @param eid The Entity ID to be removed.
   */
   function update( eid, data )
      dbm = self.manager
      dbm.update( self, self.parseKey( eid ), data )
   end

   /*# Make a blank data containing all the fields available for this entity.
      @return A blessed dictionary containing all the fields of this entity as keys, and nil values.

      Useful to make templates for updates or insertions.
   */
   function makeBlank()
      data = [=>]
      for field in self.fields
         data[field] = nil
      end
      return bless(data)
   end
   
end


/**# Class representing an instance of an entity.
   @param data The data in the record, as a dictionary of "field name" => value.
   @param dbe The entity that originated this record.
   @optparam view A view that must be used to filter this data.
*/
class DBRecord( dbe, data, view )
   //# the raw data as returned by the query
   data = bless(data)
   //# The entity where this data was taken from
   entity = dbe
   //# A view to be applied to this data.
   view = view

   /*# Returns a key expression identifying this record.
      @returns A string representing a valid key identifying this record.

      The returned string has the format of "key_val1|key_val2|...|key_valn";
      inbound "|" in keys are escaped to "\\|", so that it is possible to rebuild
      the original key values by splitting the returned value.
   */
   function eid()
      dbe = self.entity
      dt = self.data
      return "|".merge(map( { kfield =>
                  dt[kfield].toString().replace("\\", "\\\\").replace( '|', "\\|") },
                  dbe.key_fields ))
   end

   /*# Gets the key fields value identifying this record.
      @return A dictionary of [key=>value] that identifies this record.
   */
   function key_values()
      kf = self.dbentity.key_fields
      ret = [=>]
      data = self.data

      for kfield in kf
         ret[kfield] = data[kfield]
      end
   end

   /*# Delete this instance from the database. */
   function delete()
      dbm = self.dbentity.manager
      dbm.delete( self.dbentity, self.key_values() )
   end

   /*# Delete this instance from the database. */
   function update()
      dbm = self.dbentity.manager
      // removing the key fields from the data should not be strictly necessary,
      // but some db engines may be stressed by this operation otherwise
      kf = self.key_fields()
      data = self.data - kf

      dbm.update( self.dbentity, kf, data )
   end

   /*# Adds this entity to the database. */
   function insert()
      dbm = self.dbentity.manager
      dbm.insert( self.dbentity, self.data )
   end

   function applyView()
      if self.view
         return self.view.apply( self.data )
      end

      return self.data
   end

   /*# Returns a pre-rendered view of a subset of a record that can be used as a preview.

      The purpose of this method is that to extract minimal informations from a record
      so that the user can tell what that record is about.

      This method generates a string that can be directly used as an xhtml output
      to identify a record. For example, it may return the title of an entry,
      a set of the first characters from a title plus the insertion date.

      The default is that of using the @a DBView.spec_field property, which should be a list
      of DBViewField.
      The result of each entry in that process is separated by a character.

      The user may override this method in subclasses where appropriate.

      By default, if there isn't any spec_field, the first field is rendered and returned.
   */
   function specify()
      str = ""
      data = self.data
      if self.view
         for field in self.view.fields
            name = field.name
            rnd = field.rnd
            if name in data
               str += rnd ? rnd( data[name] ) : htmlEscape(data[name].toString())
            end

            formiddle: str += " "
         end
      else
         for field in self.entity.fields
            if field in data
               str += htmlEscape(data[name].toString())
            end

            formiddle: str += " "
         end
      end
      
      return str
   end

end
