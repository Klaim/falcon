/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: WikiPluginToc.fal

   Plugin for the Wiki service responding to "toc" plugins.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Tue, 31 Aug 2010 23:06:38 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from parser.genparser.node in gp
import from nest.hook

function _toc( param, node, sout, page )
   // we work only on the standout phase
   if not sout: return  ""

   // traverse the nodes and find all the headers below "node"

   // The parameter, if given, is the depth of the page.
   if param
      try
         depth = int(param)
      catch
         depth = 1
      end
   else
      depth = 1
   end

   // ok, start parsing from here.
   resNode = nil
   stack = List()

   curlev = depth
   // headers are always toplevel
   n1 = node
   while n1

      if n1.type == "header"
         // first time around?
         if not resNode
            topNode = gp.Node( "ol" )
            stack.push( topNode )
            resNode = gp.TagNode( "div", [ "class"=>"nest_wiki_toc" ] )
            resNode.add( topNode )
         end

         if n1.level >= depth
            while curlev < n1.level
               subNode = gp.Node( "ol" )
               topNode.add( subNode )
               stack.push( subNode )
               topNode = subNode
               ++curlev
            end

            while curlev > n1.level
               stack.pop()
               --curlev
            end

            // replace the current li
            topNode = stack.back()
            nli = gp.Node( "li" )
            nli.add( gp.InfoNode("link", ["name"=>n1.content, "ext"=>false, "internal"=>true, "text"=>n1.content]))
            topNode.add( nli )
         end
      end

      // climb the hierarcy
      if n1.next
         n1 = n1.next
      else
         n1 = n1.parent
      end

      // we don't need to descend, because headers are all top level.
   end

   // all worth?
   if resNode: node.change( resNode )
   return ""
end

//# Plugin for the Wiki service responding to "toc" plugins.
class WikiPluginToc from  nest.hook.Hook( "wiki_plugin_toc", _toc )
end
