/*
   FALCON - The Falcon Programming Language

   Nest - Falcon web applcation engine

   FILE: bindings.fal

   Default built-in bindings for Nest.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Wed, 04 Aug 2010 09:57:06 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

/*# Built-in configuration binder.

   This binder is used to bind service configuration values to Nest variables.

   The reason to do this convolute thing is that listeners can set themselves
   into ServiceVar instances, and in this way they can be notified of even
   configuration variables set in the service.

   Of course, a service is not REQUIRED to offer all its configuration variables
   publically in this way. It can just receive the configuration data and use
   it turing the startup or run phase.

   However, if some relevant automated variable has any utility in being published
   and universally know, this is a useful way to automatically store its value from
   the configuration of the service into it, and eventually notify listeners.
*/

import from nest.utils in utils
import NestError from nest.error as NestError

object ConfigBinder
   function bind( varname, srv, var )
      if varname in srv.configuration
         var.value = srv.configuration[varname]
      end
   end
end


object GetBinder
   function bind( varname, srv, var )
      if varname in Request.gets
         var.value = Request.gets[varname]
      end
   end
end

object PostBinder
   function bind( varname, srv, var )
      if varname in Request.posts
         var.value = Request.posts[varname]
      end
   end
end

object CookieBinder
   function bind( varname, srv, var )
      if varname in Request.cookies
         var.value = Request.cookies[varname]
      end
   end
end


object WebVarBinder
   function bind( varname, srv, var )
      if (value = Request.getField( varname, nil ) )
         var.value = value
      end
   end
end


object InputVarBinder
   function bind( varname, srv, var )
      if varname in Nest.inputVars
         var.value = Nest.inputVars[varname]
      end
   end
end

object SessionBinder
   function initVar( var )
      var.isSession = true
   end
   
   function bind( varname, srv, var )
      vn = srv.varName( varname )
      if vn in Nest.sessionData
         var.value = Nest.sessionData[vn]
      end
   end
end


object SkinBinder
   function bind( varname, srv, var )
      if varname in srv.configuration
         skinFile = srv.configuration[varname]
         if skinFile.isCallable()
            Nest.logi( "Service " + srv.fullName() + " is setting sub-skin " + varname + " to a callable in configuration." )
            var.value = srv.configuration[varname]
         else
            skin = self.getSubSkin(skinFile, srv, var)
            if skin
               Nest.logi( "Service " + srv.fullName() + " is setting sub-skin " + varname + " from file." )
               var.value = skin
            else
               raise NestError( NestError.noskin, "", skinFile )
            end
         end
      else
         // get the default-<varname>.fal skin,
         // but if the service skin file is not set,
         // don't force it.
         bset = srv.skin.isSet
         name = (bset ? srv.skin.value : "default") + "-" + varname
         Nest.logi( "Service " + srv.fullName() + " searching default sub-skin " + name + " from file." )
         skin = self.getSubSkin( name , srv, var)
         if not skin            
            if bset
               // The skin was mandatory
               raise NestError( NestError.noskin, "", skinFile )
            end
            Nest.logi( "Service " + srv.fullName() + " ignoring missing sub-skin." )
         else
            var.value = skin
         end
      end
   end


   function getSubSkin( skinFile, srv, var )
      srvName = srv.className()
      srvInst = srv.instance

      // sub-skins are named after the model
      // [instance]_varname.fal/fam/ftd
      if srvInst: skinFile = srvInst + "_" + skinFile
      
      skinPaths = [
         utils.reldir( Nest.cnf.homedir, Nest.cnf.site_srv_dir + "/" + srvName +  "/skins" ),
         Nest.cnf.nestdir +"/srv/" + srvName  + "/skins" ]

         
      if self.log_level >= 3
         self.logd( "Service " + self.fullName() + " scanning for sub-skin \"" + skinFile + "\" in " + skinPaths.describe() )
      end


      skinFile = utils.findFileInDirs( skinPaths, skinFile, ['fal','ftd','fam'] )
      if skinFile
         self.logi( "Service " + self.fullName() + " using sub-skin " + skinFile )
         include( skinFile, symDict | (sd=["skin"=>nil] ) )
         return sd["skin"]
      end
   end
end

export 
