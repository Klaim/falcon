/*
   FALCON - The Falcon Programming Language.
   FILE: parser/tokeninstance.h

   Actual token value as determined by the lexer.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Fri, 08 Apr 2011 16:44:42 +0200

   -------------------------------------------------------------------
   (C) Copyright 2011: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

#ifndef _FALCON_PARSER_TOKENINSTANCE_H
#define	_FALCON_PARSER_TOKENINSTANCE_H

#include <falcon/setup.h>

namespace Falcon {

class String;

namespace Parser {

class Token;

/** Instance of a token generated by the lexer.

 Tokens are abstract definitions of terminal or non-terminal grammar symbols
 (either literal, concrete terminal values like strings or nunmbers or higher
 level rules). TokenInstance is a class associating a token recognized by
 the lexer, or by the parser after a rule reduction, with the concurrent

 The Value class known by the token intance is just an abstract base class that
 each rule, knowing the kind of token it handles, can turn into a concrete,
 program-specific value. The only thing that the TokenInstance must know is that
 the Value can be deleted, in case the token is discarded because of a parse
 failure.

 As the value might contain data which could be recycled by the rule reduction
 process, a detachValue() method can be used to take the actual value out of
 this token, so that this token can be thrown away without the need to re-cretate
 the value, or its content, to assign it to an higher level rule.

 Notice that since the data type of a token instance is implied by the
 combination of the token and of the rules in which it is employed, this
 TokenInstance class doesn't need to track the type of value it holds. The only
 thing required is a deletor function that is used to dispose of user data in
 case the token instance is destroyed, together with its contents.

 */
class TokenInstance
{
public:
   typedef void(*deletor)(void*);

   /** Creates a new token instance.
    \param tok A static reference to the token of which this entity is an instance.
    */
   TokenInstance( const Token& tok );
   ~TokenInstance();

   /** Detach a value associated with this token instance.
      \return Previously associated value.
    After this call, the token instance is emptied, and the returned value
    is not disposed anymore.

    Notice that this call is useless if the token held a numeric value.
    */
   void* detachValue();

   /** Utility to detach a value and return it as a String* */
   String* detachString() { return (String*) detachValue(); }

   /** Sets a new value to be associated with this token instance.
    \param v A new value that will be owned by this token.
    if the token doesn't need to be associated with any value.
    \note The previous value hold by this instance, if any, is destroyed.
   */
   void setValue( bool v );

   /** Sets a new value to be associated with this token instance.
    \param v A new value that will be owned by this token.
    if the token doesn't need to be associated with any value.
    \note The previous value hold by this instance, if any, is destroyed.
   */
   void setValue( int32 v );

   /** Sets a new value to be associated with this token instance.
    \param v A new value that will be owned by this token. 
    if the token doesn't need to be associated with any value.
    \note The previous value hold by this instance, if any, is destroyed.
   */
   void setValue( uint32 v );

   /** Sets a new value to be associated with this token instance.
    \param v A new value that will be owned by this token.
    if the token doesn't need to be associated with any value.
    \note The previous value hold by this instance, if any, is destroyed.
   */
   void setValue( int64 v );

   /** Sets a new value to be associated with this token instance.
    \param v A new value that will be owned by this token.
    if the token doesn't need to be associated with any value.
    \note The previous value hold by this instance, if any, is destroyed.
   */
   void setValue( numeric v );

   /** Sets a new value to be associated with this token instance.
    \param str A string that will be copied in this token.

    This utility creates a String instance and sets it as the token value.
    \note The previous value hold by this instance, if any, is destroyed.
   */
   void setValue( const String& str );

   /** Sets an arbitrary user value to be used as value for this token.
    \param data A new value that will be owned by this token.
    \param deletor A deletor function used to destroy the given data in case it is disposed.

    if the token doesn't need to be associated with any value.
    \note The previous value hold by this instance, if any, is destroyed.
   */
   void setValue( void* data, deletor v );

   inline bool asBool() const { return m_v.v_bool; }
   inline int64 asInteger() const { return m_v.v_int; }
   inline numeric asNumeric() const { return m_v.v_double; }
   inline void* asData() const { return m_v.v_voidp; }
   inline String* asString() const { return (String*) m_v.v_voidp; }

   /** Gets the parser token associated with this instance. */
   const Token& token() const { return m_token; }

private:
   typedef union {
      bool v_bool;
      int64 v_int;
      double v_double;
      void* v_voidp;
   } Value;

   const Token& m_token;
   Value m_v;
   deletor m_deletor;

   inline void clear()
   {
      if( m_deletor != 0 )
      {
         m_deletor(m_v.v_voidp);
      }
      m_deletor = 0;
   }
};

}
}

#endif	/* _FALCON_PARSER_TOKENINSTANCE_H */

/* end of parser/tokeninstance.h */
