/*
   FALCON - The Falcon Programming Language.
   FILE: unknownsymbol.h

   Syntactic tree item definitions -- expression elements -- symbol.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sat, 16 Apr 2011 21:03:11 +0200

   -------------------------------------------------------------------
   (C) Copyright 2011: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

#ifndef FALCON_UNKNOWNSYMBOL_H
#define FALCON_UNKNOWNSYMBOL_H

#include <falcon/symbol.h>

namespace Falcon {

class PStep;

/** Unknown symbol class.

 Symbols generated by the compiler while compiling an expressions are of
 an undetermined type, until the expression is completely formed and its context
 is clear. As falcon declare the symbol by assignment, only assignment expressions
 have the "power" to declare a symbol, and it's concrete status may depend
 on the surrounding context.

 This class has support to turn itself into any other of the other symbols,
 and notify back the enclosing expression (generated via the makeExpression()
 interface) about this change.

 The symbol may also be left unknown; if so, it will evaluate to nil under
 any circumnstance.

 \note unknown symbols are represented as "/* unknown *\/ symbol"

 \note unknown symbols are \b not "extern" or undefined symbols. They are just
 symbols whose status is unknown at compile time. Undefined symbols are usually
 globals which required special handling during module link.

 */

class FALCON_DYN_CLASS UnknownSymbol: public Symbol
{
public:
   UnknownSymbol( const String& name );
   UnknownSymbol( const UnknownSymbol& other );
   virtual ~UnknownSymbol();

   virtual UnknownSymbol* clone() const { return new UnknownSymbol(*this); }

   static void apply_( const PStep* self, VMachine* vm );
   virtual Expression* makeExpression();

   /** Define this symbol using the incoming symbol.
    \param def The newly defined symbol that will take the place of this one.
    
    Once an unknown symbol has been decided, this method substitutes this
    symbol into all the expressions that are referencing it with the given
    symbol.
    
    After the call, the symbol is left dangling, and should be destroyed
    by the caller.
    */
   void define( Symbol* def );


protected:
   class Private;
   
   Private* _p;
   friend class ExprFactory;
};

}

#endif

/* end of unknownsymbol.h */
