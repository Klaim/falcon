/**
 *  \file modgtk.cpp
 */

#include "modgtk.hpp"

#include "gtk_enums.hpp"

#include "gtk_Button.hpp"
#include "gtk_Container.hpp"
#include "gtk_Main.hpp"
#include "gtk_Widget.hpp"
#include "gtk_Window.hpp"


FALCON_MODULE_DECL
{
    #define FALCON_DECLARE_MODULE self

    Falcon::Module* self = new Falcon::Module();
    self->name( "gtk" );
    self->language( "en_US" );
    self->engineVersion( FALCON_VERSION_NUM );
    self->version( VERSION_MAJOR, VERSION_MINOR, VERSION_REVISION );

    #include "modgtk_st.hpp"

    /*
     *  load enums
     */
    Falcon::Gtk::Enums::modInit( self );

    /*
     *  setup the classes
     */

    Falcon::Gtk::Main::modInit( self );

    Falcon::Gtk::Widget::modInit( self );
        Falcon::Gtk::Container::modInit( self );
            Falcon::Gtk::Button::modInit( self );
            Falcon::Gtk::Window::modInit( self );



    return self;
}


namespace Falcon {
namespace Gtk {


GObject* internal_add_slot( GObject* obj )
{
    Falcon::CoreSlot* cs = new Falcon::CoreSlot( "" );

    g_object_set_data_full( obj, "_signals", (gpointer) cs,
        &Gtk::internal_release_slot );

    return obj;
}


void internal_release_slot( gpointer cs )
{
    ((Falcon::CoreSlot*)cs)->clear();
    ((Falcon::CoreSlot*)cs)->decref();
}


FALCON_FUNC abstract_init( VMARG )
{
    MYSELF;

    if ( !self->getUserData() )
    {
        throw_gtk_error( e_abstract_class, FAL_STR( gtk_e_abstract_class_ ) );
    }
}


Falcon::CoreSlot* get_signal( GObject* obj, Falcon::CoreSlot* sl,
    const char* name, void* cb, Falcon::VMachine* vm )
{
    Falcon::CoreSlot* cs = sl->getChild( name, false );
    if ( !cs )
    {
        cs = sl->getChild( name, true );
        g_signal_connect( G_OBJECT( obj ), name,
                          G_CALLBACK( cb ), vm );
    }
    return cs;
}


/*#
    @class GtkError
    @brief Error generated by falcon-gtk
    @optparam code numeric error code
    @optparam description textual description of the error code
    @optparam extra descriptive message explaining the error conditions
    @from Error code, description, extra

    See the Error class in the core module.
*/

/*#
    @init GtkError
    @brief Initializes the falcon-gtk error
*/

FALCON_FUNC GtkError_init( VMARG )
{
    MYSELF;

    if ( !self->getUserData() )
        self->setUserData( new Falcon::Gtk::GtkError );

    Falcon::core::Error_init( vm );
}


} // Gtk
} // Falcon
