/*
   FALCON - The Falcon Programming Language.
   FILE: errorclasses.h

   All the Class handling errors generated by the engine.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sun, 31 Jul 2011 15:30:08 +0200

   -------------------------------------------------------------------
   (C) Copyright 2011: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

#undef SRC
#define SRC "engine/errorclasses.cpp"

#include <falcon/errorclasses.h>
#include <falcon/vmcontext.h>

//--- error headers ---
#include <falcon/classes/classerror.h>

#include <falcon/errors/accesserror.h>
#include <falcon/errors/accesstypeerror.h>
#include <falcon/errors/codeerror.h>
#include <falcon/errors/genericerror.h>
#include <falcon/errors/interruptederror.h>
#include <falcon/errors/ioerror.h>
#include <falcon/errors/operanderror.h>
#include <falcon/errors/unsupportederror.h>
#include <falcon/errors/syntaxerror.h>
#include <falcon/errors/encodingerror.h>
#include <falcon/errors/linkerror.h>
#include <falcon/errors/paramerror.h>
#include <falcon/errors/matherror.h>
#include <falcon/errors/unserializableerror.h>

namespace Falcon
{


void ClassAccessError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new AccessError( params ) ) );
}


void ClassAccessTypeError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new AccessTypeError( params ) ) );
}


void ClassCodeError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new CodeError( params ) ) );
}


void ClassGenericError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new GenericError( params ) ) );
}


void ClassInterruptedError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new InterruptedError( params ) ) );
}



void ClassIOError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new IOError( params ) ) );
}

void ClassLinkError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new LinkError( params ) ) );
}

void ClassOperandError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new OperandError( params ) ) );
}


void ClassUnsupportedError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new UnsupportedError( params ) ) );
}

void ClassEncodingError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new EncodingError( params ) ) );
}

void ClassSyntaxError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new SyntaxError( params ) ) );
}

   
void ClassParamError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new ParamError( params ) ) );
}

void ClassMathError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new MathError( params ) ) );
}


void ClassUnserializableError::op_create( VMContext* ctx, int32 pcount ) const
{
   static Collector* coll = Engine::instance()->collector();
   
   ErrorParam params;
   invokeParams( ctx, pcount, params );
   ctx->stackResult( pcount + 1, 
      FALCON_GC_STORE( coll, this, new UnserializableError( params ) ) );
}

}

/* end of errorclasses.cpp */
