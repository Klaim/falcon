/*
   FALCON - The Falcon Programming Language.
   FILE: list.cpp

   Implementation of the RTL List Falcon class.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: 2007-12-01

   -------------------------------------------------------------------
   (C) Copyright 2004: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

/** \file
   Implementation of the RTL List Falcon class.
*/


#include <falcon/setup.h>
#include <falcon/types.h>
#include <falcon/itemlist.h>
#include <falcon/iterator.h>
#include <falcon/vm.h>
#include "core_module.h"
#include <falcon/eng_messages.h>

namespace Falcon {
namespace core {

/*#
   @class List
   @brief Fast growable double linked list.
   @param ... An arbitrary list of parameters.

   The list class implements a double linked list of generic Falcon items that
   has some hooking with the falcon VM. Particularly, instances of the List
   class can be used as parameters for the Iterator constructor, or an iterator
   can be generated for them using first() and last() BOM methods. Also,
   instances of the List class can be used as any other sequence in for/in loops.

   For example, the following code:
   @code
   descr = List("blue", "red", "gray", "purple")

   for color in descr
   forfirst
      >> "Grues are ", color
      continue
   end
   formiddle: >> ", ", color
   forlast: > " and ", color, "."
   end
   @endcode

   prints:
   @code
   Grues are blue, red, gray and purple.
   @endcode
*/

/*#
   @init List
   @brief Creates and eventually fills the list.

   This constructor creates a list that may be initially
   filled with the items passed as parameters. The items
   are inserted in the order they are passed.
*/
FALCON_FUNC  List_init ( ::Falcon::VMachine *vm )
{
   ItemList *list = new ItemList;
   int32 pc = vm->paramCount();
   for( int32 p = 0; p < pc; p++ )
   {
      list->push_back( *vm->param(p) );
   }

   list->owner( vm->self().asObject() );
   vm->self().asObject()->setUserData( list );
}

/*#
   @method comp List
   @brief Appends elements to this list through a filter.
   @param item A sequence, a range or a callable generating items.
   @optparam filter A filtering function receiving one item at a time.
   @return This array.

   This method adds one item at a time to this list.

   If @b item is a range,
   (must not be open), all the values generated by the range will be appended,
   considering range direction and skip size.

   If @b item is a sequence (array,
   list, or any other object providing the sequence interface), all the values
   in the item will be appended to this list.

   If @b item is a callable item, it is called repeatedly to generate the sequence.
   All the items it returns will be appended, untill
   it declares being terminated by returning an oob(0). The function is called
   atomically, so it can't perform coroutine swithces or any form of wait.

   If a @b filter callable is provided, all the items that should be appended
   are first passed to to it; if the callable returns true, the item is added,
   otherwise it is discarded.
*/
FALCON_FUNC  List_comp ( ::Falcon::VMachine *vm )
{
   if ( vm->param(0) == 0 )
   {
      throw new ParamError( ErrorParam( e_inv_params, __LINE__ )
         .extra( "R|A|C|Sequence, C" ) );
   }

   // Save the parameters as the stack may change greatly.
   Sequence* list = vm->self().asObject()->getSequence();

   Item i_gen = *vm->param(0);
   Item i_check = vm->param(1) == 0 ? Item(): *vm->param(1);

   list->comprehension( vm, i_gen, i_check );
   vm->retval( vm->self() );
}

/*#
   @method push List
   @brief Appends given item to the end of the list.
   @param item The item to be pushed.
*/
FALCON_FUNC  List_push ( ::Falcon::VMachine *vm )
{
   Item *data = vm->param( 0 );

   if( data == 0 )
   {
      throw new ParamError( ErrorParam( e_inv_params, __LINE__ ).
         origin( e_orig_runtime ).
         extra("X") );
      return;
   }

   ItemList *list = static_cast<ItemList *>( vm->self().asObject()->getUserData() );
   list->push_back( *data );
}

/*#
   @method pop List
   @brief Removes the last item from the list (and returns it).
   @raise AccessError if the list is empty.
   @return The last item in the list.

   Removes the last item from the list (and returns it).
   If the list is empty, an access exception is raised.
*/
FALCON_FUNC  List_pop ( ::Falcon::VMachine *vm )
{
   ItemList *list = static_cast<ItemList *>( vm->self().asObject()->getUserData() );

   if( list->size() == 0 )  //empty() is virtual
   {
      throw new AccessError( ErrorParam( e_arracc, __LINE__ ).
         origin( e_orig_runtime ) );
      return;
   }

   vm->retval( list->back() );
   list->pop_back();
}

/*#
   @method pushFront List
   @brief Pushes an item in front of the list.
   @param item The item to be pushed.
*/
FALCON_FUNC  List_pushFront ( ::Falcon::VMachine *vm )
{
   Item *data = vm->param( 0 );

   if( data == 0 )
   {
      throw new ParamError( ErrorParam( e_inv_params, __LINE__ ).
         origin( e_orig_runtime ).
         extra("X") );
      return;
   }

   ItemList *list = static_cast<ItemList *>( vm->self().asObject()->getUserData() );
   list->push_front( *data );
}

/*#
   @method popFront List
   @brief Removes the first item from the list (and returns it).
   @raise AccessError if the list is empty.
   @return The first item in the list.

   Removes the first item from the list (and returns it).
   If the list is empty, an access exception is raised.
*/
FALCON_FUNC  List_popFront ( ::Falcon::VMachine *vm )
{
   ItemList *list = static_cast<ItemList *>( vm->self().asObject()->getUserData() );

   if( list->size() == 0 )  //empty() is virtual
   {
      throw new AccessError( ErrorParam( e_arracc, __LINE__ ).
         origin( e_orig_runtime ) );
      return;
   }

   vm->retval( list->front() );
   list->pop_front();
}

/*#
   @method front List
   @brief Returns the first item in the list.
   @raise AccessError if the list is empty.
   @return The first item in the list.

   This method overloads the BOM method @b front. If the list
   is not empty, it returns the first element.
*/
FALCON_FUNC  List_front ( ::Falcon::VMachine *vm )
{
   ItemList *list = static_cast<ItemList *>( vm->self().asObject()->getUserData() );

   if( list->size() == 0 ) // empty() is virtual
   {
      throw new AccessError( ErrorParam( e_arracc, __LINE__ ).
         origin( e_orig_runtime ) );
      return;
   }

   vm->retval( list->front() );
}

/*#
   @method back List
   @brief Returns the last item in the list.
   @raise AccessError if the list is empty.
   @return The last item in the list.

   This method overloads the BOM method @b back. If the list
   is not empty, it returns the last element.
*/
FALCON_FUNC  List_back ( ::Falcon::VMachine *vm )
{
   ItemList *list = static_cast<ItemList *>( vm->self().asObject()->getUserData() );

   if( list->size() == 0 )  // empty() is virtual
   {
      throw new AccessError( ErrorParam( e_arracc, __LINE__ ).
         origin( e_orig_runtime ) );
      return;
   }

   vm->retval( list->back() );
}

/*#
   @method first List
   @brief Returns an iterator to the first element of the list.
   @return An iterator.

   Returns an iterator to the first element of the list. If the
   list is empty, an invalid iterator will be returned, but an
   insertion on that iterator will succeed and append an item to the list.
*/
FALCON_FUNC  List_first ( ::Falcon::VMachine *vm )
{
   ItemList *list = static_cast<ItemList *>( vm->self().asObject()->getUserData() );

   Item *i_iclass = vm->findWKI( "Iterator" );
   fassert( i_iclass != 0 );

   CoreObject *iobj = i_iclass->asClass()->createInstance();
   // we need it separated to activate the FalconData bit
   iobj->setUserData( new Iterator( list ) );
   vm->retval( iobj );
}

/*#
   @method last List
   @brief Returns an iterator to the last element of the list.
   @return An iterator.

   Returns an iterator to the last element of the list. If the
   list is empty, an invalid iterator will be returned, but an
   insertion on that iterator will succeed and append an item to the list.
*/
FALCON_FUNC  List_last ( ::Falcon::VMachine *vm )
{
   ItemList *list = static_cast<ItemList *>( vm->self().asObject()->getUserData() );

   Item *i_iclass = vm->findWKI( "Iterator" );
   fassert( i_iclass != 0 );

   CoreObject *iobj = i_iclass->asClass()->createInstance();
   // we need it separated to activate the FalconData bit
   iobj->setUserData( new Iterator( list, true ) );
   vm->retval( iobj );
}

/*#
   @method len List
   @brief Returns the number of items stored in the list.
   @return Count of items in the list.
*/
FALCON_FUNC  List_len( ::Falcon::VMachine *vm )
{
   ItemList *list = static_cast<ItemList *>( vm->self().asObject()->getUserData() );
   vm->retval( (int64) list->size() );
}

/*#
   @method empty List
   @brief Checks if the list is empty or not.
   @return True if the list is empty, false if contains some elements.
*/
FALCON_FUNC  List_empty( ::Falcon::VMachine *vm )
{
   ItemList *list = static_cast<ItemList *>( vm->self().asObject()->getUserData() );
   vm->retval( list->size() == 0 ); // empty is virtual
}

/*#
   @method clear List
   @brief Removes all the items from the list.
*/
FALCON_FUNC  List_clear( ::Falcon::VMachine *vm )
{
   ItemList *list = static_cast<ItemList *>( vm->self().asObject()->getUserData() );
   list->clear();
}

}
}

/* end of list.cpp */
