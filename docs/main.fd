/*#
@main The Falcon Core Function Reference

Falcon provides an ever growing set of modules which interacts with the host system.
Also, there are many function meant to operate on the standard types, or to interact
with the Virtual Machine itself.

@section core_module The core module

   The core module interacts with the virtual machine, to the point that, at times,
   the virtual machine itself refers to it. In example, while the exceptions can be of
   any types, the exceptions internally generated by the machine are instance of the
   Error class, which is part of the core module.

   However, the core module is not automatically linked in the VM. Every embedding
   application must create an instance of the core module, and then link it to the
   VM it uses; this allow to override also the functions that are in this module to,
   in example, trace their calls or change their behavior.

   Scripts lanuced from the falcon command line tools are granted to have access to the
   core module contents as they are described in this manual.

   Some of the functions that are provided in the core module, as printl, are a common
   hook for embedders. In the case of printl, which provides a common and comfortable
   simple output for scripts, embedders usually redirect it to their own functions to
   intercept script output request and redirect them. In some cases, embedders may
   may find useful to disable some functionalities, i.e. removing file/directory functions.

   The core module also provides many functions that duplicate operator functionalities.
   Array partitioning and string concatenations are some example. Those duplicate
   functions are meant both because they are usually more flexible than the pre-defined
   operators and because it is then possible to pass those functions as function parameters,
   or to save those functions in variables; of course, operators cannot be used that way.

   However, operators are faster than function calls, so, when possible, use the
   operators rather than the functions. Functions duplicating operators are mean to be
   used when operators cannot possibly be employed, or when the limited functionalities
   of the operators are not enough.

*/

/*#
@page interrupt_protocol Falcon Virtual Machine Preemptibility

Falcon Virtual Machine supports bidirectional communication
with the embedding applications and with extension modules that
allows external code to ask for the VM to suspend or terminate
its execution, and allows the VM to request for the embedding
application to perform idle operations.

Namely, this communication is currently supported through
three mechanisms:
   - Wait Interruption Protocol
   - Suspension on sleep request
   - Synchronous periodic callback

@section wait_interrupt Wait Interruption Protocol

Blocking operations performed by the Virtual Machine can be
asynchronously interrupted from another thread of the application
where the virtual machine runs. Whenever an interruption request
is issued, if the VM is already engaged in or is approaches a compliant
blocking operation, it will raise an @a InterruptedError. Scripts may
intercept this error to for provide some cleanup, or just let it unfiltered.

@note Unfiltered errors doesn't reach the script layer and cause immediate
termination of the signaled VM. Also, a full Falcon error instance is not
created for them, and embedding application can access the exception that
terminated the execution through a standard Falcon::Error C++ interface.

Not all the blocking waits are instrumented to respect interrupt requets and raise this error, as some
waiting operations may be caused by external module that are not required
to adopt the vm interruption protocol.

Compliant waiting functions are mainly @a sleep, @a Stream.readAvailable,
@a Stream.writeAvailable and a few others. Compliancy to interruption protocol
is specified in the item descriptions.

@section suspend_on_sleep Suspension on sleep request.

Embedding applications may also require the VM to suspend its execution on sleep
requests coming from the scripts or from extension modules. It is usefull to have
the VM instruct the embedding application on how much sleep time has been required,
and let the embedding application manage this idle time.

The Embedding application may also decide to ignore the request, to reset the VM
and start a new execution or to destroy it. After a return in sleep request state,
the VM is clear for inspection, modification, concurrent execution and termination.

@section periodic_callback Synchronous periodic callback.

The VM provides a callback hook that will be periodically called. This hook can
be used by embedding applications to check for program status change, and it may
inject in the VM quit or suspension requests.

In example, a Falcon VM may run in a thread of an embedding application; an
asynchronous request to stop the VM may be posted to the runner thread, and the
VM may peek this request through the periodic callback. This hook may also be
used to dequeue incoming interthread requests that may then be safely injected
in the VM and possibly dispatched to coroutines that may handle them without
alter the state of the running VM.

Frequency of the periodic callback is expressed in count of virtual instructions
executed, and can be regulated and changed live.

*/

/*#
   @group coroutine_support Support for coroutines
   @brief All that's useful for coroutines.
*/

/*#
   @group general_purpose General purpose
   @brief Generic language and type oriented functions.
*/
