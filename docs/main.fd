/*#
@main The Falcon Programming Language Library Reference

This guide contains the reference to the standard library
(@a core module and @a feathers modules), the reference to the standard
extensions (the other modules) as well as some general advices an
information about the Falcon language functions, object and classes.

This guide doesn't contain a Language reference nor tutorials related
to the Falcon language in general.
*/


/*#
   @group general_purpose General purpose
   @inmodule core
   @brief Generic language and type oriented functions.
*/

/*#
@group synclasses Homoiconic classes
@brief Classes reflecting syntactic constructs.

*/

/*#
@class TreeStep
@brief Base for Homoiconic reflection.

A tree step is a PStep (Falcon VM opcode) representing a syntactic tree
element. TreeSteps are divided into three categories:
- Expressions
- Statements
- Syntactic Trees (or SynTrees).

The distinction between this categories is not meaningful at VM level,
and is drawn just to make it simpler for the final user to understand
some relationships between the language elements.
  
*/

/*#
@class While 
@from TreeStep
@brief Homoiconic reflection of the \b while statement.
@param selector The selector expression used to determine the loop.
@optparam ... A sequence of TreeSteps that will go in the While body.

*/

/*#
@class ForIn 
@from TreeStep
@brief Homoiconic reflection of the \b for/in statement.
@param target A single symbol, or an array of symbols, that will receive the generated values.
@param selector The selector expression used to generate data to be stored in the target.
@optparam body A TreeStep that will be used as main body of the for loop.
@optparam ff A TreeStep that will be used as the forfirst block.
@optparam fm A TreeStep that will be used as the formiddle block.
@optparam fl A TreeStep that will be used as the forlast block.

The body, ff, fm or fl block can be nil if not used.
*/

/*#
@class Rule 
@from TreeStep
@brief Homoiconic reflection of the \b rule statement.
@optparam ... A sequence of @a RuleSynTree instances representing rule branches.

Each element in the parameters is considered as a separate rule alternative (as if
declared after an \b or clause).
*/

/*#
@class SynTree 
@from TreeStep
@brief Homoiconic reflection of a statement sequence.
@optparam ... Any sequence of TreeSteps.

The SynTree is a set of statements or expressions that are evaluated in turn,
one after another. 

A SynTree may also include another syntree; the effect will be that of evaluating
all the child syntree elements as if they were part of this syntree.
*/

/*#
@class RuleSynTree 
@from SynTree
@brief Homoiconic reflection of a statement sequence in a rule context.
@optparam ... Any sequence of TreeSteps.

The RuleSynTree is a set of statements or expressions that are evaluated in turn,
one after another; if any of the element evaluation yields an explicit "false"
value, the rest of the evaluation is abandoned.

The RuleSynTree is used by the @a Rule class as a single branch of its alternatives.
*/


/*#
@class ForTo 
@from TreeStep
@brief Homoiconic reflection of a statement sequence in a rule context.
@param target A target symbol (or @a Symbol) accepting the loop index
@param start A value or expression generating the start value
@param stop A value or expression generating the end value
@optparam step A value or expression generating the step 
@optparam body A TreeStep that will be used as main body of the for loop.
@optparam ff A TreeStep that will be used as the forfirst block.
@optparam fm A TreeStep that will be used as the formiddle block.
@optparam fl A TreeStep that will be used as the forlast block.


*/

/*#
 @class Call
 @from TreeStep
 @brief Homoiconic reflection of the Call expression
 @param callee The expression to be called
 @optparam ... Parameters for the call.

*/
