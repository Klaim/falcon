
                         RELEASE NOTES for Falcon

                              Chimera Release

                                  0.9.6.4
  
  "Chimera" version is an intermediate version that bridges Eagle series
with the next series, in which we should put in the final compiler/module
assets.

  This is mainly a critical bugfix release over 0.9.6.2. Backward compatibility
with previous versions is granted, as well as binary comptatibility of the
public interface. A minor change has been delivered to the internal API of
Falcon::CoreSlot class, which is usually not exposed to external modules.

  The most notable addition to this release is an "event oriented" interface
to the VMSlot class, which allows finer control of scoped broadcasts.


New Features
============

  - Function.trace() to get the traceback steps.
  - Methodic functions strEsq, strUnesq, strEscape, strUnescape (and
    similarly named methods in String) helping string transformation in
    web modules.
  - Event model to VMSlot (children named slots).
  - Now unknown messages are optionally marshalled to "__on_event" in objects.


Critical bug fixes
==================

  - *comp() methods didn't skip the item when oob(1) was returned
  - Failing to init the frame in new VMContexts would have caused random
    crashes depending on linkage or memory conditions.
  - Error reporting in include() may crash.
  - Invalid loop condition caused fself.caller() to segfault.

Usage tips
==========

   Although the new Garbage Collector is relatively efficient in determining
the actual needs of applications and in reclaiming unused memory, the standard
detection algorithms are still a bit naive.

  If your application is memory-intensive, be sure to read the Core Module
Documentation about the new GC object, which provides four default collection
strategies and also allows you to implement your own. A finely tuned GC 
strategy can boost the performance of your application and reduce its memory 
footprint.

  Meanwhile we'll continue to work towards finding collection strategies 
applicable to the most common usage patterns and you're invited to provide 
your own, should this aspect of Falcon be critical to your application.

