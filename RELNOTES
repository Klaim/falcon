
                            RELNOTES for Falcon

                             Albatross Release

                                  0.9.0


  Albatross release series is the bridge linking the distant lands of
beta series and the final 1.0 shores. The release represents an effort
to clear all the dirty code (at conceptual level) existing deep down in
version 0.8.x and that prevented to extend the engine virtuality and
interoperability.

  The result is a clean set of constructs that allow to completely
virtualize the concept of "items", the introduction of "metaclasses"
through which the Basic Object Model is now coherent and formalized,
a set of simplified VM operations and a better API offered to
3d party module developers.

  At engine level the most pervasive change in Albatross is the introduction
of a transparent, centralized multithreading garbage collector, which is now
able to perform mainly in background and taking into consideration the
activity of multiple virtual machines. The engine is now natively working in
multithreading mode, and this allows to offer some extra services to multi-
threaded applications as the VM messaging.

  The changes to the language are somewhat relevant, and not always
rear-compatible. The main ones are:
  - Introduction of BOM methods application directly on values, (i.e.
    1.typeId() or [a,b,c].len()).
  - Removal of the "attributes" keyword, and introduction of the
    VMSlot class. Message targets now doesn't need to be instances
    anymore, as any callable item can receive broadcasts.
  - Removal of the pass and pass/in statements (now obsolete).
  - Removal of the "lambda" keyword, substituted by the more compact and
    readable grammar { <param> => <expression> }. The same grammar can
    also declare nameless functions as the part on the right of the
    "=>" can contain multiple statements and span on multiple lines.
  - Addition of the "parametric evaluation" concept, which allows simpler
    passing of parameters through ETA functions and evaluated sequences.
  - Introduction of operator callbacks (operator overloading).
  - Removal of the "sender" keyword; the BOM method Funciton.caller()
    can provide the same information and is lighter.
  - Addition of the fself keyword, that identifies the currently
    executed function (and is useful, for example, to recurse from
    inside nameless functions).

  At library level, the most relevant changes are in the stream area,
where buffering and rationalization of the parameters have finally made
this sector of Falcon to become highly competitive, and the introduction
of "methodic functions", which are functions that can be applied also
as methods. The basic item API has been rationalized and is now widely
accessible also as BOM methods, which are now type specific.

  Although no explicit optimization has been applied to the code, the
simplification of many parts of the code has brought to a sensible increase
in performance in certain area of the code. However the idea behind this
release is to shape the engine interface making it coherent towards
the surrounding applications (embedding applications, modules and scripts)
to start working on the underlying engine to optimize it. In short, this
represents a solid base to start the optimization cycle we want to carry
out in the 0.9 releases.


Short term plans
================

  As this 0.9 release is considered a "bleeding edge", it calls for an early
fix up and release. 0.9.2 shall be released in about 30-45 days, with possibly
an in-between second bleeding edge release to issue urgent problems that
may be discovered in the meanwhile.

  The space between this release and the next one is totally devoted to bug
hunting and finetuning. Critical features may be added in case their missing can
be considered a bug itself.

