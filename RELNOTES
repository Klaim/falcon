
                          RELEASE NOTES for Falcon

                             Crane-dev Release

                                  0.9.1.2


  "Crane" will mark the birth of the new development effort towards the final
1.0 release. This development release is meant as a pre-release for developers,
willful users, and module designers so that they can install it on their
systems and test it, use it and develop the new modules on it. In short, its
a stabilization of the 0.9 branch, which is released as a package so that
the surrounding modules and applications can be developed and tested.

  While Albatross (0.9.0) was a totally experimental version, this release is
already usable, and has been employed to port relevant applications and
embeddings from version 0.8. While still not "official", and still bearing
some known issues, it is usable enough to drive Falcon official site and
run through our set of applications without any particular problem.


Short term plans
================

  As planned, we're releasing 0.9.2 (the first official version) in 30-45
days from 0.9.0; this is an in-between version, which we decided to release
as a package to simplify the effort of developers moving to 0.9 branch.

Known Issues
============

  In multithreaded Falcon applications (using the "threading" feather module),
the garbage collector is still unable to dispose of the terminated virtual
machines. It's a minor glitch due to the fact that the old threading code
comes from a separate module in the 0.8 branch, and we just didn't have the
time to nail it. Shouldn't be a big threat for the timings of the official
release. The only direct consequence is that scripts in embedded applications
using the thread module may leak very much at their termination. This has
no consequence for stand-alone applications and for non threaded embedded
scripts.

  It seems we have a problem with the interactive mode on windows 7 standard
command console. This means that the interactive mode (still experimental)
may not be available in that platform through the standard command line
shell.


Usage tips
==========

   Although the new Garbage Collector is relatively efficient in determining
the actual needs of your application and relatively discrete in reclaiming
unused memory, the detection algorithm is still rudimentary and experimental.
If your application is memory-intensive, be sure to read the Core Module
Documentation about the new GC object, which provides four default collection
strategies and allows to implement your own. A finely tuned GC strategy can
boost the performance of your application and reduce its memory footprint;
while we'll work towards finding collection strategies sensible to the most
common usage patterns, you're invited to provide your own in case this aspect
is critical to your application.
