
                               RELNOTES for Falcon

                                 Vulture Release

                                     0.8.14


  Vulture release is mainly a maintainance version for Condor release (0.8.12),
consolidating some bugfix that have been detailed in the ChangeLog.

  Other than this, the for/to construct has been reintroduced, and four
extended operators are now available for managing OOB items.

  The for/to loop is now grammar sugar for for/in ranges, being always
  inclusive on the last element.

  For example:

      for i = 2 to 10 , 2
         > i
      end

will print all the pair numbers between 2 and 10 included. Being a simple
front-end for the for/in construct, it supports break, continue, forfirst
formiddle and forlast statements.

  OOB operators are all unary and work on the item to their right. they are:

  - ^+ x       return an out of band x.
  - ^- x       return a non out of band x.
  - ^? x       return true if x is oob.
  - ^! x       return an item with oob status invert with respect to x.


Open issues at 0.8.14
=====================

   * Streams, mainly file streams, are still to be buffered and optimized.
     If Falcon is employed for high throughput applications, as i.e.
     grepping files, writing massive log amounts, copying files, applicative
     data buffering should be used, and raw write/read stream methods on
     large strings or MemBuf data types should be employed for
     better performance.

   * Stream API may undergo some reshaping during 0.8.12->0.9 step.

   * Assembler has some issues; it is being moved to a stand-alone
     application and library (and possibly to a separate project)
     in 0.9, so its known problems are not being fixed now. The
     assembler is not functional to a correct Falcon application,
     so its status is irrilevant at current development stage.

   * Functional closeures are checking and closing only the direct
     parent's local variables and globally visible variables;
     other parents in the hierarcy are not being considered. So

        glob n = 0

        function a()
          x = 1
          function b()
            y = 2
            return (function(); y * x *n; end)
          end
        end

     will close y and n, but not x. In this moment it is not clear
     if this is a issue or not.

  * FBOM (falcon basic object model) and operator overloading is corrently
    not strongly defined. We need to work a better and deeper object model
    set and enforce it as a generic interface to access items across all
    the engine. The main consequence is that some VM operators can use
    class instance define symbols (as i.e. string conversion), while
    automatic method calls are not available for prototype oriented OOP.
