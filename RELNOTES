
                         RELEASE NOTES for Falcon

                               Eagle Release

                                  0.9.4

  "Eagle" version represents a strenghtening, a bugfix and formalization of
the previous version. The initial plan was that of stuffing some of the new
features we want to introduce in 0.9 release set right in 0.9.4, but as the
changelog was growing, we decided to concentrate in code cleaning and bugfix.

  This will give us the time needed to work on modules and extensions through
a very stable base, and "stable" meant both as with a long lasting interface
and a robust code.

Code Cleaning
=============

  As said, the main concern in issuing this release has been that of
stabilizing the code, both in terms of interface that can be used by the
engine itself and by third party extensions, and in terms of bug fixing and
code cleaning. However, this sole operation had the side effect of removing
a long lasting rust in various parts of the engine, and this earned a
performance boost of about 15-25% in VM intensive tasks; the most relevant
performance increase has been registered in the call stack related routines;
to make an example, the fibonacci recursive (non-optimized) test, which
stresses the ability to recursively call functions (with no tail-stack
optimizations yet) is consistently about 33% faster than in Crane version.

  And this without even introducing a single compile-time or code generation
time optimization yet. We should start doing those around 0.9.6-8 versions,
and we expect the major performance increase to be gained there. Also, I
honestly think there is still a good deal of pure code cleaning in the engine,
which should result in a further 10-15% direct performance increase.

New Features
============

  Despite the focus on code cleaning, we have introduced some relevant new
features:

  - Introduction of generator functions, which are now handled by the for/in
    loop.
  - Comprehension (using also generator functions).
  - Symbol annotations (attributes).
  - Addition of the Set class.

  The star of this release is the long-wished-for feature of "list"
comprehension, to which a new chapter of the Survival Guide has been
dedicated. Falcon uses its OOP/functional hybridation to perform comprehension
on any item or class instance supporting the Sequence VM interface. At this
moment, this is available only for 

Backward incompatibilities
==========================


Future plans
============

  We'll concentrate mainly in three aspect in the next releases:

  - Optimization: starting from this version, we're beginning to optimize
    various aspects of the engine, and to employ state-of-the-art
    programming techniques to boost performances in critical areas as
    concurrency, memory pooling, stack compression, dictionary search
    caching and method early binding. Also, we'll start introducing compile
    time optimizations to boost the performance of the generated code using
    the best possible sequence of Virtual Machine opcodes, and we may
    extend the VM model to allow for more effective optimizations (as local
    caching of frequently used objects).
  - Completion: Message programming and Tabular programming are growing more
    solid, but their employ out in the wild showed some uncovered area that
    requires work. For example, messages could be excellent means to have
    coroutines, and possibly threads, to cooperate if just integrated with
    the wait functions.
  - Extension: three are the issues that must be covered before reaching the
    1.0 stage: logic programming, type contracts (or optional typing) and
    native support for arbitrary precision math. We'll try to introduce all
    the three as soon as possible, so that they are involved since the
    beginning in the optimization and completion steps.


Short term plans
================

  As this is the first official release after more than six months, and as
the changes in the engine are quite extensive, we expect that the release
out on the wild will expose unspotted problems. This, and the need to
integrate logic programming, type contracts and arbitrary precision math
fast has made us plan an official release 0.9.4 in 45-60 days.

  The development group will concentrate in updating and releasing critical
modules as DBI, DynLib and SDL, plus critical projects as the embedding
sample suite and Faldoc as soon as possible, possibly in 1-2 weeks.

Usage tips
==========

   Although the new Garbage Collector is relatively efficient in determining
the actual needs of applications and in reclaiming unused memory, the standard
detection algorithms are still a bit naive.

  If your application is memory-intensive, be sure to read the Core Module
Documentation about the new GC object, which provides four default collection
strategies and also allows you to implement your own. A finely tuned GC 
strategy can boost the performance of your application and reduce its memory 
footprint.

  Meanwhile we'll continue to work towards finding collection strategies 
applicable to the most common usage patterns and you're invited to provide 
your own, should this aspect of Falcon be critical to your application.

