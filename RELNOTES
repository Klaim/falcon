
                         RELEASE NOTES for Falcon

                              Chimera Release

                                  0.9.6
  
  "Chimera" version is an intermediate version that bridges Eagle series
with the next series, in which we should put in the final compiler/module
assets.

  It has been issued as a standalone version to capitalize a number of
very important achievements, and a very long set of critical bugfixes.

New Features
============

  - Call with continuation (like found in "scheme" language).
  - Class 'states'.
  - Passvp function to access variable parameters.
  - (optional) readline/editline support for interactive mode.
  - "Unbound" type.
  - New deep "==", checking deeply language collections by
    value, so that [1,2] == [1,2] holds true.
  - New operator "eq" checking strict identity.

Backward incompatibilities
==========================

  This release introduces some minimal incompatibility with the previous
version. In details:

  - 'state' and 'eq' are now keywords. 
  - All operator overrides in classes and POOP are now renamed; the double
    underline is now IN FRONT of the operator override name. For example,
    call__ is now named __call.


Usage tips
==========

   Although the new Garbage Collector is relatively efficient in determining
the actual needs of applications and in reclaiming unused memory, the standard
detection algorithms are still a bit naive.

  If your application is memory-intensive, be sure to read the Core Module
Documentation about the new GC object, which provides four default collection
strategies and also allows you to implement your own. A finely tuned GC 
strategy can boost the performance of your application and reduce its memory 
footprint.

  Meanwhile we'll continue to work towards finding collection strategies 
applicable to the most common usage patterns and you're invited to provide 
your own, should this aspect of Falcon be critical to your application.

