/*
   FALCON - Module binding witer tool

   FILE: mystr_class.fal

   Test for pseudo class type encapsulation.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sun, 20 Jul 2008 12:27:30 +0200

   -------------------------------------------------------------------
   (C) Copyright 2008: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

/* Final module name
 It describes the name of the module (modname.so) and the subdirectory
 where the skeleton files are configured.
*/
name = "gd2"

/* Source XML generated from CPP-XML from where to read the XML binding
   relative to this dir
*/
source = "gd2_def.xml"

/* Work directory where the files are written.
 overrides $name/
 relative to this dir
*/
workdir = "../src"

/* Language for internationalization */
module_lang = "en_US"

/* Must be an instance of class version info. */
module_version = VersionInfo( 1, 0, 0 )

/* Prologue in front of the module to be generated */
prologue= '
extern "C" {
   #include <gd.h>
   #include <gdfontt.h>
   #include <gdfonts.h>
   #include <gdfontmb.h>
   #include <gdfontl.h>
   #include <gdfontg.h>
}

/********************************************************
  Falcon Stream to gd bridge
*********************************************************/

#include <falcon/memory.h>
#include <falcon/stream.h>
#include <falcon/error.h>

#ifndef FALCON_ERROR_GD_BASE
   #define FALCON_ERROR_GD_BASE 2330
#endif

typedef struct tag_Stream_gdIOCtx
{
   gdIOCtx ctx;
   Falcon::Stream* stream; 
   bool okToDelete;
} StreamCtx;


static int StreamIOCtx_getC(struct gdIOCtx *ctx)
{
   StreamCtx* sctx = (StreamCtx*) ctx;
   Falcon::uint32 val;
   if ( ! sctx->stream->get( val ) )
      return -1;
      
   return (int) val;
}


static int StreamIOCtx_getBuf( struct gdIOCtx *ctx, void *data, int wanted )
{
   StreamCtx* sctx = (StreamCtx*) ctx;
   if ( sctx->stream->eof() )
      return 0;

   return (int) sctx->stream->read( (Falcon::byte*)data, wanted );
}

static void StreamIOCtx_putC( struct gdIOCtx *ctx, int c)
{
   StreamCtx* sctx = (StreamCtx*) ctx;
   sctx->stream->put( c );
}


static int StreamIOCtx_putBuf( struct gdIOCtx *ctx, const void *data, int wanted)
{
   StreamCtx* sctx = (StreamCtx*) ctx;
   return sctx->stream->write( (Falcon::byte*) data, wanted );
}

static int StreamIOCtx_seek(struct gdIOCtx *ctx, const int pos)
{
   StreamCtx* sctx = (StreamCtx*) ctx;
   return sctx->stream->seekBegin( pos );
}

static long StreamIOCtx_tell(struct gdIOCtx *ctx )
{
   StreamCtx* sctx = (StreamCtx*) ctx;
   return (long) sctx->stream->tell();
}

static void StreamIOCtx_free(struct gdIOCtx *ctx)
{
   StreamCtx* sctx = (StreamCtx*) ctx;
   if ( sctx->okToDelete )
       delete sctx->stream;
   Falcon::memFree( sctx );
}

static gdIOCtx* CreateStreamIOCtx( Falcon::Stream* stream, bool okToDelete )
{
   StreamCtx* sctx = (StreamCtx*) Falcon::memAlloc( sizeof( StreamCtx ) );
   sctx->ctx.getC = StreamIOCtx_getC;
   sctx->ctx.getBuf = StreamIOCtx_getBuf;
   sctx->ctx.putC = StreamIOCtx_putC;
   sctx->ctx.putBuf = StreamIOCtx_putBuf;
   sctx->ctx.seek = StreamIOCtx_seek;
   sctx->ctx.tell = StreamIOCtx_tell;
   sctx->ctx.gd_free = StreamIOCtx_free;

   sctx->stream = stream;
   sctx->okToDelete = okToDelete;
   return (gdIOCtx*) sctx;
}
'

/* epilogue of the module to be generated */
epilogue = '
/* Done with falbind */
'

/*********************************************
   Synthethizes IOCtx parameters from stream
**********************************************/
object TypeSynthIOCtx from TypeInfo( "gdIOCtx*" )

   function onCheckType( count )
      Output.write( "   vm->param(" + count + ")->isOfClass(\"Stream\")" );
   end

   function onLoadParam( count, varname )
      Output.write( @'
   gdIOCtx* $varname = (gdIOCtx*) CreateStreamIOCtx(
         dyncast<Stream*>(vm->param($count)->asObject()->getFalconData()),
         false );'+"\n")
   end

   function onMakeCall( count, varname )
      Output.write( varname );
   end

   function onMakeReturn( varname )
      raise CodeError(1000,"gdIOCtx* used as return value")
   end

   function onMakeLeadout( count, varname )
      Output.write( @'   $varname->gd_free($varname);'+"\n" )
   end
   
   function toParamDesc()
      return "Stream"
   end

end

// Custom binding for gdImageStringFT
function make_gdImageStringFT()
Output.write( '

/* Custom binding for gdImageStringFT/FTEx */

static void _falbind_GDImage_stringFT( Falcon::VMachine* vm )
{
   // parameter retrival
   Falcon::Item *i_fg = vm->param(0);
   Falcon::Item *i_fontname = vm->param(1);
   Falcon::Item *i_ptsize = vm->param(2);
   Falcon::Item *i_angle = vm->param(3);
   Falcon::Item *i_x = vm->param(4);
   Falcon::Item *i_y = vm->param(5);
   Falcon::Item *i_string = vm->param(6);
   Falcon::Item *i_extra = vm->param(7);  // optional parameter for FtEX

   if( i_fg == 0 || ! i_fg->isOrdinal() ||
       i_fontname == 0 || ! i_fontname->isString() ||
       i_ptsize == 0 || !( i_ptsize->isNil() || i_ptsize->isOrdinal() ) ||
       i_angle == 0 || !( i_angle->isNil() || i_angle->isOrdinal() ) ||
       i_x == 0 || i_x->isOrdinal() ||
       i_y == 0 || i_y->isOrdinal() ||
       i_string == 0 || i_string->isOrdinal() ||
       (i_extra != 0 && ! (i_extra->isBoolean() || i_extra->isDict() ) )
       )
   {
      throw new ParamError( ErrorParam( e_inv_params, __LINE__ )
          .extra( "N,S,N,N,N,N,S,[B|D]" ) );
   }

   // a bit of data to be readied.

   gdImagePtr img;
   bool return_brect;
   bool extra;
   int brect[8];

   int fg = i_fg->forceInteger();
   Falcon::AutoCString fname( *i_fontname->asString() );
   const char* fontname = fname.c_str();
   int ptsize = i_ptsize->forceInteger();
   int angle = i_angle->forceInteger();
   int x = i_x->forceInteger();
   int y = i_y->forceInteger();
   Falcon::AutoCString str( *i_string->asString() );
   const char* string = str.c_str();

   char* res;  // if zero, we failed.

   // first, determine if we''re called statically -- in this case, we use
   // NULL parameter for img, to get a dry execution for bounds calculation.
   if ( vm->self().isObject() )
   {
      _falbind_GdImage* self = dyncast<_falbind_GdImage*>( vm->self().asObject() );
      img = self->get();
      return_brect = i_extra != 0 && i_extra->isBoolean() && i_extra->asBoolean();
   }
   else {
      // called as static -- dry execution.
      img = 0;
      return_brect = true;
   }

   extra = i_extra != 0 && i_extra->isDict();

   // we''re ready for the call
   if( extra )
   {
      Falcon::CoreDict* d = i_extra->asDict();
      Falcon::AutoCString* cs_xshow = 0;
      Falcon::AutoCString* cs_fontpath = 0;
      
      // we must extract extra parameters.
      gdFTStringExtra xp;
      Falcon::Item* i_flags = d->find( "flags" );
      xp.flags = (int)(i_flags != 0 ? i_flags->forceInteger() : 0);
      Falcon::Item* i_spacing = d->find( "linespacing" );
      xp.linespacing = i_spacing != 0 ? i_spacing->forceNumeric() : 0.0;
      Falcon::Item* i_charmap = d->find( "charmap" );
      xp.charmap = (int) (i_charmap != 0 ? i_charmap->forceInteger() : 0);
      Falcon::Item* i_hdpi = d->find( "hdpi" );
      xp.hdpi = (int) (i_hdpi != 0 ? i_hdpi->forceInteger() : 0);
      Falcon::Item* i_vdpi = d->find( "vdpi" );
      xp.vdpi = (int) (i_hdpi != 0 ? i_vdpi->forceInteger() : 0);

      Item* i_xshow = d->find( "xshow" );
      if ( i_xshow->isString() )
      {
         cs_xshow = new AutoCString( *i_xshow->asString() );
         xp.xshow = const_cast<char*>(cs_xshow->c_str());
      }
      else
         xp.xshow = 0;
         
      Item* i_fontpath = d->find( "fontpath" );
      if ( i_fontpath->isString() )
      {
         cs_fontpath = new AutoCString( *i_fontpath->asString() );
         xp.fontpath = const_cast<char*>(cs_fontpath->c_str());
      }
      else
         xp.xshow = 0;

      // finally, we got to determine if we need to return brecht
      if ( img != 0 && d->find( "brect" ) != 0 )
         return_brect = true;

      // we can make the call
      res = gdImageStringFTEx( img, brect, fg, const_cast<char*>(fontname), ptsize, angle, x, y, const_cast<char*>(string), &xp );

      delete cs_xshow;
      delete cs_fontpath;
   }
   else {
      // no, it''s a standard call
      res = gdImageStringFT( img, brect, fg, const_cast<char*>(fontname), ptsize, angle, x, y, const_cast<char*>(string) );
   }

   // error?
   if ( res == 0 )
   {
      throw new GdError( Falcon::ErrorParam( FALCON_ERROR_GD_BASE, __LINE__ ) );
   }
   if ( return_brect )
   {
      Falcon::CoreArray* ca = new Falcon::CoreArray( 8 );
      for ( Falcon::uint32 i = 0; i < 8; i ++ )
         ca->append( (Falcon::int64) brect[i] );
      vm->retval( ca );
   }
   else
      vm->retnil();
}
')
end

function decl_gdImageStringFT()
   Output.write( '
   self->addClassMethod( sym_GdImage, "StringFT", &_falbind_GDImage_stringFT ).asSymbol()
      ->addParam( "fg" )->addParam( "fontname" )->addParam( "ptsize" )->addParam( "angle" )->
      addParam( "x" )->addParam( "y" )->addParam( "string" )->addParam("extra");
')
end

automatic = .[
   RuleErrorClass( "GdError" )
]

io_write_check = BaseErrorControl(
   {=>"!dyncast<Stream*>(vm->param(0)->asObject()->getFalconData())->good()"},
      "IoError", "FALCON_ERROR_GD_BASE+3", "I/O error while writing the image" )

io_write_check1 =  BaseErrorControl(
   {=>"!dyncast<Stream*>(vm->param(1)->asObject()->getFalconData())->good()"},
      "IoError", "FALCON_ERROR_GD_BASE+3", "I/O error while writing the image" )

/* Reflection for fucntions.
*/
binding = .[
   // Deprecated functions
   // --- We don't support it.
   RuleIgnore( "gdImagePngToSink" )
   RuleIgnore( "gdNewSSCtx" )
   RuleIgnore( "gdImageStringTTF" )
   RuleIgnore( "gdImageString16" )
   RuleIgnore( "gdImageString16Up" )
   // --- end of deprecated functions

   // ignore destroy (part of the GdImage pseudoclass)
   RuleIgnore( "gdImageDestroy$" )

   // We will use CTX functions to load from streams.
   // So we convert their name stripping CTX...
   RulePseudoMethod( "gdImageCreateFrom(.+?)CtxEx", "GdImage", "gdImage", "CreateFrom\\1Ex",
      BaseErrorControl( " == 0 ", "GdError", "FALCON_ERROR_GD_BASE+1", "Invalid image format" ) )
      
   RulePseudoMethod( "gdImageCreateFrom(.+?)Ctx", "GdImage", "gdImage", "CreateFrom\\1",
      BaseErrorControl( " == 0 ", "GdError", "FALCON_ERROR_GD_BASE+1", "Invalid image format" ) )

   //... while ignoring pointer and stdio.h FILE* based functions.
   RuleIgnore( "gdImageCreateFrom(.+)" )
   
   //... Same thing for save functions; we'll use just CTX, as methods.
   RuleIgnore( "gdImage(Jpeg|WBMP|Png|Png|PngPtr|Gif|GifAnimBegin|GifAnimAdd|GifAnimEnd|Gd2|Gd)(Ptr)?(Ex)?$" )

   // gdImageStringFT has a too complex (and c-oriented) behavior for a direct translation
   // we're going to rewrite it a bit.
   RuleIgnore( "gdImageStringFTEx" )
   RuleCustom( "gdImageStringFT$", make_gdImageStringFT, decl_gdImageStringFT )
   
   // UBUNTU version of gd2 is a bit broken. -- it doesn't export gdImageEllipse
   RuleIgnore( "gdImageEllipse" )
   
   RuleFunc( "gdImageTrueColor$", nil,
      BaseErrorControl( " == 0 ", "GdError", "FALCON_ERROR_GD_BASE+2", "Error in creating the image" ) )

   RuleFunc( "gdFontGet(.+)", "gdFontGet\\1" )

   RulePseudoInit( "gdImageCreate$", "GdImage",
      BaseErrorControl( " == 0 ", "GdError", "FALCON_ERROR_GD_BASE+2", "Error in creating the image" ) )

   // WBMP is a little different; it has the stream parameter in position 1
   RulePseudoMethod( "gdImageWBMPCtx$", "GdImage", "gdImage", "WBMP", io_write_check1 )
   RulePseudoMethod( "gdImage(.+)CtxEx", "GdImage", "gdImage", "\\1Ex", io_write_check )
   RulePseudoMethod( "gdImage(.+)Ctx", "GdImage", "gdImage", "\\1", io_write_check )
   
   RulePseudoMethod( "gdImage(.+)", "GdImage", "gdImage", "\\1" )

   // Ignore the rest -- for now.
   RuleIgnore( ".*" )
]

/* Reflection for types
*/
types = .[
   RulePseudoClass( "^gdImage$", "GdImage", "gdImageDestroy" )

   RuleTypeOpaque( "void*", "ImageDataPtr", nil )
   
   // fonts are never destroyed
   RuleTypeOpaque( "gdFont$", "GdFont", nil )
   RuleTypeOpaque( "gdPoint$", "GdPoint", nil )
   RuleTypeOpaque( "gdFTStringExtra$", "gdFTStringExtra", nil )
   RuleTypeOpaque( "gdSkin$", "gdSkin", nil )
]

TypeInfo.alias( "gdImageStruct", "gdImage" )
TypeInfo.alias( "gdImagePtr", "gdImage*" )
TypeInfo.alias( "gdImageStruct*", "gdImage*" )

TypeInfo.alias( "gdFontStruct*", "gdFont*" )

TypeInfo.alias( "gdPointStruct", "gdPoint" )
TypeInfo.alias( "gdPointStruct*", "gdPoint*" )

TypeInfo.alias( "gdFTStringExtraStruct", "gdFTStringExtra" )
TypeInfo.alias( "gdFTStringExtraStruct*", "gdFTStringExtra*" )

TypeInfo.alias( "gdSkinStruct", "gdSkin" )
TypeInfo.alias( "gdSkinStruct*", "gdSkin*" )

