# - Find GD
# Find the native GD includes and library
# This module defines
#  GD_INCLUDE_DIRS, where to find gd.h, etc.
#  GD_LIBRARIES, the libraries needed to use GD.
#  GD_FOUND, If false, do not try to use GD.
# also defined, but not for general use are
#  GD_LIBRARY, where to find the GD library.
#  GD_PNG_FOUND, GD_JPEG_FOUND, GD_GIF_FOUND, test
#  support for image formats in GD.

FIND_PATH(GD_INCLUDE_DIRS gd.h
	/usr/local/include
	/usr/include
)

IF(WIN32 AND NOT CYGWIN)
	SET(GD_NAMES ${GD_NAMES} bgd)
ELSE(WIN32)
	SET(GD_NAMES ${GD_NAMES} gd)
ENDIF(WIN32 AND NOT CYGWIN)

FIND_LIBRARY(GD_LIBRARY
	NAMES ${GD_NAMES}
	PATHS /usr/lib64 /usr/lib /usr/local/lib /usr/local/lib64
)

INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(GD DEFAULT_MSG GD_LIBRARY GD_INCLUDE_DIRS)
IF(GD_FOUND)
	SET(GD_LIBRARIES ${GD_LIBRARY})
ENDIF()

IF(GD_FOUND)
	IF(WIN32 AND NOT CYGWIN)
		SET(GD_PNG_FOUND ON)
		SET(GD_JPEG_FOUND ON)
		SET(GD_GIF_FOUND ON)
		get_filename_component(GD_LIBRARY_DIR ${GD_LIBRARY} PATH)
	ELSE(WIN32 AND NOT CYGWIN)
		INCLUDE(CheckLibraryExists)
		GET_FILENAME_COMPONENT(GD_LIB_PATH ${GD_LIBRARY} PATH)
		GET_FILENAME_COMPONENT(GD_LIB ${GD_LIBRARY} NAME)

		CHECK_LIBRARY_EXISTS("${GD_LIBRARY}" "gdImagePng" "${GD_LIB_PATH}" GD_PNG_FOUND)
		IF(GD_PNG_FOUND)
			find_package(PNG)
			IF(PNG_FOUND)
				SET(GD_LIBRARIES ${GD_LIBRARIES} ${PNG_LIBRARIES})
			SET(GD_INCLUDE_DIRS ${GD_INCLUDE_DIRS} ${PNG_INCLUDE_DIR})
			ELSE(PNG_FOUND)
				SET(GD_PNG_FOUND "NO")
			ENDIF(PNG_FOUND)
		ENDIF(GD_PNG_FOUND)

		CHECK_LIBRARY_EXISTS("${GD_LIBRARY}" "gdImageJpeg" "${GD_LIB_PATH}" GD_JPEG_FOUND)
		IF(GD_JPEG_FOUND)
			find_package(JPEG)
			IF(JPEG_FOUND)
				SET(GD_LIBRARIES ${GD_LIBRARIES} ${JPEG_LIBRARIES})
				SET(GD_INCLUDE_DIRS ${GD_INCLUDE_DIRS} ${JPEG_INCLUDE_DIR})
			ELSE(JPEG_FOUND)
				SET(GD_JPEG_FOUND "NO")
			ENDIF (JPEG_FOUND)
		ENDIF(GD_JPEG_FOUND)

		CHECK_LIBRARY_EXISTS("${GD_LIBRARY}" "gdImageGif" "${GD_LIB_PATH}" GD_GIF_FOUND)

		# Trim the list of include directories
		SET(GDINCTRIM)
		FOREACH(GD_DIR ${GD_INCLUDE_DIRS})
			SET(GD_TMP_FOUND OFF)
			FOREACH(GD_TRIMMED ${GDINCTRIM})
				IF("${GD_DIR}" STREQUAL "${GD_TRIMMED}")
				SET(GD_TMP_FOUND ON)
				ENDIF("${GD_DIR}" STREQUAL "${GD_TRIMMED}")
			ENDFOREACH(GD_TRIMMED ${GDINCTRIM})
			IF(NOT GD_TMP_FOUND)
				SET(GDINCTRIM "${GDINCTRIM}" "${GD_DIR}")
			ENDIF(NOT GD_TMP_FOUND)
		ENDFOREACH(GD_DIR ${GD_INCLUDE_DIRS})
		SET(GD_INCLUDE_DIR ${GDINCTRIM})

		SET(GD_LIBRARY_DIR)

		# Generate trimmed list of library directories and list of libraries
		FOREACH(GD_LIB ${GD_LIBRARIES})
			GET_FILENAME_COMPONENT(GD_NEXTLIBDIR ${GD_LIB} PATH)
			SET(GD_TMP_FOUND OFF)
			FOREACH(GD_LIBDIR ${GD_LIBRARY_DIR})
				IF("${GD_NEXTLIBDIR}" STREQUAL "${GD_LIBDIR}")
					SET(GD_TMP_FOUND ON)
				ENDIF("${GD_NEXTLIBDIR}" STREQUAL "${GD_LIBDIR}")
			ENDFOREACH(GD_LIBDIR ${GD_LIBRARIES})
			IF(NOT GD_TMP_FOUND)
				SET(GD_LIBRARY_DIR "${GD_LIBRARY_DIR}" "${GD_NEXTLIBDIR}")
			ENDIF(NOT GD_TMP_FOUND)
		ENDFOREACH(GD_LIB ${GD_LIBRARIES})
	ENDIF(WIN32 AND NOT CYGWIN)
ENDIF(GD_FOUND)

MARK_AS_ADVANCED(
	GD_LIBRARY
	GD_LIBRARIES
	GD_INCLUDE_DIRS
	GD_LIBRARY_DIR
	GD_PNG_FOUND
	GD_JPEG_FOUND
	GD_GIF_FOUND
)
