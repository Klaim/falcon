/*
   FALCON - The Falcon Programming Language.
   FILE: callframe.h

   Closure - function and externally referenced local variabels
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sun, 01 Jan 2012 15:39:29 +0100

   -------------------------------------------------------------------
   (C) Copyright 2012: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/


#ifndef FALCON_CLOSURE_H
#define FALCON_CLOSURE_H

#include <falcon/setup.h>
#include <falcon/types.h>
#include <falcon/variable.h>

namespace Falcon {

class Function;
class VMContext;
class ClassClosure;

/** Closure abstraction.
 
 A closure is a pair of a function and closed data. Closed data is data
 referenced by the function, but coming from the outside.
 
 ClassClosure allows to interact with the closure at script level and to invoke 
 it.
 
 Closures are automatically generated by the ExprClosure espression, which
 takes a function and closes the data externally referenced by it. The parser
 generates an ExprClosure around a function definition if it has some external
 symbol reference (in the partent trees; not in the global context). 
 
 Closure items are consider immediately callable.
 */
class Closure
{
public:
   /** Creates the closure giving a function to it. 
    \param func The function to be closed.
    The function needs not to be fully configured right now. The actual
    closure is performed later by the close() method.
    */
   Closure( Function* func );
      
   Closure( const Closure& other );
   
   ~Closure();
   
   void gcMark( uint32 mark );
   uint32 gcMark() const { return m_mark; }
   
   /** Analyzes the function and the context and closes the needed values. 
    \param ctx the context where the closed data is to be found.
    */
   void close( VMContext* ctx );
   
   /** Gets the function associated with this closure. */
   Function* function() const { return m_function; }
   
   /** Gets the data associated with this closure. */
   const Variable* closedData() const { return m_closedData; }
   Variable* closedData() { return m_closedData; }   
   Closure* clone() const { return new Closure(*this); }
   
private:

   Function* m_function;
   Variable* m_closedData;
   uint32 m_closedDataSize;
   uint32 m_mark;
   
   friend class ClassClosure;
   
   // can be used only by ClassClosure
   Closure() {}
   // can be used only by ClassClosure
   void function( Function* f );
};

}

#endif	/* CLOSURE_H */

/* end of closure.h */
