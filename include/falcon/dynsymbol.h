/*
   FALCON - The Falcon Programming Language.
   FILE: dynsybmol.h

   Dynamically bound symbol.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Mon, 03 Jan 2011 12:23:30 +0100

   -------------------------------------------------------------------
   (C) Copyright 2011: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

#ifndef FALCON_DYNSYMBOL_H
#define FALCON_DYNSYMBOL_H

#include <falcon/setup.h>
#include <falcon/string.h>

namespace Falcon {

/** Dynamic Symbol class.
 A Dynamic Symbol is a name that has to be bound to a value at runtime.
 Contrarily to a "Symbol", it is not generated by the parser in the compilation
 flow, but it can be dynamically created by the host programs. 
 
 VMContext has support to evaluate the dynamic symbols in a context.
 
 \note This class is non-virtual with a single field: the string that's the
 name of the symbol. Practically, it is internally treated as a String.
 */
class FALCON_DYN_CLASS DynSymbol
{
public:   
   
   /** Empty constructor used for serialization. */
   DynSymbol( const String& str ):
      m_name( str )
   {}
   
   ~DynSymbol() {}
   
   const String& name() const { return m_name; }   

   uint32 gcMark() const { return m_name.currentMark(); }
   void gcMark( uint32 mark ) { m_name.gcMark( mark ); }
   
protected:
   
   String m_name;
};

}

#endif

/* end of dynsymbol.h */
