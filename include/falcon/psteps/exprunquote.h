/*
   FALCON - The Falcon Programming Language.
   FILE: exprunquote.h

   Syntactic tree item definitions -- Unquote expression (^~)
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sun, 16 Oct 2011 21:30:11 +0200

   -------------------------------------------------------------------
   (C) Copyright 2011: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

#ifndef FALCON_EXPR_UNQUOTE_H_
#define FALCON_EXPR_UNQUOTE_H_

#include <falcon/expression.h>
#include <falcon/synclasses.h>
#include <falcon/engine.h>


namespace Falcon {

/** Unquote expression.
 Unquote expressions (^~) work tightly together with quote expression and
 literal statement causing local evaluation to be performed before quoting it.
 
 For instance:
 \code
 expr = (^= a+ ^~(b*2) + c)
 \endcode
 This causes expr to be filled with an expression "a+X+c", where X is the value
 of the evaluated ^~ expression at the moment it was set in expr. 
 
 The result of the unquoted expression is actually macro-substituted in the 
 final expression, so
 \code
 b = ^= c + d
 expr = (^= a+ ^~b)
 \endcode
 
 results in expr being "a + c + d".
 
 As the value of unquoted expressions is arbitrary, each literal block or 
 expression containing unquotes need to be cloned during evaluation. 
 Then, the evaluated values of the unquotes are stored in the cloned tree.

 
 */
class FALCON_DYN_CLASS ExprUnquote: public UnaryExpression
{
public:
   ExprUnquote( int line=0, int chr=0 );
   ExprUnquote( Expression* expr, int line=0, int chr=0 );
   ExprUnquote( const ExprUnquote& other );
   
   /** Returns true if the expression can be found alone in a statement. */
   inline virtual bool isStandAlone() const { return true; }   
   
   virtual void registerUnquotes( TreeStep* sender );
   virtual void describeTo( String& str, int depth ) const;
   
   virtual bool simplify(Falcon::Item&) const;
   
   /** Smart cloning.
    
    Actually, this method might either do a standard clone or return
    a data dynamically generated by the master expression.
    */
   
   virtual Expression* clone() const;
      
private:
   static void apply_( const PStep*, VMContext* ctx );
   TreeStep* m_registerer;
};

}

#endif

/* end of exprunquote.h */
