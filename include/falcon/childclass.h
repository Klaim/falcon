/*
   FALCON - The Falcon Programming Language.
   FILE: childclass.h

   Simple implementation of a child class for native classes.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sun, 13 Jul 2014 18:19:51 +0200

   -------------------------------------------------------------------
   (C) Copyright 2014: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

#ifndef _FALCON_CHILDCLASS_H_
#define _FALCON_CHILDCLASS_H_

#include <falcon/class.h>

namespace Falcon {

/** Simple implementation of a child class for native classes.
 *
 * An instance of this class is generated by Class::createChildClass,
 * and can be used by embedding applications and modules to dynamically
 * create subclasses (specialized versions) of existing native classes.
 *
 * All the virtual methods are reimplemented to invoke the same method in the parent class.
 */
class ChildClass: public Class
{
public:
   /** Creates the child class from a given parent class.
    *
    * By default the assigned type ID is the same of the parent,.
    *
    */
   ChildClass( const String& name, const Class* parent, int64 typeID = -1 );
   virtual ~ChildClass();

   virtual void render( TextWriter* tw, int32 depth ) const;
   virtual int64 occupiedMemory( void* instance ) const;
   virtual void dispose( void* instance ) const;
   virtual void* clone( void* instance ) const;
   virtual void* createInstance() const;
   virtual void store( VMContext* ctx, DataWriter* stream, void* instance ) const;
   virtual void restore( VMContext* ctx, DataReader* stream ) const;
   virtual void flatten( VMContext* ctx, ItemArray& subItems, void* instance ) const;
   virtual void unflatten( VMContext* ctx, ItemArray& subItems, void* instance ) const;
   virtual void delegate( void* instance, Item* target, const String& message ) const;

   virtual void gcMarkInstance( void* instance, uint32 mark ) const;
   virtual bool gcCheckInstance( void* instance, uint32 mark ) const;
   virtual void describe( void* instance, String& target, int depth = 3, int maxlen = 60 ) const;
   virtual void inspect( void* instance, String& target, int depth = 3 ) const;

  //=========================================================
  // Operators.
  //

  virtual bool op_init( VMContext* ctx, void* instance, int32 pcount ) const;
  virtual void op_neg( VMContext* ctx, void* instance ) const;
  virtual void op_add( VMContext* ctx, void* instance ) const;
  virtual void op_sub( VMContext* ctx, void* instance ) const;
  virtual void op_mul( VMContext* ctx, void* instance ) const;
  virtual void op_div( VMContext* ctx, void* instance ) const;
  virtual void op_mod( VMContext* ctx, void* instance ) const;
  virtual void op_pow( VMContext* ctx, void* instance ) const;
  virtual void op_shr( VMContext* ctx, void* instance ) const;
  virtual void op_shl( VMContext* ctx, void* instance ) const;
  virtual void op_aadd( VMContext* ctx, void* instance) const;
  virtual void op_asub( VMContext* ctx, void* instance ) const;
  virtual void op_amul( VMContext* ctx, void* instance ) const;
  virtual void op_adiv( VMContext* ctx, void* instance ) const;
  virtual void op_amod( VMContext* ctx, void* instance ) const;
  virtual void op_apow( VMContext* ctx, void* instance ) const;
  virtual void op_ashr( VMContext* ctx, void* instance ) const;
  virtual void op_ashl( VMContext* ctx, void* instance ) const;
  virtual void op_inc( VMContext* vm, void* instance ) const;
  virtual void op_dec(VMContext* vm, void* instance) const;
  virtual void op_incpost(VMContext* vm, void* instance ) const;
  virtual void op_decpost(VMContext* vm, void* instance ) const;
  virtual void op_getIndex(VMContext* vm, void* instance ) const;
  virtual void op_setIndex(VMContext* vm, void* instance ) const;
  // DO NOT override get/set property, as the base Class already makes room for standard
  // search of properties in the parent.
  //virtual void op_getProperty( VMContext* ctx, void* instance, const String& prop) const;
  //virtual void op_setProperty( VMContext* ctx, void* instance, const String& prop ) const;
  //virtual void op_getClassProperty( VMContext* ctx, const String& prop) const;
  //virtual void op_setClassProperty( VMContext* ctx, const String& prop ) const;
  virtual void op_compare( VMContext* ctx, void* instance ) const;
  virtual void op_isTrue( VMContext* ctx, void* instance ) const;
  virtual void op_in( VMContext* ctx, void* instance ) const;
  virtual void op_provides( VMContext* ctx, void* instance, const String& propName ) const;
  virtual void op_call( VMContext* ctx, int32 paramCount, void* instance ) const;
  virtual void op_toString( VMContext* ctx, void* instance ) const;
  virtual void op_iter( VMContext* ctx, void* instance ) const;
  virtual void op_next( VMContext* ctx, void* instance ) const;
  virtual void op_summon( VMContext* ctx, void* instance, const String& message, int32 pCount, bool bOptional ) const;
  virtual void op_summon_failing( VMContext* ctx, void* instance, const String& message, int32 pCount ) const;

  //==============================================================================
  virtual Selectable* getSelectableInterface( void* instance ) const;
};
}

#endif /* CHILDCLASS_H_ */

/* childclass.h */

