<?xml version="1.0" encoding="UTF-8"?>
<configurationDescriptor version="79">
  <logicalFolder name="root" displayName="root" projectFiles="true" kind="ROOT">
    <df name="nengine" root="nengine">
      <df name="clt">
        <df name="falcon">
          <in>falcon.cpp</in>
        </df>
      </df>
      <df name="engine">
        <df name="core_module">
          <in>clone.cpp</in>
          <in>compare.cpp</in>
          <in>coremodule.cpp</in>
          <in>describe.cpp</in>
          <in>len.cpp</in>
          <in>minmax.cpp</in>
          <in>print.cpp</in>
          <in>tostring.cpp</in>
          <in>typeid.cpp</in>
        </df>
        <df name="parser">
          <in>exprarray.cpp</in>
          <in>lexer.cpp</in>
          <in>literal.cpp</in>
          <in>nonterminal.cpp</in>
          <in>parser.cpp</in>
          <in>parser_private.h</in>
          <in>rule.cpp</in>
          <in>state.cpp</in>
          <in>token.cpp</in>
          <in>tokeninstance.cpp</in>
        </df>
        <df name="sp">
          <in>parser_arraydecl.cpp</in>
          <in>parser_assign.cpp</in>
          <in>parser_atom.cpp</in>
          <in>parser_autoexpr.cpp</in>
          <in>parser_call.cpp</in>
          <in>parser_class.cpp</in>
          <in>parser_deletor.cpp</in>
          <in>parser_end.cpp</in>
          <in>parser_expr.cpp</in>
          <in>parser_function.cpp</in>
          <in>parser_if.cpp</in>
          <in>parser_index.cpp</in>
          <in>parser_list.cpp</in>
          <in>parser_proto.cpp</in>
          <in>parser_rule.cpp</in>
          <in>parser_while.cpp</in>
          <in>parsercontext.cpp</in>
          <in>private_types.h</in>
          <in>sourcelexer.cpp</in>
          <in>sourceparser.cpp</in>
        </df>
        <in>accesserror.cpp</in>
        <in>accesstypeerror.cpp</in>
        <in>application.cpp</in>
        <in>autocstring.cpp</in>
        <in>autoucsstring.cpp</in>
        <in>autowstring.cpp</in>
        <in>bom.cpp</in>
        <in>class.cpp</in>
        <in>classarray.cpp</in>
        <in>classbool.cpp</in>
        <in>classdict.cpp</in>
        <in>classfunction.cpp</in>
        <in>classint.cpp</in>
        <in>classnil.cpp</in>
        <in>classnumeric.cpp</in>
        <in>classstring.cpp</in>
        <in>closedsymbol.cpp</in>
        <in>codeerror.cpp</in>
        <in>collector.cpp</in>
        <in>collector_history.cpp</in>
        <in>datareader.cpp</in>
        <in>datawriter.cpp</in>
        <in>directory.cpp</in>
        <in>dynsymbol.cpp</in>
        <in>encodingerror.cpp</in>
        <in>engine.cpp</in>
        <in>error.cpp</in>
        <in>errorclass.cpp</in>
        <in>exprarray.cpp</in>
        <in>exprcall.cpp</in>
        <in>exprcompare.cpp</in>
        <in>exprdict.cpp</in>
        <in>expression.cpp</in>
        <in>exprfactory.cpp</in>
        <in>exprmath.cpp</in>
        <in>exprmultiunpack.cpp</in>
        <in>exprproto.cpp</in>
        <in>exprsym.cpp</in>
        <in>exprunpack.cpp</in>
        <in>exprvalue.cpp</in>
        <in>extfunc.cpp</in>
        <in>falconclass.cpp</in>
        <in>falconinstance.cpp</in>
        <in>falconstate.cpp</in>
        <in>fassert.cpp</in>
        <in>fatal.cpp</in>
        <in>filestat.cpp</in>
        <in>flexyclass.cpp</in>
        <in>flexydict.cpp</in>
        <in>fstream.cpp</in>
        <in>fstream_posix.cpp</in>
        <in>fstream_win.cpp</in>
        <in>function.cpp</in>
        <in>genericerror.cpp</in>
        <in>globalsymbol.cpp</in>
        <in>hyperclass.cpp</in>
        <in>inheritance.cpp</in>
        <in>intcompiler.cpp</in>
        <in>interrupt_posix.cpp</in>
        <in>interrupt_win.cpp</in>
        <in>interruptederror.cpp</in>
        <in>ioerror.cpp</in>
        <in>item.cpp</in>
        <in>item_util.cpp</in>
        <in>itemarray.cpp</in>
        <in>itemdict.cpp</in>
        <in>localsymbol.cpp</in>
        <in>memory.cpp</in>
        <in>metaclass.cpp</in>
        <in>modcompiler.cpp</in>
        <in>module.cpp</in>
        <in>mt_posix.cpp</in>
        <in>mt_win.cpp</in>
        <in>multiclass.cpp</in>
        <in>multiclass_private.h</in>
        <in>operanderror.cpp</in>
        <in>overridableclass.cpp</in>
        <in>paramerror.cpp</in>
        <in>path.cpp</in>
        <in>pcode.cpp</in>
        <in>prototypeclass.cpp</in>
        <in>pseudofunc.cpp</in>
        <in>rampmode.cpp</in>
        <in>reader.cpp</in>
        <in>rulesyntree.cpp</in>
        <in>sourceref.cpp</in>
        <in>statement.cpp</in>
        <in>stdstreams_posix.cpp</in>
        <in>stdstreams_win.cpp</in>
        <in>stmt_init.cpp</in>
        <in>stmtrule.cpp</in>
        <in>stream.cpp</in>
        <in>streambuffer.cpp</in>
        <in>string.cpp</in>
        <in>stringstream.cpp</in>
        <in>symbol.cpp</in>
        <in>symboltable.cpp</in>
        <in>synfunc.cpp</in>
        <in>syntaxerror.cpp</in>
        <in>syntree.cpp</in>
        <in>sys_posix.cpp</in>
        <in>sys_win.cpp</in>
        <in>textreader.cpp</in>
        <in>textwriter.cpp</in>
        <in>timestamp.cpp</in>
        <in>timestamp_posix.cpp</in>
        <in>timestamp_win.cpp</in>
        <in>trace.cpp</in>
        <in>tracestep.cpp</in>
        <in>transcoder.cpp</in>
        <in>transcoderc.cpp</in>
        <in>transcoderutf8.cpp</in>
        <in>unknownsymbol.cpp</in>
        <in>unsupportederror.cpp</in>
        <in>uri.cpp</in>
        <in>vfs_file_posix.cpp</in>
        <in>vfs_file_win.cpp</in>
        <in>vfsiface.cpp</in>
        <in>vfsprovider.cpp</in>
        <in>vm.cpp</in>
        <in>vmcontext.cpp</in>
        <in>writer.cpp</in>
      </df>
      <df name="include">
        <df name="falcon">
          <df name="cm">
            <in>clone.h</in>
            <in>compare.h</in>
            <in>coremodule.h</in>
            <in>describe.h</in>
            <in>len.h</in>
            <in>minmax.h</in>
            <in>print.h</in>
            <in>tostring.h</in>
            <in>typeid.h</in>
          </df>
          <df name="parser">
            <in>lexer.h</in>
            <in>literal.h</in>
            <in>matchtype.h</in>
            <in>nonterminal.h</in>
            <in>parser.h</in>
            <in>rule.h</in>
            <in>state.h</in>
            <in>terminal.h</in>
            <in>token.h</in>
            <in>tokeninstance.h</in>
          </df>
          <df name="sp">
            <in>parser_arraydecl.h</in>
            <in>parser_assign.h</in>
            <in>parser_atom.h</in>
            <in>parser_autoexpr.h</in>
            <in>parser_call.h</in>
            <in>parser_class.h</in>
            <in>parser_deletor.h</in>
            <in>parser_end.h</in>
            <in>parser_expr.h</in>
            <in>parser_function.h</in>
            <in>parser_if.h</in>
            <in>parser_index.h</in>
            <in>parser_list.h</in>
            <in>parser_proto.h</in>
            <in>parser_rule.h</in>
            <in>parser_while.h</in>
            <in>parsercontext.h</in>
            <in>sourcelexer.h</in>
            <in>sourceparser.h</in>
          </df>
          <in>accesserror.h</in>
          <in>accesstypeerror.h</in>
          <in>application.h</in>
          <in>autocstring.h</in>
          <in>autoucsstring.h</in>
          <in>autowstring.h</in>
          <in>bom.h</in>
          <in>callframe.h</in>
          <in>class.h</in>
          <in>classarray.h</in>
          <in>classbool.h</in>
          <in>classdict.h</in>
          <in>classfunction.h</in>
          <in>classint.h</in>
          <in>classnil.h</in>
          <in>classnumeric.h</in>
          <in>classstring.h</in>
          <in>closedsymbol.h</in>
          <in>codeerror.h</in>
          <in>codeframe.h</in>
          <in>collector.h</in>
          <in>common.h</in>
          <in>datareader.h</in>
          <in>datawriter.h</in>
          <in>directory.h</in>
          <in>dynsymbol.h</in>
          <in>encodingerror.h</in>
          <in>endianity.h</in>
          <in>engine.h</in>
          <in>enumerator.h</in>
          <in>error.h</in>
          <in>error_messages.h</in>
          <in>errorclass.h</in>
          <in>exprarray.h</in>
          <in>exprcall.h</in>
          <in>exprcompare.h</in>
          <in>exprdict.h</in>
          <in>expression.h</in>
          <in>exprfactory.h</in>
          <in>exprmath.h</in>
          <in>exprproto.h</in>
          <in>exprsym.h</in>
          <in>exprvalue.h</in>
          <in>extfunc.h</in>
          <in>falcon.h</in>
          <in>falconclass.h</in>
          <in>falconinstance.h</in>
          <in>falconstate.h</in>
          <in>fassert.h</in>
          <in>fatal.h</in>
          <in>filestat.h</in>
          <in>flexyclass.h</in>
          <in>flexydict.h</in>
          <in>fstream.h</in>
          <in>fstream_posix.h</in>
          <in>fstream_win.h</in>
          <in>function.h</in>
          <in>gclock.h</in>
          <in>gctoken.h</in>
          <in>genericerror.h</in>
          <in>globalsymbol.h</in>
          <in>hyperclass.h</in>
          <in>inheritance.h</in>
          <in>intcompiler.h</in>
          <in>interrupt.h</in>
          <in>interruptederror.h</in>
          <in>intmode.h</in>
          <in>ioerror.h</in>
          <in>item.h</in>
          <in>itemarray.h</in>
          <in>itemdict.h</in>
          <in>itemid.h</in>
          <in>localsymbol.h</in>
          <in>locationinfo.h</in>
          <in>memory.h</in>
          <in>metaclass.h</in>
          <in>modcompiler.h</in>
          <in>module.h</in>
          <in>mt.h</in>
          <in>mt_posix.h</in>
          <in>mt_win.h</in>
          <in>multiclass.h</in>
          <in>operanderror.h</in>
          <in>optoken.h</in>
          <in>ov_names.h</in>
          <in>overridableclass.h</in>
          <in>paramerror.h</in>
          <in>paranoid.h</in>
          <in>path.h</in>
          <in>pcode.h</in>
          <in>prototypeclass.h</in>
          <in>pseudofunc.h</in>
          <in>pstep.h</in>
          <in>rampmode.h</in>
          <in>reader.h</in>
          <in>refcounter.h</in>
          <in>refpointer.h</in>
          <in>rulesyntree.h</in>
          <in>setup.h</in>
          <in>sourceref.h</in>
          <in>statement.h</in>
          <in>stdstreams.h</in>
          <in>stmt_init.h</in>
          <in>stmtrule.h</in>
          <in>stream.h</in>
          <in>streambuffer.h</in>
          <in>string.h</in>
          <in>stringstream.h</in>
          <in>symbol.h</in>
          <in>symboltable.h</in>
          <in>synfunc.h</in>
          <in>syntaxerror.h</in>
          <in>syntree.h</in>
          <in>sys.h</in>
          <in>textreader.h</in>
          <in>textwriter.h</in>
          <in>timestamp.h</in>
          <in>trace.h</in>
          <in>tracestep.h</in>
          <in>transcoder.h</in>
          <in>transcoderc.h</in>
          <in>transcoderutf8.h</in>
          <in>types.h</in>
          <in>unknownsymbol.h</in>
          <in>unsupportederror.h</in>
          <in>uri.h</in>
          <in>vfs_file.h</in>
          <in>vfsiface.h</in>
          <in>vfsprovider.h</in>
          <in>vm.h</in>
          <in>vmcontext.h</in>
          <in>writer.h</in>
        </df>
      </df>
      <df name="tests">
        <in>and_test.cpp</in>
        <in>debugtest.cpp</in>
        <in>fact.cpp</in>
        <in>fib.cpp</in>
        <in>intmode.cpp</in>
        <in>looptest.cpp</in>
        <in>ruletest.cpp</in>
        <in>stringtest.cpp</in>
        <in>testparser.cpp</in>
      </df>
    </df>
    <logicalFolder name="ExternalFiles"
                   displayName="Important Files"
                   projectFiles="false"
                   kind="IMPORTANT_FILES_FOLDER">
      <itemPath>CMakeLists.txt</itemPath>
      <itemPath>build_debug/Makefile</itemPath>
    </logicalFolder>
  </logicalFolder>
  <sourceFolderFilter>^(nbproject)$</sourceFolderFilter>
  <sourceRootList>
    <Elem>nengine</Elem>
  </sourceRootList>
  <projectmakefile>build_debug/Makefile</projectmakefile>
  <confs>
    <conf name="Default" type="0">
      <toolsSet>
        <remote-sources-mode>LOCAL_SOURCES</remote-sources-mode>
        <compilerSet>default</compilerSet>
      </toolsSet>
      <makefileType>
        <makeTool>
          <buildCommandWorkingDir>build_debug</buildCommandWorkingDir>
          <buildCommand>${MAKE} -f Makefile -j 3</buildCommand>
          <cleanCommand>${MAKE} -f Makefile clean</cleanCommand>
          <executablePath>build_debug/bin/intmode</executablePath>
          <ccTool>
            <incDir>
              <pElem>nengine/include</pElem>
            </incDir>
            <useLinkerLibraries>false</useLinkerLibraries>
          </ccTool>
        </makeTool>
      </makefileType>
    </conf>
  </confs>
</configurationDescriptor>
