#!/usr/bin/env falcon
/*
   FALCON - The Falcon Programming Language.
   FILE: grack.fal

   Falcon Grammar Definition tool
   ------------------------------------------------------------

   Copyright (C) 2014 Giancarlo Niccolai

   Licensed under the Falcon Programming Language License,
   Version 1.1 (the "License") or GPLv2.0 or following,
   at your choice; you may not use this file except in
   compliance with on of the Licenses. You may obtain
   a copy of the Licenses at

      http://www.falconpl.org/?page_id=license_1_1
      http://www.gnu.org/licenses/old-licenses/gpl-2.0.html

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on
   an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
*/

:author => "Giancarlo Niccolai"
:license => "FPLLv1.1/GPLv2"
:version => "1.0"

import Grammar from parser.grammar
import Parser from parser.genparser as GenParser

import InputStream from vfs
import from cmdline in cl

object Options from cl.Parser
   script = nil
   help = false
   generate = false
   grammarOnly = false
   printVersion = false
   verbose = false
   dump = false
   
   parseThrough = []   
   
   function onOption( option )
      switch option
         case "?", "help"
            self.usage()
         case "g"
            self.generate = true
         case "d"
            self.dump = true
         case "n"
            self.grammarOnly = true
         case "v"
            self.printVersion = true
         case "V"
            self.verbose = true
            
         case "p"
            self.expectValue()

         default
            self.unrecognized( option )
      end
   end
      
   function onValue( option, value )
      switch option
         case "p"
            self.parseThrough += value
      end
   end
   
   function onFree( param )
      > "On free: ", param
      if self.script
         > "Can process one script at a time only"
         quit(1)
      end
      
      self.script = param
   end


   function onSwitchOff( sw )
   end

   function unrecognized( option )
      printl( "Unrecognized option \"", option, "\"\n" );
      self.usage()
      quit(0)
   end

   function usage()      
      printl('
     -?,--help       Prints this help
     -g              Generate an EBNF tree in output.
     -n              Ignore script snippets.
     -d              Dump the rendering of the grammar file.
     -p <input>      Process the given file through the given grammar.
     -v              Print version.
     ')
   end

   function version()
      > "The Falcon Programming Language"
      > "  grack - Grammar Checker v. ", Module.current.getAttribute("version")
   end
   
end

//====================================================
// Main program
//====================================================

Options.parse(args)
if not Options.script
   > @"Usage: ${Module.current.uri} [options|-?] <file.fgd>"
   return 1
end

if Options.printVersion: Options.version()

try
   parsed = InputStream(Options.script)
catch in e
   > "ERROR while opening the grammar file: "
   > e.toString()
   return 1
end

x = GrammarParser()
if Options.verbose
   > "Going verbose"
   x.verbose = true
end

grammar = x.parse( TextReader(parsed, "utf8") )
if grammar
   
   if not Options.grammarOnly
      x.compileSnippets( grammar )
   end
   
   if Options.dump
      grammar.dump(VMProcess.current.stdOut())
   end
   
   for file in Options.parseThrough
      parseFile( grammar, file )
   end
else
   > "Errors: ", x.errors
end

//====================================================
// Utilities
//====================================================

function parseFile( grammar, file )
   > "="*70
   > "Processing input file ", file
   >
   
   // open the file
   try
      inp = InputStream( file )
   catch in e
      > "Cannot open input file: "
      > e.toString()
      return
   end
   
   // open the grammar
   try
      //inspect(grammar)
      //> "DERIVED: ", grammar.derivedFrom(Grammar)
      parser = GenParser(grammar)
   catch in e
      > "Malformed grammar for the generic parser: "
      > e.toString()
      return 
   end
   
   try
      // process the input
      parser.parse(TextReader(inp,"utf8"))
   catch in e
      > "Error while parsing the stream: "
      > e.toString()
   end
end

// end

