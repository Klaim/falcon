#!/usr/bin/falcon
/*
   FALCON - Documentation tool

   FILE: faldoc.fal

   Autodocumentation tool - main file
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Thu, 10 Jan 2008 08:12:57 -0800

   -------------------------------------------------------------------
   (C) Copyright 2008: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

load compiler
load self.version
load self.config
load self.document

resources: "resources/*"


//================================================
// Application class
//================================================

class Application
   version = "3.0"
   
   fdfile = nil
   errorCount = 0
   warnCount = 0
   
   quietLevel = 100
   config = nil

   document = nil

   //# Application process
   function go()
      try
         self.processParams()
         self.banner()
         self.readConfig()
         self.processInput()
         
      catch in e
         self.fatal( e.toString() )
      end
   end

   //=================================================================
   // Process steps
   //=================================================================
   
   function processParams()
      // get minimal parameters
      self.fdfile = args.len() == 0 ? "faldoc.fd" : args[0]
   end
   
   function banner()
      > i"faldoc - Falcon documentation tool."
      > i"Part of the Falcon Programming language."
      > i"Version ", version.name()
      > "----------------------------------------"
   end

   function readConfig()
      self.config = Config()
      if not self.config.read( self.fdfile )
         self.fatal( i"Errors in configuration" )
      end
   end

   function processInput()
      self.initDocument()
      
      cfg = self.config
      doc = self.document
      basedir = cfg.basedir
      
      for dir in cfg.inputDirs
         // open the directory
         try
            hdir = Directory( basedir + "/" + dir ).descend( {=>}, {fname =>
               for wildcard in cfg.inputWild
                  if strWildcardMatch( fname, wildcard )
                     doc.addFile( fname )
                  end
               end
               })
         catch IoError in err       
            raise "can't read directory \""+basedir + "/"+dir+"\" in input dirs."
         end
      end

      // parse extra files
      for extra in cfg.inputExtra
         doc.addFile( basedir + "/" + extra )
      end
   end

   function initDocument()
      cfg = self.config
      
      doc = Document()
      doc.title = cfg.title
      doc.author = cfg.author
      doc.version = cfg.version

      self.document = doc
   end

   //=================================================================
   // Utilities
   //=================================================================

   //# function to generate a fatal error
   function fatal( error )
      self.display( 0, "faldoc: FATAL - " + error )
      exit(0)
   end

   //# function to generate an error
   function error( e )
      self.display( 1, "faldoc: ERROR - " + e )
      self.errorCount++
   end

   //# function to generate a warning
   function warn( e )
      self.display( 2, "faldoc: WARN - " + e )
      self.warnCount++
   end

   //# function to send an info
   function info( i )
      self.display( 3, "faldoc: " + i )
   end

   //# funciton to display an information message
   function display( level, msg )
      if level < self.quietLevel
         > msg
      end
   end

   function result()
      if self.warnCount or self.errorCount
         self.info( "="*60 )

         self.info( "Detected " + self.errorCount + "warnings." )
         
         if self.errorCount
            self.info( "Terminating with " + self.errorCount + "errors." )
            return 1
         else
            self.info( "Done." )
         end
      else
         self.info( "\nDone." )
         return 0
      end
   end
end


//================================================
// Main code
//================================================

faldoc = Application()
faldoc.go()
return faldoc.result()

/*
// Fine, we can create a basic doctree
docdata = DocData()
// Functions raise strings to cause fatal errors.
try
   // process configuration for basic parameters
   processConf( docdata, conf )
   // process the input files
   processInput( docdata, conf, basedir )
   docdata.entities = EntityDB
   // process the output files
   processOutput( docdata, conf )
catch StringType in error
   > i"faldoc: FATAL ERROR - ", error
   exit(1)
catch in error
   > i"faldoc: FATAL ERROR - Rised an exception:"
   > error
   exit(1)
end

> "faldoc: done."
return 0
*/


//================================================
// Process Input
//================================================
/*
function processInput( doctree, conf, basedir )
   
   for dir in inputDirs
      // open the directory
      try
         hdir = Directory( basedir + "/" + dir ).descend( {=>}, {fname =>
            for wildcard in inputWild
               if strWildcardMatch( fname, wildcard )
                  
                  fileParse( fname )
               end
            end
            })
      catch IoError in err
         raise "can't read directory \""+basedir + "/"+dir+"\" in input dirs."
      end
   end

   // parse extra files
   extraFiles = conf.getMultiple( "Input.extra" )
   for extra in extraFiles
      fileParse( basedir + "/" + extra )
   end

   // and order data
   // EntityDB.complete()
end
*/

//================================================
// Process Output
//================================================
/*
function processOutput( doctree, conf )

   // determine the path of our modules
   path = Path( scriptPath ).fulloc
   if not path: path = "."

   // create the compiler
   compiler = Compiler( path )

   for mod in outMods
      try
         modData = compiler.loadByName( "self.output." + mod )
         faldoc_output = modData.get( "faldoc_output" )
         if not isCallable( faldoc_output )
            raise "module '"+ mod + "' doesn't define 'falcon_output' entry point"
         end

         // perform call

         faldoc_output( doctree, firstOf(conf.getCategory("Output."+mod+".*"),[=>]) )

         // unload the module
         modData.unload()

      catch IoError in error
         // signal an abnormal exit
         raise "Cannot find or load module (faldoc_output_)"+mod
      end
      // let any other error through to be catched by the main try.
   end
end
*/
// Export the global faldoc entity
export faldoc

/* end of faldoc */
