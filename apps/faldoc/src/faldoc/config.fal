/*
   FALCON - Documentation tool

   FILE: config.fal

   Configuration options
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Tue, 28 Sep 2010 12:53:35 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from confparser in confparser

class Config
   title = nil
   author = nil
   version = nil
   properties = nil
   
   //# Base directory of the documentation tree.
   basedir = nil

   //# Input directory -- defaults to "."
   inputDirs = nil

   //# Module topmost directories
   moduleRoots = nil

   // Input file wildcard; defaults to "*.fal"
   inputWild = nil

   // Input extra files
   inputExtra = nil
   
   //# input recursive -- defaults to true
   recursive = nil

   //#using autobrief ?
   autobrief = nil
   
   //# List of output modules to be used to generate output
   outMods = nil

   //# Log level
   loglevel = nil

   //#configuration file
   cfile = nil

   //# get undocumented
   getundoc = nil

   //# get private members
   getprivate = nil


   //# Reads the configuration file.
   function read( fdfile )
      // get config
      try
         conf = confparser.ConfParser( fdfile )
         conf.read()
         self.cfile = conf
         
      catch IOError in error
         faldoc.fatal( i"Invalid input file $(fdfile)" )
         return false
      catch in error
         faldoc.fatal( i"Error in reading the configuration file:\n$(error)" )
         return false
      end

      r = self.configure( fdfile, conf )
      return r
   end
   

   function configure( fdfile, conf )
      self.checkPrerequisites( conf )
      self.calcBaseDir( fdfile, conf )
      self.getGeneralSettings( conf )
      self.getInputSettings( conf )
      self.getOutputSettings( conf )

      return true
   end


   function checkPrerequisites( conf )
      // then, we need at least one output
      if not conf.get("Output.module" )
         faldoc.fatal( i"At least one 'Output.module' key is necessary." )
      end
   end


   function calcBaseDir( fdfile, conf )
      path = Path( fdfile )
      basedir = conf.get( "Input.basedir" )
      if not basedir: basedir = path.fulloc
      if basedir == nil or basedir == "": basedir ="."

      self.basedir = basedir
   end
   

   function getGeneralSettings( conf )
      // get the essentials
      if not (self.title = conf.getOne( "Title" ))
         faldoc.fatal( i"Title key missing from configuration" )
      end

      if not (self.author = conf.getOne( "Author" ))
         faldoc.fatal( i"Author key missing from configuration" )
      end

      if not (self.version = conf.getOne( "Version" ))
         faldoc.fatal( i"Version key missing from configuration" )
      end

      // get the properties.
      self.properties = conf.getCategory( "Property.*" )

      // autobrief
      self.autobrief = self.checkBool( "AutoBrief", false )

      // get undocumented
      self.getundoc = self.checkBool( "GetUndoc", false )

      // get private members
      self.getprivate = self.checkBool( "GetPrivate", false )

      try
         self.loglevel = int(firstOf( conf.getOne( "LogLevel" ), 3 ))  // default info
      catch
         faldoc.fatal( i"Loglevel key must be an integer" )
      end
   end

   function getInputSettings( conf )
      // Input directory -- defaults to "."
      self.inputDirs = firstOf(conf.getMultiple( "Input.directory" ), ["."])
      self.moduleRoots = firstOf(conf.getMultiple( "Input.moduleRoot" ), [])
      
      // Input file wildcard; defaults to "*.fal"
      self.inputWild = firstOf(conf.getMultiple( "Input.wildcard" ), ["*.fal"])
      // input recursive -- defaults to true
      self.recursive = self.checkBool( "Input.recursive", true )
      // input extra files
      self.inputExtra = conf.getMultiple( "Input.extra" )
   end

   function getOutputSettings( conf )
      // get the modules -- we know it's here, processConf checks it
      self.outMods = conf.getMultiple("Output.module")
   end

   //=========================================================
   // More utilities
   //=========================================================
   function checkBool( key, dflt )
      value = self.cfile.getOne( key )
      if not value: return dflt
      
      v = value.lower()
      if v == "on" or v == "true": return true
      if v == "off" or v == "false": return false
      faldoc.fatal( i"Invalid value for configuration key " + key )
   end
   
end

export Config
