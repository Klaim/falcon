/*
   FALCON - Documentation tool

   FILE: docmodule.fal

   Autodocumentation tool - Module representation in a document.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Thu, 30 Sep 2010 19:07:41 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

load .docentity
load .link

/*# Document module.

   A document module may represent a chapter or a module to be added to the
   documentation.

   Virtual modules are created out of module hierarcies on filesystem, and are
   usually flattened in documentation. For example, modules as web.alpha and web.beta
   belong to the "web" module, but unless there is specific content for the "web" module,
   it is considered virtual. This means that "web.alpha" and "web.beta" are generated
   directly under the parent of the "web" module. Conversely, if "web" has a main page
   and/or a title, or if it has any child which is not a module (i.e. a page, a class,
   a function etc), then it is considered a real module, and a documentation for "web"
   is generated. In this latter case, web.alpha and web.beta are placed at a lower level
   in the documentation, as "web" DocModule elements.

   A DocModule may also considered a separate section of the documentation, with its own
   pages (chapters), functions, groups and funcsets.
*/
class DocModule( name ) from Entity
   //# Title of the module
   title = nil

   //# Missing entities as local ID -> link
   missing = [=>]

   //# Main page of the module, if any
   main = nil

   //# is this a "virtual module" -- a module without contents except for other modules?
   isVirtual = true

   init
      self.name = name ? name : "Main module"
      self.type = "module"
   end

   //# Gets an entity from this module (possibly undefined)
   function getEntity( name, type )
      if name notin self.members
         e = Entity( "", self.file, 0 )
         e.name = name
         e.type = type
         e.automatic = true
         if not self.members: self.members = [=>]
         self.members[name] = e
         e.parent = self
      else
         e = self.members[name]
      end

      return e
   end

   //# Returns the meta-pages respecting their required order.
   function orderPages()
      pages = []
      groups = []
      funsets = []
      modules = []
      for name, entity in self.members
         switch entity.type
            case "main"
               pages[0:0] = entity
            case "page"
               pages += entity
            case "group"
               groups += entity
            case "funset"
               funsets += entity
            case "module"
               if entity.after
                  modules += entity
               end
         end
      end

      // ok, now see if we must reorder something
      allpages = pages + groups + funsets + modules
      /*for entity in allpages
         forfirst: >> "Entities in ", self.name, ": "
         >> entity.name
         formiddle:>> ", "
         forlast: >"."
      end
      */

      ppage = 0
      l = allpages.len()
      while ppage < l
         entity = allpages[ppage]
         after = entity.after
         // sanitize main
         if after== "#main": after = "main"

         // adjust @after main
         if after == "main"
            // ppage starts from 1, while main a virtual page
            pp1 = 0
            // prevent endless loop if more than one after main is found
            while allpages[pp1].after == "main" and pp1 < ppage
               ++pp1
            end

            if pp1 < ppage
               allpages.remove( ppage )
               allpages[pp1:pp1] = entity
            end

            ++ppage
            continue
         end

         // should we reorder it?
         if after and (ppage == 0 or allpages[ppage-1].name != after)
            // get the entity
            if after notin self.members
               faldoc.error( @i"Entity $(entity.name) should be after $(after), but \"$(after)\" is not in module $(self.name)",
                  entity.firstline )
               ppage ++
               continue
            end

            etgt = self.members[ after ]
            // but where is this entity?
            ptgt = allpages.find( etgt )
            if ptgt < 0
               faldoc.error( @i"Entity $(entity.name) should be after $(entity.after), but that is not a meta-page", entity.firstline )
               ppage++
               continue
            end

            // and now reorder!
            allpages.remove( ppage )
            // We must insert after the found element, which may be shifted 1 back if it's after our point
            ptgt_pos = (ptgt > ppage ? ptgt : ptgt+1)
            allpages[ptgt_pos:ptgt_pos] = entity
            // -- for the same reason, we may need not to increment if we have removed an element.
            if ptgt < ppage: ppage ++
            continue
         end

         ppage ++
      end

      // ok, pages are re-ordered
      return allpages
   end


   function checkUndefined()
      // No entites should have automatic setting turned on at end, except for modules.
      for name, entity in self.members
         if entity.type == "module"
            entity.checkUndefined()
         else
            if entity.automatic
               if entity.members
                  mbfirst = entity.members.first().value()
                  line = mbfirst.firstline
                  file = mbfirst.file
               else
                  line = 0
                  file = self.file
               end

               faldoc.error( @i"Entity \"$(entity.name)\" was indirectly invoked but never defined in $(self.name)", line, file )
            end
         end
      end
   end

   /*# Adds a member to this module.

       If the member is a main page, it is assigned to the text and
       title of this module.

       In this case, or if the added member is not a module, this module
       becomes non-virtual, and will generate a new documentation level.
   */
   function addMember( entity )
      if entity.type == "main"
         faldoc.verbose( "Setting main page for module $(self.name)" )
         self.main = entity
         self.title = entity.props["title"]
         self.after = entity.after
         self.isVirtual = false
      else
         self.Entity.addMember( entity )
         if entity.type != "module"
            self.isVirtual = false
         end
      end
   end

   //# Gets the modules in this element.
   function getModules( alsoAfter )
      mods = [=>]
      for name, m in self.members
         if m.type == "module" and (alsoAfter or not m.after)
            mods[ m.getID() ] = m
         end
      end
      return mods
   end

   //# Recursively gets all the modules stored in the document.
   function getAllModules()
      return self._getAllModules( self )
   end

   function _getAllModules( module )
      mods = [=>]
      for name, m in module.members
         if m.type == "module"
            mods[ m.getID() ] = m
            mods += self._getAllModules( m )
         end
      end
      return mods
   end

end

export
