/*
   FALCON - Documentation tool

   FILE: filecontext.fal

   Autodocumentation tool - Documentation data relative to a single
   input file.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Wed, 29 Sep 2010 10:05:06 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from parser.faldoc.txt
import from .docentity

/*#
   Documentation data relative to a single input file.

*/
class FileContext( file )
   file = file
   ctx = nil

   //# Identifier of the current file -- used to prefix entities in this file.
   fileID = ""

   //# Entities of this file.
   entities = [=>]

   //# Parser used by this file
   parser = parser.faldoc.txt.Parser()

   //# Parent entity, used when parsing sub-contexts
   parent = nil

   //# Parsing a context into entities.
   function parse( ctx )
      self.ctx = ctx
      node = ctx.topNode.firstChild
      entity = nil
      
      while node != nil
         > "Node at line ", node.infos["line"]
         if node.type == "faldoc_txt"
            // parse the content of this text entity
            cnt = node.content
            line = node.infos["line"]
            entity = self.parseText( cnt, line )
         else
            // have we a textual entity we want to post-process?
            if entity
               self.apply( node, entity )
               // the text entity is discharged
               entity = nil
            else
               // create a new entity of the specified type.
               self.createEntity( node )
            end
         end
         
         node = node.next
      end

      // finally, when we know who we are, store our entities in the global db.
      self.storeEntities()
   end


   /*# Parse a textual entity.
      @param cnt The text of the entry
      @param line The line where the text is declared in this file
   */
   function parseText( cnt, line )
      p = self.parser
      try
         ectx = p.parse( cnt )
         entity = docentity.Entity( cnt, self.file, line)
         entity.pcontent = ectx
         entity.parseContent()

         // is the entity complete enough?
         // a textual entity can declare its name only if it already has a type.
         if entity.name
            self.addEntity( entity )
         end

         return entity
      catch ParseError in e
         faldoc.error( @i"while parsing entity at line $(line) in $(file):\n$e" )
         return nil
      end
   end

   //# Stores a new entity in the entity database.
   function addEntity( entity )
      > "Adding entity ", entity.type
   end

   //# Configures an entity with non-textual data.
   function apply( node, entity )
   end

   //# Creates an entity out of a non-text definition
   function createEntity( node )
      switch node.type
         case "class"
            > "Found a class"
         case "function"
            > "Found a function"
         case "object"
            > "Found an object"
         case "variable"
            > "Found a variable"
         case "enum"
            > "found an enum"
      end
   end
   

   //# Store entities in the global database
   function storeEntities()
   end
end

export FileContext