/*
   FALCON - Documentation tool

   FILE: docentry.fal

   Autodocumentation tool - basic entry item.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sat, 23 May 2009 12:19:38 +0200

   -------------------------------------------------------------------
   (C) Copyright 2009: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from struct.tree

/*# Entity class.

   A document entity is a single entry in the documentation
   file. It can be a page, a section, a class, an object,
   a function, a method, or in general any entity that can be
   indexed and cross-linked.

   An entity is made of multiple paragraph and has multiple
   properties. It's type and name cannot always be determied
   at creation (actually, that is rare), and is usually
   assigned after the whole entity documentation text have
   been parsed.

   Entities can be hierarchically organized into different
   relationship groups:
   - parent - children; ownership relationship, like properties and methods for classes.
   - group - members: Multiple grouping where each group can have a list of members, but
     a member can be present in multiple groups.s

   Parent-children relationships are described through a pair of property
   (parent and children), while grouping is expressed through entries in
   the @a self.props property (with the property "in<entity type>" => "<entity id>".

   The @a self.props property contains many important elements, as the parameters.
   Parameters entry (under props
*/

class Entity( content, file, line )

   //# Type of the entity
   type = nil
   /*# Local name of the entity. */
   name = nil
   /*# Filename where the entity is coming from. */
   file = file
   
   /*# First line of comment declaration of the entity. */
   firstline = line

   /*# Line at which the entity is defined at language level (if any). */
   dline = nil

   props = bless([=>])

   //# Parent of this entity
   parent = nil

   /*# Parsed content.
      Documentation of the entity parsed as an infonode.
   */
   pcontent = nil

   //# Textual (unparsed) content. For debugging and reference
   content = content

   //# Non-child members (for entities with grouping abilities)
   members = nil

   //# True when this entity was created because of a supposed reference
   automatic = false

   //# used to determine if an empty entity should be marked as an error
   hadSimple = false

   //# used to determine if an empty entity should be marked as an error
   hadComplex = false

   //# after -- an ID (local to the owner module) for a page-entity to be placed after.
   after = nil

   id = 0
   static lid = 0
   
   init
      self.id = self.lid++
   end
   
   //# Copy an existing entity
   function declareAs( other )
      self.type = other.type
      self.file = other.file
      self.firstline =  other.firstline
      self.dline = other.dline
      self.props = other.props
      self.pcontent = other.pcontent
      self.content = other.content
      self.after = other.after
      if other.members
         if self.members
            self.members += other.members
         else
            self.members = other.members
         end
      end
      self.automatic = false
   end

   //# Calculates the unique ID of this node.
   function getID()
      if self.parent
         id = self.parent.getID()
         if id: return id + "." + self.name
      end

      return self.name == "Main module" ? "" : self.name
   end

   function getName()
      if "owner" in self.props
         return self.parent.name + "." + self.name
      else
         return self.name
      end
   end

   /*# Processess the commands in the parsed content block.
      @param onGroupingChange callback receiving line, command and name in case of grouping commands.
      @param entityAdder A callable that will be called back if the parser finds something to be added.
      @return false if this entity is actually a set of document-wide command and should not be considered
              a real document entity.
              
              
      @note Interesting commands are at top level. Everything else (inline commands)
      is expanded by the generic parser into DOM entities or is made to "stand out".
   */
   function parseContent( onGroupingChange, entityAdder )
      self.parseNodeContent( self.pcontent.topNode.firstChild, onGroupingChange, entityAdder )
   end

   function parseNodeContent( node, onGroupingChange, entityAdder )
   
      while node != nil
         
         // go deep before proceeding
         if node.firstChild
            self.parseNodeContent( node.firstChild, onGroupingChange, entityAdder )
         end

         line = (node provides infos) ? (node.infos["line"] + self.firstline - 1) : self.firstline

         hadSimple = false
         hadComplex = false
         //> "Node ", node.parent.type + "." + node.type + (node provides infos and "name" in node.infos ? ": " + node.infos["name"] : "")
         switch node.type
            case "@a"
               l = faldoc.document.addLink( self, line, node.infos["dest"], true )
               node.infos["link"] = l
               node = node.next

            case "@after"
               self.after = node.infos["dest"]
               node = node.remove()
               
            case "@raise", "@from", "@see"
               l = faldoc.document.addLink( self, line, node.infos["what"], node.type == "@see" )
               // we trick the system a bit and send a link instead of a name here.
               // however, it's ok and wors as expected
               self.addParam( node.type[1:], l, node, line )
               node = node.remove()
               hadComplex = true
               
            case "@brief", "@return"
               type = node.type[1:]
               if type in self.props
                  faldoc.error( @i"Command @$type already declared for entity", line )
               else
                  self.props[ type ] = node
               end
               node = node.remove()
               hadComplex = true

            case "@param", "@optparam"
               self.addParam( node.type[1:], node.infos["name"], node, line )
               node = node.remove()
               hadComplex = true

            case "@prop"
               // simple declaration of class properties
               prop = Entity( "", self.file, line )
               prop.type = "property"
               prop.name = node.infos["name"]
               prop.pcontent = self.pcontent.baseClass()()
               prop.props["owner"] = self.name

               n1 = node.remove()
               node.prev = node.next = node.parent = nil
               node.type = "para"
               prop.pcontent.add( node )
               
               prop.parseContent( onGroupingChange, entityAdder )
               entityAdder( prop )
               node = n1
               hadComplex = true

            case "@inset", "@ingroup"
               if "inset" in self.props or "ingroup" in self.props
                  faldoc.error( "Grouping option already declared for this entity", line )
               else
                  self.props[node.type[1:]] = node.infos["name"]
               end
               node = node.remove()
               hadComplex = true
            
            case "@inmodule"
               if self.parent
                  faldoc.error( "Parent already declared for entity \"$name\"", line)
               else
                  self.parent = faldoc.document.getModule( node.infos["name"] )
               end
               node = node.remove()
               hadComplex = true

            case "@begingroup", "@beginset", "@beginmodule", "@beginignore"
               onGroupingChange( line, node.type, node.infos["name"] )
               node = node.remove()
               hadSimple = true
               
            case "@endgroup", "@endset", "@endmodule", "@endignore"
               onGroupingChange( line, node.type, nil )
               node = node.remove()
               hadSimple = true
               
            // we have the type defined!
            case "@class", "@function", "@object", "@enum", "@global"
               self.name = node.infos["name"]
               self.type = node.type[1:]
               node = node.remove()
               hadComplex = true

            case "@method", "@property"
               self.name = node.infos["name"]
               self.type = node.type[1:]
               self.props["owner"] = node.infos["class"]
               node = node.remove()
               hadComplex = true

            case "@page"
               self.name = node.infos["name"]
               self.type = "page"
               self.props[ "title" ] = node.infos["title"]
               node = node.remove()
               hadComplex = true

            case "@group", "@funset"
               self.name = node.infos["name"]
               self.type = node.type[1:]
               self.props[ "title" ] = node.infos["title"]
               node = node.remove()
               hadComplex = true

            case "@main"
               self.name = "#main"
               self.type = "main"
               self.props["title"] = node.infos["title"]
               node = node.remove()
               hadComplex = true

            case "@ignore"
               self.type = "ignore"
               hadSimple = true

            case "@module"
               name = node.infos["name"]
               module = faldoc.document.getModule( name )
               if not module: return
               if not module.automatic
                  // someone already created it.
                  faldoc.error( @i"Module $(name) already created", line )
               else
                  module.automatic = false
                  // if it's automatic, it can't have a main page.
                  self.name = "#main"
                  self.type = "main"
                  self.props["title"] = node.infos["title"]
                  self.parent = module
                  module.main = self
                  module.title = node.infos["title"]
                  // this will turn us in the main for the given module at return.
               end

               self.props["title"] = node.infos["title"]
               node = node.remove()
               hadComplex = true

            case "cmd_unrecognized"
               command = node.infos["cmd"]
               faldoc.error( @i"Unrecognized command \"$command\"", line )
               node = node.remove()

            default
               node = node.next
         end
      end

      if hadComplex: self.hadComplex = true
      if hadSimple: self.hadSimple = true
   end


   /*# Indicates if this entity just contained file-level commands.

      If true, then it is not an error if this entity results empty after parsing.

      It means that it was there just as a place where to call this commands, and was
      not intended to create an entity that was left undefined.
   */
   function wasASimpleCommand()
      return self.hadSimple and not self.hadComplex
   end
      

   //# Adds a parameter or similar multiple entry in properties.
   function addParam( type, name, content, line )

      // First, a special control for parameters and optional parameters which relate to each other
      if type == "param" and "optparam" in self.props and arrayScan( self.props["optparam"], {elem => elem[0] == name} ) >= 0
         faldoc.error( @i"Parameter \"$name\" of type already declared as optparam", line )
         return
      elif type == "optparam" and "param" in self.props and arrayScan( self.props["param"], {elem => elem[0] == name} ) >= 0
         faldoc.error( @i"Optional parameter \"$name\" of type already declared as parameter", line )
         return
      end

      // the add the property
      if type in self.props
         vt = self.props[type]

         if arrayScan( vt, {elem => elem[0] == name} ) >= 0
            faldoc.error( @i"Property \"$name\" of type \"$type\" already declared", line )
         else
            vt.add( [name, content] )
         end
      else
         self.props[type] = [[name, content]]
      end
      
   end

   //# Adds a parameter declared in the function prototype
   function addFoundParam( name, content, line )
      vtp = "param" in self.props ? self.props["param"] : nil
      vto = "optparam" in self.props ? self.props["optparam"] : nil

      foundParam = vtp and arrayScan( vtp, {elem => elem[0] == name} ) != -1
      foundOpt = vto and arrayScan( vto, {elem => elem[0] == name} ) != -1

      if not foundParam and not foundOpt
         faldoc.warn( @i"Formal parameter \"$name\" not referenced in text block", line )
         self.addParam( "param", name, nil, line )
      end
   end

   //# adds an entity to this entity
   function addMember( entity )
      if not entity.name
         faldoc.fatal( @i"Adding an unknown entity to its parent $self.name", entity.firstline )
      end

      faldoc.verbose( @i"Adding entity $entity.name to $self.name", entity.firstline )
      
      if entity.name in self.members
         // entity already declared; but -- is this an automatic definition?
         if entity.automatic
            // strange; we should have taken the real entity
            faldoc.error( @i"Entity \"$entity.name\" referenced as automatic but was already declared in \"$self.name\"", entity.firstline )
            > fself.stack()
         else
            // Was the previously declared entity automatic?
            preve = self.members[ entity.name ]
            if preve.automatic
               // warn if found with different type
               if preve.type != nil and preve.type != entity.type
                  faldoc.warn( @i"Entity \"$entity.name\" was referenced in \"$self.name\" with different type: ($preve.type)", entity.firstline )
               end
               // but go on the same.
               preve.declareAs( entity )
            else
               // a real error -- two entities explictly declared with the same name.
               faldoc.error( @i"Entity \"$entity.name\" already declared in module \"$self.name\"", entity.firstline )
            end
         end

         // in either case
         return
      end

      // add the entity
      if not self.members: self.members = [=>]
      self.members[entity.name] = entity
   end

   //# Returns all the members of this entity grouped by their type.
   function membersByType()
      data = [=>]
      for name, member in self.members
         if member.type in data
            data[member.type].add( member )
         else
            data[member.type] = [member]
         end
      end
      return data
   end

   function getPropsAndMethods()
      props = []
      methods = []
      for m,v in self.members
         if v.type == "property"
            props += v
         else
            methods += v
         end
      end
      return [props, methods]
   end


   function prototype()
      pars = ""
      if "param" in self.props
         pars = ", ".merge(map( {x=> x[0]}, self.props["param"]))
      end
      if "optparam" in self.props
         if pars: pars += ", "
         pars += ",".merge( map( {x=> "[" + x[0] + "]"}, self.props["optparam"]) )
      end

      name = self.getName()
      if pars
         return name + "( " + pars + " )"
      else
         if self.type == "function" or self.type == "method"
            return name + "()"
         else
            return name
         end
      end
   end

   
   function getDescendant( tgtname )
      pt = tgtname.find( "." )
      if pt > 0
         name = tgtname[0:pt]
         rest = tgtname[pt+1:]
      else
         name = tgtname
         rest = nil
      end

      if name in self.members
         child = self.members[name]
         if rest
            return child.getDescendant( rest )
         else
            return child
         end
      end

      // no luck
      return nil
   end

   function dump( level )
      if not level: level = 0
      > " " * level, self.id, " ", self.type, " ", self.name, " - ", self.file, ":", self.firstline
      for n, v in self.members
         v.dump( level + 1 )
      end
   end

   //# Groups the entities by type
   function groupEntities()
      data = [=>]
      for e, entity in self.members
         if entity.type in data
            data[entity.type].add(entity)
         else
            data[entity.type] = [entity]
         end
      end
      return data
   end

   
end


export
