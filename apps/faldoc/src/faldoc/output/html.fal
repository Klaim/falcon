/*
   FALCON - Documentation tool

   FILE: faldoc_output_html.fal

   Autodocumentation tool - HTML output module
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sat, 12 Jan 2008 12:21:30 +0100

   -------------------------------------------------------------------
   (C) Copyright 2008: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from web.htmaker in ht
import from parser.render.html in render
import from struct.tree in tree

load vfs

// global location for our generator
_generator = nil

_fatness = [
            "object" => true,
            "class" => true,
            "enum" => true,
            "group" => true,
            "page" => true,
            "funset" => true,
            "main" => true,
            "module" => true ]
            
//# A page in our final documentation
//# The content may be a single entity 
class Page(title, file, master_entity ) from tree.Node
   content = master_entity
   title = title
   file = file

   doc = nil
   stream = nil

   //# open this page
   function openDoc()
      file = OutputStream( _generator.directory + "/" + self.file )
      file.setEncoding( _generator.encoding )
      self.stream = file
      self.doc = _generator.htframe()
      self.doc.html.head = self.makeHead( _generator.doc.title, self.title )
   end

   //#close this page
   function closeDoc()
      self.doc.render( self.stream )
      self.stream.close()
   end
   
   function makeHead( category, itemName )
      title = category + itemName ? " - " + itemName : ""

      return ht.Head().add(
         ht.Meta( nil, @"text/html;charset=\"$(_generator.encoding)\"", "Content-type" ),
         ht.Link( "faldoc.css", "stylesheet", "text/css"),
         ht.Title( title ))
   end

   //# To be overridden by subclasses
   function makeBody( body )
      body.add( ht.P().add( "Unknown page type. You must override this page." ) )
   end

   //# To be called to make this page
   function make()
      self.openDoc()
      
      body = ht.Body().CLASS("faldoc")
      navi = self.makeNavi()
      navi.CLASS( "navi_top" )
      body.add( navi )

      div = ht.Div().id("page_body")
      self.makeBody( div )
      body.add( div )

      navi = self.makeNavi()
      navi.CLASS( "navi_bottom" )
      body.add( navi )
      self.makeSignature( body )
      
      self.doc.html.body = body 
      self.closeDoc()
   end

   function makeSignature( body )
      body.add( ht.Div().CLASS("signature").add( "Made with " ).add( ht.A( "faldoc 3.0", "http://www.falconpl.org" ) ) )
   end
   
   //# Creates the navigation div
   function makeNavi()
      div = ht.UL()

      // top node
      node = self.parent
      while node and node.parent
         node = node.parent
      end

      if node
         self.makeNaviItem( div, node , "top", i"Top" )
      end

      // up node
      if self.parent and self.parent != node
         self.makeNaviItem( div, self.parent, "up", i"Up" )
      end

      // prev-next pair
      
      if self.prev
         self.makeNaviItem( div, self.prev, "prev", i"Previous" )
      elif self.parent
         self.makeNaviItem( div, self.parent, "prev", i"Previous" )
      else
         div.add( ht.LI().CLASS("prev") )
      end
      

      if self.firstChild
         self.makeNaviItem( div, self.firstChild, "next", i"Next" )
      elif self.next
         self.makeNaviItem( div, self.next, "next", i"Next" )
      else
         node = self.parent
         while node and not node.next
            node = node.parent
         end

         if node
            self.makeNaviItem( div, node.next, "next" )
         else
            div.add( ht.LI().CLASS("next") )
         end
      end
      
      div.add( ht.LI().CLASS("clear") )

      return div
   end

   function makeNaviItem( div, page, cls, title )
      desc = page.title
      if desc.len() > 36: desc = desc[0:34] + "..."
      if title: desc = title + ": " + desc
      div.add( ht.LI().CLASS(cls).add(ht.A( page.file, desc ) ) )
   end
   
   
end


class IndexPage( mainPage ) from Page( i"Table of contents", "index.html", mainPage )

   function makeBody( body )
      
      body.add( ht.H1( _generator.doc.title ) )

      // the main module is not required to have a main description.
      if self.content
         body.add( ht.H2( self.content.props["title"] ) )
         body.add( _generator.makeContent( self.content ) )
      end
         
      body.add( ht.H2( self.title ) )  // table of contents
         
      // all the other pages must be our childern.
      itemList = ht.UL().CLASS("TOC")
      self.addChildren( self.firstChild, itemList, 0 )

      body.add( itemList )
   end


   function addChildren( node, itemList, level, pid )
      id = 1
      while node != nil
         text_id = pid ? pid + "." + id : toString(id)
         if node.content provides props and "html_toc_id" notin node.content.props
            node.content.props["html_toc_id"] = text_id
         end
         li = _generator.makeNodeLink( node )
         /*
         li = ht.LI().add(ht.Span(text_id).CLASS("toc_number")).add( ht.A( node.file, node.title ) )
         entity = node.content

         if entity provides props and "brief" in entity.props
            brief = _generator.rcont(entity.props["brief"])
            if brief: li.add( " - " ).add( ht.Verbatim( brief ) )
         end
         */
         
         // do we have subitems?
         if node.firstChild
            il1 = ht.UL().CLASS("TOC")
            self.addChildren( node.firstChild, il1, level+1, text_id )
            li.add( il1 )
         end

         itemList.add( li )
         node = node.next
         ++id
      end
   end

end


class GroupingPage( entity ) from Page( entity.props["title"], _generator.getFileName(entity), entity )

   function makeBody( body )
      entity = self.content
      faldoc.verbose( @i"Making page $(entity.type) $(entity.name)" )
      title = self.title

      body.add(
         ht.H1().add(ht.Span(entity.props["html_toc_id"]).CLASS("toc_number")).add( title ),
         _generator.makeBrief( entity ),
         _generator.makeContent( entity )
         )

      if entity.members
         members = entity.membersByType()

         // Create the entities using a consistent order.
         for type, listName, ename in _generator.moduleOrder
            if type in members
               mlist = members[type]
               body.add( ht.H2( listName ) )

               // if the entity is heavy, just place a link
               if ename
                  elemList = ht.UL().CLASS("memberlist")
                  for entity in mlist
                     elemList.add( _generator.makeMemberLink( entity ) )
                  end
                  body.add( elemList )
               else
                  // it's light. Add the entities.
                  for entity in mlist
                     _generator.makeIntraPageMember( body, entity )
                  end
               end
            end
         end
      end

      // see also...
      if "see" in entity.props
         body.add( _generator.makeSeeAlso( entity.props["see"] ) )
      end
   end

end


class ObjectoidPage( entity, typeName, proto ) from Page( typeName + " " + entity.name, _generator.getFileName(entity), entity )
   typeName = typeName
   proto = proto
   
   function makeBody( body )
      entity = self.content
      faldoc.verbose( @i"Making objectoid $(entity.type) $(entity.name)" )

      body.add(
            ht.H1().add(
                  ht.Span(entity.props["html_toc_id"]).CLASS("toc_number")).add(
                  self.title ),
            _generator.makeBrief( entity ) )

      if self.proto
         _generator.makePrototype( body, entity, self.typeName )
      end

      body.add( _generator.makeContent( entity ) )

      if entity.members
         members = entity.membersByType()
         // we know we have at least a member, so we have a table.
         body.add( _generator.makePropsTable( members ) )
      end

      // Generate inherited properties
      inherited = _generator.makeInherited( entity, [] )
      if inherited: body.add( inherited )

      if entity.members
         // then print the properties and the methods.
         // make the property list
         if "property" in members
            faldoc.verbose( @i"Making properties of objectoid $(entity.type) $(entity.name)" )
            body.add( ht.H2( i"Properties" ) )
            for prop in members["property"]
               _generator.makeIntraPageMember( body,  prop )
            end
         end

         // then print the properties and the methods.
         // make the property list
         if "method" in members
            faldoc.verbose( @i"Making methods of objectoid $(entity.type) $(entity.name)" )
            body.add( ht.H2( i"Methods" ) )
            for prop in members["method"]
               _generator.makeIntraPageMember( body,  prop )
            end
         end
      end

      // see also...
      if "see" in entity.props
          body.add( _generator.makeSeeAlso( entity.props["see"] ) )
      end
   end

end


class ModulePage( module ) from IndexPage( module )
   // override indexpage defaults.
   title = module.title ? module.title : "Module" + " " + module.getID()
   file = _generator.getFileName( module )

   function makeBody( body )
      module = self.content
      body.add( ht.H1().add(ht.Span(module.props["html_toc_id"]).CLASS("toc_number")).add( self.title ) )

      // Submodules may have a description that we shoudl put here.
      if module.main
         body.add( _generator.makeContent( module.main ))
      end

      body.add( ht.H2( i"Contents of this module" ) )  // table of contents

      // all the other pages must be our childern.
      itemList = ht.UL().CLASS("TOC")
      self.addChildren( self.firstChild, itemList, 0 )

      body.add( itemList )
   end
end


class MetaPage( title, file, entity_list ) from Page( title, file, nil )
   entlist = entity_list
   content = ["props"=>[=>]].pseudo

   function makeBody( body )
      entlist = self.entlist
      body.add( ht.H1().add(ht.Span(self.content.props["html_toc_id"]).CLASS("toc_number")).add( self.title ) )
      
      for ent in entlist
         _generator.makeIntraPageMember( body, ent )
      end

      return body
   end
end


class AlphaIndexPage( doc ) from Page( i"Alphabetical Index", "__alphaindex.html", doc )

   function makeBody( body )
      faldoc.info( i"Making alphabetical index page." )

      dict = [=>]
      self.makeAlpha( self.content, dict )
      for modname, module in self.content.getAllModules()
         self.makeAlpha( module, dict )
      end

      body.add( ht.H1() )

      // ok, for each letter of the alphabeth...
      for letter, entlist in dict
         body.add( ht.H3( letter ).CLASS("alpha") )
         para = ht.P().CLASS("alpha")
         for name, entity in entlist
            // skip virtual moduls, already detected.
            if entity provides isVirtual and entity.isVirtual: continue
            
            para.add( ht.A( _generator.getLinkName( entity ), name) )
            para.add( ", " + @i"$(entity.type)" )
            try
               if "ingroup" in entity.props
                  group = entity.parent.members[entity.props["ingroup"]]
                  para.add( " " + i"in group" + " ")
                  para.add( ht.A( _generator.getFileName( group ), group.props["title"]) )
               end
               if "inset" in entity.props
                  group = entity.parent.members[entity.props["inset"]]
                  para.add( " " + i"in set" + " ")
                  para.add( ht.A( _generator.getFileName( group ), group.props["title"]) )
               end
            catch AccessError
            end
            
            para.add(ht.BR())
         end
         body.add( para )
      end
   end

   function makeAlpha( module, dict )
      for name, entity in module.members
         // skip virtual moduls, already detected.
         if entity provides isVirtual and entity.isVirtual: continue
         if not name: continue
         initial = name[0].upper()
         if initial in dict
            dict[initial] += [entity.name => entity]
         else
            dict[initial] = [entity.name => entity]
         end
      end
   end
end


// The faldoc_output function must be provided by all output modules
function faldoc_output( doctree, conf )
   global _generator
   (_generator = HTMLGenerator( doctree, conf )).go()
end

function _htmlEscape( string )
   return string.replace( "&", "&amp;" ).replace( "<", "&lt;").replace(">", "&gt;").replace("\"", "&quot;")
end

class FaldocHtmlRenderer() from render.Renderer()
   level = 0
   
   init
      self.renderers += [
         "@section" => self.renderSection,
         "@note" => self.renderNote,
         "@a" => self.render_a
      ]
   end

/*
   function render( context )
      content = self.rcont( context.topNode )
      return content
   end
*/

   function renderSection( node )
      hl = self.level + 2
      title = _htmlEscape(node.infos["title"])
      link = node.infos["name"].escape()
      
      prefix = @"<h$(hl)><a name=\"$(link)\">$(title)</a></h$(hl)>\n"
      ++self.level
      content = self.rcont(node)
      --self.level

      // the level will be closed when necessary
      return prefix + content
   end

   function renderNote( node )
      content = self.rcont( node )
      return "<p class='note'><b>"+i"Note"+":</b> "+ content + "</p>\n"
   end

   function render_a( node )
      l = node.infos["link"]
      if l.target
         target = l.target

         if "title" in l.target.props
            text = target.props["title"]
         else
            text = l.destination
         end
         return "<a href=\""+ HTMLGenerator.getLinkName( target ) +"\">"+
                 text.replace("&","&amp;").replace("<","&lt;").replace(">", "&gt;") +
                 "</a>"
      else
         return "<b>"+ l.destination.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;") +"</b>"
      end
   end

end


class HTMLGenerator( doctree, conf )
   doc = doctree
   conf = conf.pseudo
   basedir = faldoc.config.basedir
   directory = "directory" in conf ? conf["directory"] : nil
   htmltitle = "title" in conf ? conf["title"] : doctree.title
   baseurl = "url" in conf ? conf["url"] : nil
   encoding = "encoding" in conf? conf["encoding"] : "utf-8"

   _rndr = FaldocHtmlRenderer()
   //htframe = ht.TransitionalFrame
   htframe = ht.XHTMLFrame

   //# represents the section order
   moduleOrder =  .[
      .["object" i"Objects" i"Object"]
      .["class" i"Classes" i"Class"]
      .["function" i"Functions" ""]
      .["global" i"Variables" "" ]
      .["enum" i"Enumerations" i"Enum"]
      .["message" i"Messages" ""]
   ]
   
   
   function go()
      faldoc.info( "=" * 60 )
      faldoc.info( "HTML Generator module started." )
      
      if not self.directory
         faldoc.error( i"html output - Missing mandatory parameter \"directory\"" )
         return false
      end
      
      fpath = Path()
      fpath.fulloc = self.directory
      if not fpath.fulloc.startsWith("/")
         self.directory = self.basedir + "/" + self.directory
      end

      faldoc.info( "html output - Writing to " + self.directory )

      try
         // prepare the directory
         VFS.mkdir( self.directory, true )

         // copy resource files
         faldoc.copyResource( "faldoc.css", self.directory )
         
         // add the index page...
         ip = IndexPage(self.doc.main)
         // and prepare the tree for the main module
         self.makeTree( ip, self.doc )

         // then prepare the tree for the submodules
         for modname, module in self.doc.getModules()
            self.makeModule( ip, module )
         end
         
         // finally create the appendix pages.
         ip.appendChild( AlphaIndexPage( self.doc ) )

         // and make
         self.makePages( ip )

      catch IOError in err
         faldoc.error( "html.fal: " + err )
         return
      end
      
      faldoc.info( "HTML Generator module ended." )
      faldoc.info( "=" * 60 )
   end


   function makeModule( page, module )
      // skip virtual modules
      if module.isVirtual
         faldoc.verbose( @"Skipping virtual module $module.name" )
         for name, subModule in module.getModules()
            self.makeModule( page, subModule )
         end
         return
      end

      // Else, create a module page and proceed.
      faldoc.verbose( @"Making module $module.name" )
      ip_mod = ModulePage( module )
      self.makeTree( ip_mod, module )
      page.appendChild( ip_mod )

      for name, subModule in module.getModules()
         self.makeModule( ip_mod, subModule )
      end
   end

   
   function makeTree( topPage, module )
      pages = module.orderPages()
      for page in pages
         if page.type == "module"
            self.makeModule( topPage, page )
         else
            pt = GroupingPage( page )
            self.makePageTree( pt, page )
            topPage.appendChild( pt )
         end
      end

      entities = module.groupEntities()
      for type, type_title, type_name in self.moduleOrder
         if type_name
            if type in entities
               for entity in entities[type]
                  // skip entities in groups or sets
                  if "ingroup" in entity.props or "inset" in entity.props: continue
                  topPage.appendChild( ObjectoidPage( entity, type_name, type != "enum" ) )
               end
            end
         else
            if type in entities
               glob_entities = []
               for entity in entities[type]
                  if "ingroup" in entity.props or "inset" in entity.props: continue
                  // we found at least one entity that goes in the generic page
                  glob_entities += entity
               end

               if glob_entities
                  topPage.appendChild( MetaPage( type_title, self.getFilenameForType( type, module ), glob_entities ) )
               end
            end
         end
      end
   end


   function makePageTree( topPage, pentity )
      entities = pentity.groupEntities()
      for type, type_title, type_name in self.moduleOrder
         // only heavy types generate a sub-page
         if type in entities and type_name
            for entity in entities[type]
               topPage.appendChild(  ObjectoidPage( entity, type_name, type != "enum" ) )
            end
         end
      end
   end

   function makePages( topPage )
      topPage.make()
      node = topPage.firstChild
      while node
         self.makePages( node )
         node = node.next
      end
   end


   //===============================================================
   // Handlers
   //===============================================================

   function renderContent( node )
      return self._rndr.rcont( node )
   end

   function makeIntraPageMember( struct, entity )
      // add the title
      struct.add( ht.H3().add( ht.A().set( ["name"=>entity.name] ).add(entity.name ) ) )
      // add the brief
      struct.add( self.makeBrief( entity ) )
      // add the prototype
      if entity.type == "function" or entity.type == "method"
         self.makePrototype( struct, entity )
      end

      // finally, add the body
      struct.add( self.makeContent( entity ) )
      
      // see also...
      if "see" in entity.props
         struct.add( self.makeSeeAlso( entity.props["see"] ) )
      end
   end


   function makeBrief( entity )
      if "brief" in entity.props
         content = self._rndr.rcont( entity.props["brief"] )
         if content: return ht.P().CLASS("brief").add( ht.Verbatim( content ) )
      end
      return ^+ ""
   end


   function makePrototype( struct, entity, typeName )

      proto = entity.prototype()
      if typeName: proto = typeName + " " + proto
      protoEntry = ht.Pre().CLASS("prototype").add( proto )
      
      if "from" in entity.props
         fr = entity.props["from"]
         protoEntry.add( " from " )
         for link, callexp in fr
            linkcal = self.makeLink( link )
            cexp = callexp? "(" + self._rndr.rcont( callexp ) + ")" : ""
            protoEntry.add( "\\\n                 " )
            protoEntry.add(linkcal)
            protoEntry.add(cexp)
         end
      end

      struct.add( protoEntry )
      table = self.makePrototable( entity )
      if table
         struct.add(table)
      end
   end


   function makeInherited( entity, done, table )
      if "from" notin entity.props: return
      
      fr = entity.props["from"]
      subclasses = []
      for link, callexp in fr
         // Gets the members.
         parent = link.target
         // was that an unresolved link?
         if not parent: continue
         if parent in done: continue
         done += parent
         
         if parent.members
            members = parent.membersByType()

            if "property" in members
               if not table: table = ht.TABLE().CLASS( "members" )
               self.makePropsTablePart( table, i"Properties", members["property"], parent )
            end
            
            if "method" in members
               if not table: table = ht.TABLE().CLASS( "members" )
               self.makePropsTablePart( table, i"Methods", members["method"], parent )
            end

         end
         
         if "from" in parent.props
            subclasses += parent
         end
      end

      for parent in subclasses
         table = self.makeInherited( parent, done, table )
      end
      
      return table
   end


   function makePrototable( entity )
      tbody = nil
      if "param" in entity.props
         tbody = ht.TBody()
         for paraName, paraContent in entity.props["param"]
            // just ignore undocumented parameters
            if paraContent
               tbody.add( ht.TR().CLASS("param").add(
                  ht.TD().CLASS("name").add( paraName ),
                  ht.TD().CLASS("content").add( ht.Verbatim(self._rndr.rcont( paraContent )) )
                  ))
            end
         end
      end
      
      if "optparam" in entity.props
         if not tbody: tbody = ht.TBody()
         for paraName, paraContent in entity.props["optparam"]
            // as optional parameters must be explicitly declared, they cannot be undoc
            tbody.add( ht.TR().CLASS("optparam").add(
               ht.TD().CLASS("name").add( paraName ),
               ht.TD().CLASS("content").add( ht.Verbatim(self._rndr.rcont( paraContent )) )
               ))
         end
      end

      
      if "return" in entity.props
         if not tbody: tbody = ht.TBody()
         tbody.add( ht.TR().CLASS("return").add(
            ht.TD().CLASS("name").add( i"Return" ),
            ht.TD().CLASS("content").add( ht.Verbatim(self._rndr.rcont( entity.props["return"] )) )
            ))
      end

      if "raise" in entity.props
         if not tbody: tbody = ht.TBody()
         tb2 = ht.TBody()
         for link, content in entity.props["raise"]
            tb2.add( ht.TR().add(
               ht.TD().CLASS("name").add( self.makeLink( link ) ),
               ht.TD().CLASS("content").add( ht.Verbatim(self._rndr.rcont( content )) )
               ))
         end
         tbody.add( ht.TR().CLASS("raise").add(
               ht.TD().CLASS("name").add( i"Raise" ),
               ht.TD().CLASS("content").add( ht.TABLE().add(tb2) )
            ))
      end

      if tbody
         return ht.TABLE().CLASS( "prototype" ).add( tbody )
      end
   end


   function makePropsTable( members )
      table = nil
      if "property" in members
         table = ht.TABLE().CLASS( "members" )
         self.makePropsTablePart( table, i"Properties", members["property"] )
      end
      if "method" in members
         if not table: table = ht.TABLE().CLASS( "members" )
         self.makePropsTablePart( table, i"Methods", members["method"] )
      end
      return table
   end


   function makePropsTablePart( table, title, members, parent )
      tbody = ht.TBody()

      if parent
         plink = ht.A( self.getLinkName( parent ), parent.name )
         title = @i"$(title) inherited from class"
      end

      titlecol = ht.TD( title ).set( ["colspan" => "2", "CLASS"=>"member_type"] )
      if plink
         titlecol.add(" ").add(plink )
      end
      
      tbody.add( ht.TR().CLASS("member_type").add( titlecol ) )
      for prop in members
         if parent
            tdName = ht.TD().add( ht.A( self.getLinkName( prop ), prop.name ) )
         else
            tdName = ht.TD().add( ht.A( "#" + prop.name, prop.name ) )
         end
         
         row = ht.TR().add( tdName )
         if "brief" in prop.props
            row.add( ht.TD().add( ht.Verbatim( self._rndr.rcont( prop.props["brief"] ) )))
         else
            tdName.set(["colspan"=>"2"])
         end
         tbody.add(row)
      end
      table.add( tbody )
   end


   function makeSeeAlso( seeList )
      para = ht.P(i"See also" + ": ").CLASS("see_also")
      for link, content in seeList
         para.add( self.makeLink(link) )
         formiddle: para.add( ", " )
         forlast: para.add( "." )
      end
      return para
   end

   function makeLink( l )
      // ingore links to empty elements.
      if l.target
         target = l.target
         
         if "title" in l.target.props
            text = target.props["title"]
         else
            text = l.destination
         end
         return ht.A( self.getLinkName( target ), text )
      else
         return ht.B( l.destination )
      end
   end


   function makeContent( entity )
      if entity.pcontent
         content = self._rndr.rcont( entity.pcontent.topNode )
         if content: return ht.Verbatim( content )
      end
      return ^+ ""
   end


   //===============================================================
   // Utilities
   //===============================================================

   // Gets the filename, and eventually the link position, where an entity should be placed.
   function getFileName( entity, forlink )
      if entity.type == "property" or entity.type == "method"
         if entity.parent
            return entity.parent.getID().replace( ".", "_" ) + ".html" + (forlink ? "#" + entity.name : "")
         end
      // only functions and variables, when in groups, are hosted in the parent item.
      elif "ingroup" in entity.props and not self.isFat(entity)
         return entity.parent.members[entity.props["ingroup"]].getID().replace( ".", "_" ) + ".html" + (forlink ? "#" + entity.name : "")
      // function sets own their items.
      elif "inset" in entity.props
         return entity.parent.members[entity.props["inset"]].getID().replace( ".", "_" ) + ".html" + (forlink ? "#" + entity.name : "")

      // Unbound functions and globals have their own file.
      elif not self.isFat( entity )
         filename = self.getFilenameForType( entity.type, entity.parent )
         if forlink: filename += "#" + entity.name
         return filename         

      // otherwise, the entity has its own name (but "#main" should be "main").
      else
         return entity.getID().replace( ".", "_" ).replace("#", "") + ".html"
      end
   end

   //# Return the filename of pages holding types (functions, messages, variables...)
   function getFilenameForType( type, parent )
      if parent
         filename = parent.getID().replace(".","_")
      else
         filename = ""
      end
      filename += "_" + type + ".html"

      return filename
   end
         

   function getLinkName( entity )
      return self.getFileName( entity, true )
   end

   //# Returns true if the entity is "massive", and should have its own page.
   function isFat( entity )
      return entity.type in _fatness
   end

   //# Creates a node to be directly added in a member list (OL of class "memberlist")
   function makeMemberLink( member )
      node = ht.LI().add(
         ht.Span(member.props["html_toc_id"]).CLASS("toc_number")).add(
         ht.A( self.getFileName(member, true ), member.name ))
         
      if "brief" in member.props
         brief = self._rndr.rcont(member.props["brief"])
         if brief: node.add( " - " ).add( ht.Verbatim( brief ) )
      end
      return node
   end

   //# Creates a node to be directly added in a member list (OL of class "memberlist")
   function makeNodeLink( node )
      member = node.content
      li = ht.LI()
      if member provides props and "html_toc_id" in member.props
         li.add( ht.Span(member.props["html_toc_id"]).CLASS("toc_number"))
      end

      li.add(ht.A( node.file, node.title ))

      if member provides props and "brief" in member.props
         brief = self._rndr.rcont(member.props["brief"])
         if brief: li.add( " - " ).add( ht.Verbatim( brief ) )
      end
      return li
   end

end
