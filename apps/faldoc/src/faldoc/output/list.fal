/*
   FALCON - Documentation tool

   FILE: list.fal

   Autodocumentation tool - list
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sat, 12 Jan 2008 12:21:30 +0100

   -------------------------------------------------------------------
   (C) Copyright 2008: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

// The faldoc_output function must be provided by all output modules
function faldoc_output( doctree, conf )
   faldoc.info( "=" * 60 )
   faldoc.info( i"List output module started" )

   faldoc.info( i"Module configuration:" )
   faldoc.info( "=====================" )
   for k,v in conf: faldoc.info(  k + " = " + v )
   faldoc.info( "=====================" )

   basedir = faldoc.config.basedir
   
   if "file" notin conf 
      faldoc.error( "ERROR: Missing mandatory \"list.file\" key in configuration" )
      return
   end

   filename = conf["file"]
   fpath = Path( filename )
   if not fpath.fulloc.startsWith("/")
      filename = basedir + "/" + filename
   end

   faldoc.info( "Writing to " + filename )

   try
      file = OutputStream( filename )
      build_list( file, doctree, conf )
      file.close()      
   catch IoError in err
      if file: file.close()
      faldoc.error( "list.fal: ERROR while writing to " + conf["file"] + ": " + err )
      return
   end

  faldoc.info( "List output module complete " )
  faldoc.info( "=" * 60 )
end


function build_list( file, doctree, conf )
   // intestation
   file.setEncoding( "utf-8", SYSTEM_DETECT )
   if "doctitle" in conf
      file.writeText( conf["doctitle"] +"\n" )
   else
      file.writeText( doctree.title +"\n" )
   end
   
   if doctree.version: file.writeText( i"Version:" + " " + doctree.version +"\n" )
   if doctree.author: file.writeText( i"Author:" + " " +  doctree.author +"\n" )

   file.writeText( "\n" )

   // all the valid documents have a main module
   // -- which needs not to be introduced.
   build_mod_list( file, doctree, doctree, conf )

   for modname, module in doctree.members
      forfirst:  file.writeText( "\n\n" )
      if module.type != "module": continue
      
      // prefix the module name to the list
      strModName = i"Module" + " \"" + module.name +"\""
      file.writeText( strReplicate( "#", strModName.len() + 4 ) + "\n" )
      file.writeText( "# "+ strModName+ " #\n" )
      file.writeText( strReplicate( "#", strModName.len() + 4 ) + "\n\n" )
   
      build_mod_list( file, module, doctree, conf )
      formiddle: file.writeText( "\n\n" )
   end
   
   file.writeText( "\n" )
end


function build_mod_list( file, module, doctree, conf )

   if "bytype" in conf and conf["bytype"]
      data = module.groupEntities()
         
      for type, title in [
            ["enum", i"Enums"],
            ["global", i"Globals"],
            ["function", i"Functions"],
            ["class", i"Classes"],
            ["messasge", i"Messages"],
            ["object", i"Objects"] ]

         todo = type in data
         if todo: writeData( file, conf, type, title, data[type], module )

         formiddle
            if todo: file.writeText( "\n\n" )
         end
      end
      
   else
      writeData( file, conf, type, title, doctree.entities,module )
   end

end


function writeData( file, conf, type, title, data, module )
   done = false
   brief = "brief" in conf and conf["brief"].lower() == "true"
   members = "members" in conf and conf["members"].lower() == "true"

   for entry in data

      // skip if foreign
      if entry.parent != module
         continue
      end

      if not done
         file.writeText( title + "\n" + ("=" * title.len() ) +"\n\n")
         done = true
      end
      
      file.writeText( entry.prototype() )
      
      // do we want brief?
      if brief and "brief" in entry.props
         file.writeText( " - " )
         file.writeText( flatten( entry.props["brief"] ) )
      end

      file.writeText( "\n" )

      if entry.type == "class" or entry.type == "object" or entry.type == "enum"
         if members
            for name,m in entry.members
               file.writeText( m.prototype() )
               // do we want brief?
               if brief and "brief" in m.props
                  file.writeText( " - " + flatten( m.props["brief"] ) )
               end
               file.writeText( "\n" )
            end
         end
      end

   end
   return done
end

//# Flattens a textual node
function flatten( textNode )

   // Just text ? -- return it
   if textNode.content: return textNode.content

   // return the node as text
   str = ""
   node = textNode.firstChild
   while node
      if str: str += " "
      str += flatten( node )
      node = node.next
   end
   return str
end
   
