/*
   FALCON - Documentation tool

   FILE: docbook.fal

   Autodocumentation tool - DOCBOOK output module
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sat, 12 Jan 2008 12:21:30 +0100

   -------------------------------------------------------------------
   (C) Copyright 2008: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from parser.render.docbook in docbook

// The faldoc_output function must be provided by all output modules
function faldoc_output( doctree, conf )
   DOCBOOKGenerator( doctree, conf ).go()
end

class FaldocBookRenderer( frame ) from docbook.Renderer

   myframe = frame
   
   init
      self.renderers += [
         "@section" => self.renderSection,
         "@a" => self.render_a
      ]

      self.blevel = 1
   end

   function render( context )

      content = self.rcont( context.topNode )

      // close opened sections
      while self.blevel > 1
         content += self.myframe.closeSection( self.blevel )
         self.blevel--
      end
      
      return content
   end

   function renderSection( node )
      
      front = self.myframe.openSection( self.blevel, node.infos["name"]  ) +
         "<title>" + _htmlEscape( node.infos["title"]) + "</title>\n"
      self.blevel ++ 
      content = self.rcont(node)
      self.blevel --
      back = self.myframe.closeSection( self.blevel )

      return front + content + back
   end
   
   function render_a( node )
      return "[@a node, todo]"
   end
         
end

class DOCBOOKGenerator( doctree, conf )
   doc = doctree
   conf = bless(conf)
   basedir = faldoc.config.basedir
   frame = nil
   file = "file" in conf ? conf["file"] : nil
   encoding = "encoding" in conf? conf["encoding"] : "utf-8"
   copyyear = "copyright.year" in conf? conf["copyright.year"] : nil
   copyholder = "copyright.holder" in conf? conf["copyright.holder"] : nil

   _outfile = nil

   _rndr = nil

   init
      if "frame" in conf
         switch conf["frame"]
            case "article"
               self.frame = docbook.ArticleFrame( self.encoding )
            case "book"
               if self.file: fname = fileName( self.file )
               self.frame = docbook.BookFrame( self.encoding, fname, self.doc.title, self.doc.author, self.copyyear, self.copyholder )
            case "article5"
               if self.file: fname = fileName( self.file )
               self.frame = docbook.Article5Frame( self.encoding, fname, self.doc.title, self.doc.author, self.copyyear, self.copyholder )
            case "book5"
               if self.file: fname = fileName( self.file )
               self.frame = docbook.Book5Frame( self.encoding, fname, self.doc.title, self.doc.author, self.copyyear, self.copyholder )
            default
               self.frame = docbook.ArticleFrame( self.encoding )
         end
      end

      self._rndr = FaldocBookRenderer( self.frame )
   end
   
   function go()
      faldoc.info( "=" * 60 )
      faldoc.info( "DOCBOOK Generator module started." )

      if not self.file
         faldoc.error( i"docbook output - Missing mandatory parameter \"file\"" )
         return false
      end

      fpath = Path(self.file)
      if not fpath.fulloc.startsWith("/")
         self.file = self.basedir + "/" + self.file
      end

      faldoc.info( "docbook output - Writing to " + self.file )

      try
         self._outfile = OutputStream( self.file )
         self._outfile.setEncoding( self.encoding )
         self._outfile.writeText( self.frame.open() )

         self.makeModule( self.doc.mainModule )
         for modname, module in self.doc.modules
            self.makeModule( module )
         end

         self._outfile.writeText( self.frame.close() )
      catch IoError in err
         faldoc.error( "docbook.fal: " + err )
         return
      end

      if self._outfile: self._outfile.close()
      faldoc.info( "DOCBOOK Generator module ended." )
      faldoc.info( "=" * 60 )
   end


   function makeModule( module )

      self._outfile.writeText(self.frame.openSection(0))

      if "#main" in module.entities
         main = module.entities["#main"]
         self.writeTag( "title", main.props["title"] )
         self._outfile.writeText(
            self._rndr.render( main.pcontent )
         )
      end

      entities = module.groupEntities()
      if "page" in entities
         for page in entities["page"]
            self._outfile.write(
               self._rndr.render( page.pcontent )
            )
         end
      end
      
      self._outfile.writeText( self.frame.closeSection(0) )
   end


   function opentag( tag )
      self._outfile.writeText( @"<$tag>\n" )
   end
   
   function closetag( tag )
      self._outfile.writeText( @"</$tag>\n" )
   end

   function write( xtag )
      self._outfile.writeText( xtag.render() )
   end
   
   function writeTag( tag, content, attribs )
      content = _htmlEscape(content)
      att = ""
      for k,v in attribs
         forfirst: att = " "
         att += k + '="' + v.replace('"', '\"') + '"'
         formiddle: att += " "
      end

      if not content
         self._outfile.writeText( "<"+ tag + att +"/>\n" )
      else
         self._outfile.writeText( "<"+ tag + att +">" + content + "</"+tag+">\n" )
      end
   end
   
end

function _htmlEscape( content )
   return content.replace( "&", "&amper").replace( "<", "&lt;" ).replace( ">", "&gt;" ).replace("\"", "&quot;" )
end


class Tag( tag, content, attribs )
   attribs = attribs
   tag = tag
   content = content

   function render()
      if self.content.typeId() == StringType
         content = _htmlEscape(self.content)
      else
         content = ""
         for tag in self.content
            content += tag.render()
         end
      end
      
      att = ""
      for k,v in self.attribs
         forfirst: att = " "
         att += k + '="' + v.replace('"', '\"') + '"'
         formiddle: att += " "
      end

      if not content
         self._outfile.writeText( "<"+ tag + att +"/>\n" )
      else
         self._outfile.writeText( "<"+ tag + att +">" + content + "</"+tag+">\n" )
      end
   end
end

