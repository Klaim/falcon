/*
   FALCON - Documentation tool

   FILE: document.fal

   Autodocumentation tool - Output document representation.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Tue, 28 Sep 2010 15:30:16 +0200

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

load .filecontext
load .docmodule
load .link

import from parser.faldoc.generic
import from parser.faldoc.falsrc

class Document
   title = nil
   author = nil
   version = nil

   //# main module -- main is a reserved name, can't possibly used by modules.
   mainModule = DocModule("main")
   
   // other modules in this document.
   modules = [=>]

   _fdParser = parser.faldoc.falsrc.Parser()
   _gParser = parser.faldoc.generic.Parser()

   function addFile( file )
      p = Path( file )
      faldoc.info( "Processing " + p.filename + " in " + p.fulloc )
      try
         istream = InputStream( file )
         // for now, suppose utf-8 encoding
         istream.setEncoding( "utf-8" )
         
         if file.endsWith( ".ftd" ) or file.endsWith( ".fal" )
            ctx = self._fdParser.parseStream( istream, "start" )
            modname = faldoc.calcModName( file )
            module = self.getModule( modname )
            faldoc.verbose( @i"File $file has module name $modname" )
         else
            ctx = self._gParser.parseStream( istream, "start" )
            module = self.mainModule
         end
         
         fc = FileContext( file, module )
         faldoc.currentFile = file
         fc.parse( ctx )

      catch in e
         faldoc.error( "While parsing " + file + ": " + e )
      end

      if istream: istream.close()
   end


   function getModule( name )
      if name in self.modules
         return self.modules[name]
      else
         mod = DocModule( name, self.mainModule )
         self.modules[name] = mod
         return mod
      end
   end
   
end

export Document