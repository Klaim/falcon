/****************************************************************************
* Falcon test suite
*
* ID: 38b
* Category: attributes
* Subcategory: 
* Short: Attrib iterators/1
* Description:
*  This test checks iterators over attributes created with fbom.
*  
*  The test presumes that previous tests on attributes (in 21 and 
*  22 series) have already been passed, so we won't check here for
*  inheritance or object startup attributes.
* [/Description]
*
****************************************************************************/

attributes
   a_one, a_two, a_three
end

class CObj( name, attrib )
   name = name
   
   init
      if attrib.type() == AttributeType
         give attrib to self
      end
   end
   
end

// empty attribute loop
count = 0
for obj in a_one
   count++
end
if count != 0: failure( "empty attribute" )

// create 4 objects with different attributes
o1 = CObj( "one", a_one )
o2 = CObj( "two", a_two )
o3 = CObj( "three", a_three )
o4 = CObj( "four" )  // without attribute
  
// ATM we have just one object in each attribute
iter = a_one.first()
count = 0
while iter.hasCurrent()
   obj = iter.value()
   if obj.name != "one": failure( "Obj in a_one" )
   iter.next()
   count ++
end 

if count != 1: failure( "Not looped over one" )   
   
iter = a_two.first()
count = 0
while iter.hasCurrent()
   obj = iter.value()
   if obj.name != "two": failure( "Obj in a_two" )
   iter.next()
   count++
end 
   
if count != 1: failure( "Not looped over two" )   

iter = a_three.first()
count = 0
while iter.hasCurrent()
   obj = iter.value()
   if obj.name != "three": failure( "Obj in a_three" )
   iter.next()
   count++
end 

if count != 1: failure( "Not looped over three" )
   
// give and remove mangling
give a_one to o2
count = 0
iter = a_one.first()
while iter.hasCurrent()
   count++
   obj = iter.value()
   if obj.name notin ["one", "two"]
      failure( "Obj in a_one, two items" )
   end
   iter.next()
end

if count != 2: failure( "Obj in a_one, two items (count)" )

// usage of erase (remove current item)
iter = a_one.first()
while iter.hasCurrent()
   iter.erase()
end

if o1 has a_one: failure( "Complete erasing 1" )
if o2 has a_one: failure( "Complete erasing 2" )

// ignore assignment
give a_two to o2
iter = a_two.first()
iter.value( o4 )

if o4 has a_two: failure( ".= not ignored 1" )

success()

/* End of file */
