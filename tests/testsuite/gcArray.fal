/****************************************************************************
* Falcon test suite
*
*
* ID: 51c
* Category: gc
* Subcategory: array
* Short: Garbage collection - arrays
* Description:
*  Test for correct accounting of garbage collection when arrays are
*  involved
* [/Description]
*
****************************************************************************/

print() // create a reusable frame

// Record initial memory requirements
GC.perform( true )
aliveMem = GC.aliveMem
items = GC.items
usedMem = GC.usedMem

//====================================
// TEST 1
// drop a static array
array = [ 1, 2, 3, 4]
array = nil

// ...and empty the A register
a = 0*1

GC.perform( true )

if aliveMem != GC.aliveMem: failure( "dropped - unmatching allocated memory" )
if usedMem != GC.usedMem: failure( "dropped - unmatching used memory" )
if items != GC.items: failure( "dropped - unmatching live items items" )

//====================================
// TEST 2
// drop an array of arrays
array = [ 1, 2, 3, [3,4], [5,6] ]

// Empty the array...
array = nil

// ...and empty the A register
a = 0*1

GC.perform( true )

if aliveMem != GC.aliveMem: failure( "drop array of array - unmatching allocated memory" )
if usedMem != GC.usedMem: failure( "drop array of array - unmatching used memory" )
if items != GC.items: failure( "drop array of array - unmatching live items items" )

//====================================
// TEST 3
// Insert an item
array = [ 1, 2, 3, 4 ]
array[2:2] = 10   // here we have an insertion

// Empty the array...
array = nil

// ...and empty the A register
a = 0*1

GC.perform( true )

if aliveMem != GC.aliveMem: failure( "insert - unmatching allocated memory" )
if usedMem != GC.usedMem: failure( "insert - unmatching used memory" )
if items != GC.items: failure( "insert - unmatching live items items" )

//====================================
// TEST 4
// Remove an item
array = [ 1, 2, 3, 4 ]
array[3:4] = []   // here we have a removal

// Empty the array...
array = nil

// ...and empty the A register
a = 0*1

GC.perform( true )

if aliveMem != GC.aliveMem: failure( "append - unmatching allocated memory" )
if usedMem != GC.usedMem: failure( "append - unmatching used memory" )
if items != GC.items: failure( "append - unmatching live items items" )

//====================================
// TEST 5
// append item
array = [ 1, 2, 3, 4 ]
array += [4,5,6]

// Empty the array...
array = nil

// ...and empty the A register
a = 0*1

GC.perform( true )

if aliveMem != GC.aliveMem: failure( "append self - unmatching allocated memory" )
if usedMem != GC.usedMem: failure( "append self - unmatching used memory" )
if items != GC.items: failure( "append self - unmatching live items items" )

success()

/* End of file */
