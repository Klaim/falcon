/*
@name Array methods - insert
@category Core-array

@output
Array methods - insert
Test as a method:
[], 0, "a": ["a"]
[], -1, "a": ["a"]
[], 0, "a", "b", "c": ["a", "b", "c"]
[1], 0, "a": ["a", 1]
[1], -1, "a": [1, "a"]
[1], 1, "a": [1, "a"]
[1, 2], 0, "a", "b": ["a", "b", 1, 2]
[1, 2], -1, "a", "b": [1, 2, "a", "b"]
[1, 2], 1, "a", "b": [1, "a", "b", 2]
[1, 2], 2, "a", "b": [1, 2, "a", "b"]
Test as a static function:
[], 0, "a": ["a"]
[], -1, "a": ["a"]
[], 0, "a", "b", "c": ["a", "b", "c"]
[1], 0, "a": ["a", 1]
[1], -1, "a": [1, "a"]
[1], 1, "a": [1, "a"]
[1, 2], 0, "a", "b": ["a", "b", 1, 2]
[1, 2], -1, "a", "b": [1, 2, "a", "b"]
[1, 2], 1, "a", "b": [1, "a", "b", 2]
[1, 2], 2, "a", "b": [1, 2, "a", "b"]
Done
@endoutput
*/

> "Array methods - insert"

tests = .[ 
   .[ .[] 0 'a']
   .[ .[], -1 'a']
   .[ .[] 0 'a' 'b' 'c' ]
   
   .[ .[1] 0 'a' ]
   .[ .[1], -1 'a' ]
   .[ .[1], 1 'a' ]
   
   .[ .[1 2] 0 'a' 'b']
   .[ .[1 2], -1 'a' 'b']
   .[ .[1 2] 1 'a' 'b' ]
   .[ .[1 2] 2 'a' 'b' ]
]

function test( code, x )
   >> ", ".merge(^[x] {(v) ^+ v.describe() } =>[]), ": "
   > code(x).describe()
end

tests1 = [] 
for arr in tests
   arr1 = arr.clone()
   arr1[0] = arr[0].clone()
   tests1 += arr1
end

> "Test as a method:"
^[ tests ] .[test {(x) x.len > 1 ? call(x[0].insert, x[1:]) : call(x[0].insert) }]

> "Test as a static function:"
^[ tests1 ] .[test {(x) call( Array.insert, x) }]

> "Done"
