/****************************************************************************
* Falcon test suite
*
*
* ID: 11a
* Category: types
* Subcategory: array
* Short: Basic array
* Description:
* Checks for correctness of basic array operations.
* Using only integers in this test
* [/Description]
*
****************************************************************************/

// assignment test - include a compilation test
array =  [ 0, 1, 2,
           3, 4, 5,
           6, 7
         ]

// len test
if len( array ) != 8: failure( "Len core function" )
if len( [] ) != 0: failure( "Len of empty array" )


// minimal access
if array[2] != 2: failure( "Smoke test" )

// array update
array[2] = 100
if  array[2] != 100: failure( "Minimal assign" )


// range access
subarr = array[3:4]
if subarr[0] != 3: failure( "Range access 1" )
if len( subarr ) != 1: failure( "Range access 1 - len" )


subarr = array[3:5]
if subarr[0] != 3 or subarr[1] != 4: failure( "Range access 2" )
if len( subarr ) != 2: failure( "Range access 2 - len" )

// array reversal
subarr = array[5:3]
if subarr[1] != 4: failure( "Range reversal" )
if len( subarr ) != 3: failure( "Range reversal - len" )

// array deletion
array[6:7] = []
if array[6] != 7: failure( "Range deletion" )
if len( array ) != 7: failure( "Range deletion - len" )

// array insertion
array[6:6] = 6
if array[6] != 6:failure( "Range insertion item" )
if array[5] != 5 or array[7] != 7: failure( "Range insertion surrounding" )
if len( array ) != 8: failure( "Range insertion item - len" )

array[6:6] = [1, 2, 3]
if array[7] != 2: failure( "Range insertion array" )
if len( array ) != 11: failure( "Range insertion array - len" )

// array changes are in another test ( arr_change.fal -- 11k)

// array concatenation
test = [1,2]
arr2 = test + [3,4] + [5,6]
if arr2[2] != 3: failure( "Concatenation" )
if arr2[4] != 5: failure( "Concatenation (second)" )
if len( arr2 ) != 6: failure( "Concatenation (len)" )
if len( test ) != 2: failure( "Invariance in concatenation" )

// array addition
arr2 += [5,6]
if arr2[4] != 5: failure( "Addition" )

// in operator
if not 2 in arr2: failure( "In operator - positive" )
if 2 notin arr2: failure( "Notin operator - negative" )
if 10 in arr2: failure( "In operator - negative" )
if not 10 notin arr2: failure( "Notin operator - negative" )

// resize with a negative integer.
arr2.resize(-1)  // as 0
if arr2.len() > 0: failure( "Resize negative" )

success()

/* End of file */
