/*
@name Array methods - erase
@category Core-array

@output
Array methods - erase
Test as a method:
["a"], "z": ["a"]
["a"], "b", "c": ["a"]
["a"], "a": []
["a"], "a", "b": []
["a", "b", "c", "a"], "z": ["a", "b", "c", "a"]
["a", "b", "c", "a"], "a", "b", "z": ["c", "a"]
["a", "b", "c"], "c", "b", "a": []
["a", "b", "c", "c", "b", "a"], "c", "b", "a": ["c", "b", "a"]
Test as a static function:
["a"], "z": ["a"]
["a"], "b", "c": ["a"]
["a"], "a": []
["a"], "a", "b": []
["a", "b", "c", "a"], "z": ["a", "b", "c", "a"]
["a", "b", "c", "a"], "a", "b", "z": ["c", "a"]
["a", "b", "c"], "c", "b", "a": []
["a", "b", "c", "c", "b", "a"], "c", "b", "a": ["c", "b", "a"]
Done
@endoutput
*/

> "Array methods - erase"

tests = .[ 
   .[ .['a'] 'z' ]
   .[ .['a'] 'b' 'c' ]
   .[ .['a'] 'a' ]
   .[ .['a'] 'a' 'b' ]
   .[ .['a' 'b' 'c' 'a'] 'z' ]
   .[ .['a' 'b' 'c' 'a' ] 'a' 'b' 'z' ]
   .[ .['a' 'b' 'c'] 'c' 'b' 'a' ]
   .[ .['a' 'b' 'c' 'c' 'b' 'a'] 'c' 'b' 'a' ]
]

function test( code, x )
   >> ", ".merge(^[x] {(v) ^+ v.describe() } =>[]), ": "
   code(x)
   > x[0].describe()
end

tests1 = [] 
for arr in tests
   arr1 = arr.clone()
   arr1[0] = arr[0].clone()
   tests1 += arr1
end

> "Test as a method:"
^[ tests ] .[test {(x) x.len > 1 ? call(x[0].erase, x[1:]) : call(x[0].erase) }]

> "Test as a static function:"
^[ tests1 ] .[test {(x) call( Array.erase, x) }]

> "Done"
