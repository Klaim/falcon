/*
@name Array methods - shift
@category Core-array

@output
Array methods - shift
Test as a method:
["a"]: "a" left []
["a"], 1: "a" left []
["a", "b", "c"]: "a" left ["b", "c"]
["a", "b", "c"], 1: "a" left ["b", "c"]
["a", "b", "c"], 2: ["a", "b"] left ["c"]
Test as a static function:
["a"]: "a" left []
["a"], 1: "a" left []
["a", "b", "c"]: "a" left ["b", "c"]
["a", "b", "c"], 1: "a" left ["b", "c"]
["a", "b", "c"], 2: ["a", "b"] left ["c"]
Catching errors
Detect shift from empty: Success
Catching errors
Detect too many shifts: Success
Done
@endoutput
*/

> "Array methods - shift"

tests = .[ 
   .[ .['a']  ]
   .[ .['a'] 1 ]
   
   .[ .['a' 'b' 'c'] ]
   .[ .['a' 'b' 'c'] 1 ]
   .[ .['a' 'b' 'c'] 2 ]
]

function test( code, x )
   >> ", ".merge(^[x] {(v) ^+ v.describe() } =>[]), ": "
   > code(x).describe() , " left ", x[0].describe()
end

tests1 = [] 
for arr in tests
   arr1 = arr.clone()
   arr1[0] = arr[0].clone()
   tests1 += arr1
end

> "Test as a method:"
^[ tests ] .[test {(x) x.len > 1 ? call(x[0].shift, x[1:]) : call(x[0].shift ) }]

> "Test as a static function:"
^[ tests1 ] .[test {(x) call( Array.shift, x) }]

> "Catching errors"
try
   >> "Detect shift from empty: "
   [].shift()
   > "Failed"
catch AccessError
   > "Success"
end

> "Catching errors"
try
   >> "Detect too many shifts: "
   .['a' 'b'].shift(3)
   > "Failed"
catch AccessError
   > "Success"
end

> "Done"
