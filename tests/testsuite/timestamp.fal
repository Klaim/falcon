/****************************************************************************
* Falcon test suite
*
* CVS-Id: $Id: timestamp.fal,v 1.2 2007/07/31 13:45:38 jonnymind Exp $
*
* ID: 108a
* Category: RTL
* Subcategory: TimeStamp
* Short: Test on timestamps
* Description:
*   First test for RTL object and classes, checks the timestamp
*   class to work correctly.
* [/Description]
****************************************************************************/

// create a date for today
today = CurrentTime()

// create a date for tomorrow, copying it from today...
tomorrow = TimeStamp( today )

// first, see if they are equal
if today.compare( tomorrow ) != 0: failure( "Same date not equal" )

// set a reference date
tomorrow.year = 2006
tomorrow.month = 3
tomorrow.day = 31
today = TimeStamp( tomorrow )

// add a day
aday = TimeStamp()
aday.day = 1
tomorrow.add( aday )
if tomorrow.day != 1 or tomorrow.month != 4 or tomorrow.year != 2006
   failure( "addition" )
end

if tomorrow.compare( today ) != 1: failure( "Compare one" )
if today.compare( tomorrow ) != -1: failure( "Compare two" )

result = TimeStamp( tomorrow )
result.distance( today )
if result.day != 1: failure( "Subtraction" )

// check for a leap year.
someyear = TimeStamp()
someyear.year = 1997
if someyear.isLeapYear(): failure( "leap year -- false positive" )
someyear.year = 1996
if not someyear.isLeapYear(): failure( "leap year detection" )

// check for date correctness.
origin = TimeStamp()
//setting january the first 2006
origin.year = 2006
origin.month = 1
origin.day = 1

// it was a sunday
if origin.dayOfWeek() != 0: failure( "Day of week calculation -- 1" )
// adding 30 days we should be at january the 31th
aday.day = 30
origin.add( aday )
if origin.day != 31 or origin.month != 1: failure( "adding 30 days" )
// adding a day we roll on february (which was wednesday
aday.day = 1
origin.add( aday )
if origin.month != 2 or origin.day != 1: failure( "Roll on 2006-2-1" )
if origin.dayOfWeek() != 3: failure( "Day of week calculation -- 2" )

// adding 28 days we roll on march the 1th, a wednesday too
aday.day = 28
origin.add( aday )
if origin.month != 3 or origin.day != 1: failure( "Roll on 2006-3-1" )
if origin.dayOfWeek() != 3: failure( "Day of week calculation -- 3" )

// adding 60 we roll on april 30
aday.day = 60
origin.add( aday )
if origin.month != 4 or origin.day != 30: failure( "Roll on 2006-4-30" )
if origin.dayOfWeek() != 0: failure( "Day of week calculation -- 4" )

// roll by hours:
aday.day = 0
aday.hour = 26
aday.minute = 62
aday.second = 131
aday.msec = 2250
origin.add( aday )


if origin.month != 5 or \
   origin.day != 1 or \
   origin.hour != 3 or \
   origin.minute != 4 or \
   origin.second != 13 or \
   origin.msec != 250
      failure( "Hour/day roll" )
end

// roll the year
aday.hour = 0
aday.minute = 0
aday.second = 0
aday.msec = 0
aday.day = 365
origin.add( aday )
if origin.year != 2007 or \
   origin.month != 5 or \
   origin.day != 1
      failure( "Year roll" )
end

// now way back:
aday.day = -365
aday.hour = -26
aday.minute = -62
aday.second = -131
aday.msec = -2250

origin.add( aday )
if origin.year != 2006 or \
   origin.month != 4 or \
   origin.day != 30 or \
   origin.hour != 0 or \
   origin.minute != 0 or \
   origin.second != 0 or \
   origin.msec != 0
      failure( "Hour/day back roll" )
end


// and the distance?
april_30 = TimeStamp()
april_30.year = 2006
april_30.month = 4
april_30.day = 28
april_30.hour = 21

aday = TimeStamp( origin )
aday.distance( april_30 )
if aday.month != 0 or \
   aday.day != 1 or \
   aday.hour != 3 or \
   aday.minute != 0 or \
   aday.second != 0 or \
   aday.msec != 0
      failure( "Date distance" )
end

success()

/* End of file */
