/****************************************************************************
* Falcon test suite
*
* ID: 28a
* Category: classes
* Subcategory: override
* Short: Basic override
* Description:
*   Tests basic operator overrides on classes.
* [/Description]
*
****************************************************************************/

class Over
   numval = 0
   array = []

   function add__( addend )
      if addend provides numval
         self.numval += addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         self.numval += addend
      else
         raise Error( 10001, "Wrong operands for add__", addend )
      end
      return self
   end

   function sub__( addend )
      if addend provides numval
         self.numval -= addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         self.numval -= addend
      else
         raise Error( 10001, "Wrong operands for sub__", addend )
      end
      return self
   end

   function mul__( addend )
      if addend provides numval
         self.numval *= addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         self.numval *= addend
      else
         raise Error( 10001, "Wrong operands for mul__", addend )
      end
      return self
   end

   function div__( addend )
      if addend provides numval
         self.numval /= addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         self.numval /= addend
      else
         raise Error( 10001, "Wrong operands for div__", addend )
      end
      return self
   end

   function mod__( addend )
      if addend provides numval
         self.numval %= addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         self.numval %= addend
      else
         raise Error( 10001, "Wrong operands for mod__", addend )
      end
      return self
   end

   function pow__( addend )
      if addend provides numval
         self.numval **= addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         self.numval **= addend
      else
         raise Error( 10001, "Wrong operands for mod__", addend )
      end
      return self
   end

   function neg__()
      return -self.numval
   end

   function inc__()
      return ++self.numval
   end

   function dec__()
      return --self.numval
   end

   function incpost__()
      return self.numval ++
   end

   function decpost__()
      return self.numval--
   end

end


o = Over()
o += 10
if o.numval != 10: failure( "Plus override" )
o -= 1
if o.numval != 9: failure( "Minus override" )
o *= 2
if o.numval != 18: failure( "Times override" )
o /= 2
if o.numval != 9: failure( "Div override" )
o %= 4
if o.numval != 1: failure( "Mod override" )
o.numval = 2
o = o ** 3
if o.numval != 8: failure( "Pow override" )

if -o != -8: failure( "Neg override" )
if ++o != 9: failure( "Inc override" )
if --o != 8: failure( "Dec override" )
if o++ != 8: failure( "Inc override post - 1" )
if o.numval != 9: failure( "Inc override post - 2" )
if o-- != 9: failure( "Dec override post - 1" )
if o.numval != 8: failure( "Dec override post - 2" )

success()
