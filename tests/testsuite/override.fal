class Over
   numval = 0
   array = []

   function add__( addend )
      if addend provides numval
         self.numval += addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         self.numval += addend
      else
         raise Error( 10001, "Wrong operands for add__", addend )
      end
      return self
   end

   function sub__( addend )
      if addend provides numval
         self.numval -= addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         self.numval -= addend
      else
         raise Error( 10001, "Wrong operands for sub__", addend )
      end
      return self
   end

   function mul__( addend )
      if addend provides numval
         self.numval *= addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         self.numval *= addend
      else
         raise Error( 10001, "Wrong operands for mul__", addend )
      end
      return self
   end

   function div__( addend )
      if addend provides numval
         self.numval /= addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         self.numval /= addend
      else
         raise Error( 10001, "Wrong operands for div__", addend )
      end
      return self
   end

   function mod__( addend )
      if addend provides numval
         self.numval %= addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         self.numval %= addend
      else
         raise Error( 10001, "Wrong operands for mod__", addend )
      end
      return self
   end

   function pow__( addend )
      if addend provides numval
         self.numval **= addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         self.numval **= addend
      else
         raise Error( 10001, "Wrong operands for mod__", addend )
      end
      return self
   end

   function neg__()
      self.numval = -self.numval
      return self
   end

   function inc__()
      return ++self.numval
   end

   function dec__()
      return --self.numval
   end

   function incpost__()
      return self.numval ++
   end

   function decpost__()
      return self.numval--
   end

   function compare( addend )
      if addend provides numval
         return self.numval - addend.numval
      elif addend.typeId() == NumericType or addend.typeId() == IntegerType
         return self.numval - addend
      end
      return nil  // let the VM to order us.
   end

   function call( p1, p2 )
      self.numval = p1
      if p2: self.array += p2
      return p1 + len(self.array)
   end

   function setIndex__( n, value )
      self.array[n] = value
      return value
   end

   function getIndex__( n )
      return self.array[n]
   end
end


o = Over()
> "o > 1 ", o > 1
> "o < 1 ", o < 1
> "o >= 1 ", o >= 1
> "o <= 1 ", o <= 1
> "o == 1 ", o == 1
> "o != 1 ", o != 1

> "o > 0 ", o > 0
> "o < 0 ", o < 0
> "o >= 0 ", o >= 0
> "o <= 0 ", o <= 0
> "o == 0 ", o == 0
> "o != 0 ", o != 0
