/*
@name Array methods - merge
@category Core-array

@output
Array methods - merge
Test as a method:
[], [], 0: []
[], [], 0, 0, 0: []
["a", "b", "c"], [], 0, 0, 0: ["a", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], 0, 0, 0: ["a", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], 0, 0, 1: ["x", "a", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], 0, 0, 5: ["x", "y", "z", "a", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], 1, 0, 1: ["a", "x", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], 1, 0, 5: ["a", "x", "y", "z", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], -2, 0, 1: ["a", "b", "x", "c"]
["a", "b", "c"], ["x", "y", "z"], -2, 0, 5: ["a", "b", "x", "y", "z", "c"]
["a", "b", "c"], ["x", "y", "z"], 3, 0, 1: ["a", "b", "c", "x"]
["a", "b", "c"], ["x", "y", "z"], 3, 0, 5: ["a", "b", "c", "x", "y", "z"]
["a", "b", "c"], ["x", "y", "z"], -1, 0, 1: ["a", "b", "c", "x"]
["a", "b", "c"], ["x", "y", "z"], -1, 0, 5: ["a", "b", "c", "x", "y", "z"]
["a", "b", "c"], ["x", "y", "z"], 1, 2, 1: ["a", "z", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], 1, 1, 5: ["a", "y", "z", "b", "c"]
Test as a static function:
[], [], 0: []
[], [], 0, 0, 0: []
["a", "b", "c"], [], 0, 0, 0: ["a", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], 0, 0, 0: ["a", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], 0, 0, 1: ["x", "a", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], 0, 0, 5: ["x", "y", "z", "a", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], 1, 0, 1: ["a", "x", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], 1, 0, 5: ["a", "x", "y", "z", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], -2, 0, 1: ["a", "b", "x", "c"]
["a", "b", "c"], ["x", "y", "z"], -2, 0, 5: ["a", "b", "x", "y", "z", "c"]
["a", "b", "c"], ["x", "y", "z"], 3, 0, 1: ["a", "b", "c", "x"]
["a", "b", "c"], ["x", "y", "z"], 3, 0, 5: ["a", "b", "c", "x", "y", "z"]
["a", "b", "c"], ["x", "y", "z"], -1, 0, 1: ["a", "b", "c", "x"]
["a", "b", "c"], ["x", "y", "z"], -1, 0, 5: ["a", "b", "c", "x", "y", "z"]
["a", "b", "c"], ["x", "y", "z"], 1, 2, 1: ["a", "z", "b", "c"]
["a", "b", "c"], ["x", "y", "z"], 1, 1, 5: ["a", "y", "z", "b", "c"]
Done
@endoutput
*/

> "Array methods - merge"

tests = .[ 
   .[ .[] .[] 0 ]
   .[ .[] .[] 0 0 0 ]
   .[ .['a' 'b' 'c'] .[] 0  0 0 ]
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'] 0 0 0 ]
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'] 0 0 1 ]
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'] 0 0 5 ]
   
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'] 1 0 1 ]
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'] 1 0 5 ]
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'], -2 0 1 ]
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'], -2 0 5 ]
   
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'] 3 0 1 ]
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'] 3 0 5 ]
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'], -1 0 1 ]
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'], -1 0 5 ]
   
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'] 1 2 1 ]
   .[ .['a' 'b' 'c'] .['x' 'y' 'z'] 1 1 5 ]
   
]

function test( code, x )
   >> ", ".merge(^[x] {(v) ^+ v.describe() } =>[]), ": "
   > code(x).describe()
end

tests1 = [] 
for arr in tests
   arr1 = arr.clone()
   arr1[0] = arr[0].clone()
   tests1 += arr1
end

> "Test as a method:"
^[ tests ] .[test {(x) call(x[0].merge, x[1:]) }]

> "Test as a static function:"
^[ tests1 ] .[test {(x) call( Array.merge, x) }]

> "Done"
