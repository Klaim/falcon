/****************************************************************************
* Falcon test suite
*
*
* ID: 36a
* Category: fbom
* Subcategory:
* Short: Falcon Basic Object Model
* Description:
*  This script tests for Falcon basic object model. Tests on all the types
*  are performed.
* [/Description]
*
****************************************************************************/

// Definitions

class alpha
   fprop = nil
end

class beta
   sprop = nil
end

class mixed from alpha, beta
	function func()
	end
end

object obj from mixed
end

string = "A string"
array = [ 1, 2, 3 ]
dictionary = [ 1 => 1, 2 => 2, 3 => 3 ]
integer = 1
float = 1.3
range = [1:2]
inst = mixed()
method = inst.func
aNil = nil

// Test 1: types
if aNil.typeId() != NilType: failure( "NilType" )
if integer.typeId() != NumericType: failure( "NumericType -- from int" )
if float.typeId() != NumericType: failure( "NumericType" )
if range.typeId() != RangeType: failure( "RangeType" )
if string.typeId() != StringType: failure( "StringType" )
if array.typeId() != ArrayType: failure( "ArrayType" )
if dictionary.typeId() != DictionaryType: failure( "DictType" )
if printl.typeId() != FunctionType: failure( "FunctionType" )
if alpha.typeId() != ClassType: failure( "ClassType" )
if obj.typeId() != ObjectType: failure( "ObjectType" )
if method.typeId() != MethodType: failure( "MethodType" )

// Test 2: toString
if aNil.toString() != "Nil": failure( "Nil to string" )
if integer.toString() != "1": failure( "Integer to string" )
if float.toString() != "1.3": failure( "Numeric to string" )
if range.toString() != "[1:2]": failure( "Range to string" )
if string.toString() != "A string": failure( "String to string" )
if array.toString() != "Array": failure( "Array to string" )
if dictionary.toString() != "Dictionary": failure( "Dictionary to string" )
if printl.toString() != "Function printl": failure( "Function to string" )
if alpha.toString() != "Class alpha": failure( "Class to string" )
if obj.toString() != "Object from %obj": failure( "Object to string" )
if method.toString() != "Method (Object from mixed).mixed.func": failure( "Method to string" )

// Test 3: len
if aNil.len() != 0: failure( "Nil len" )
if integer.len() != 0: failure( "Integer len" )
if float.len() != 0: failure( "Numeric len" )
if range.len() != 3: failure( "Range len" )
if string.len() != 8: failure( "String len" )
if array.len() != 3: failure( "Array len" )
if dictionary.len() != 3: failure( "Dictionary len" )
if printl.len() != 0: failure( "Function len" )
if alpha.len() != 0: failure( "Class len" )
if obj.len() != 0: failure( "Object len" )
if method.len() != 0: failure( "Method len" )

// Test 4: first
try
	aNil.first()
	failure( "Nil have first" )
end

try
	integer.first()
	failure( "Integer have first" )
end

try
   string.first()
   failure( "String have first" )
end

try
	float.first()
	failure( "Float have first" )
end

try
	printl.first()
	failure( "Function have first" )
end

try
	alpha.first()
	failure( "Class have first" )
end

try
	obj.first()
	failure( "Obj have first" )
end

try
	method.first()
	failure( "Method have first" )
end

if array.first() != Iterator( array ): failure( "Array first" )
if dictionary.first() != Iterator( dictionary ): failure( "Dictionary first" )

// Test 4: last
try
	aNil.last()
	failure( "Nil have last" )
end

try
	integer.last()
	failure( "Integer have last" )
end

try
   string.last()
   failure( "String have last" )
end

try
	float.last()
	failure( "Float have last" )
end

try
	printl.last()
	failure( "Function have last" )
end

try
	alpha.last()
	failure( "Class have last" )
end

try
	obj.last()
	failure( "Obj have last" )
end

try
	method.last()
	failure( "Method have last" )
end

if array.last() != Iterator( array, -1 ): failure( "Array last" )
if dictionary.last() != Iterator( dictionary, -1 ): failure( "Dictionary last" )


//test 5: compare
bigInt = 1500
if bigInt.compare( integer ) <= 0: failure( "Compare verse <=" )
if integer.compare( bigInt ) >= 0: failure( "Compare verse >=" )
bigInt = integer
if integer.compare( bigInt ) != 0: failure( "Compare verse == first" )
if bigInt.compare( integer ) != 0: failure( "Compare verse == beta" )
// todo: more extensive tests in a separate file


//test 7: className
if aNil.className() != nil: failure( "Nil className" )
if integer.className() != nil: failure( "Integer className" )
if float.className() != nil: failure( "Numeric className" )
if range.className() != nil: failure( "Range className" )
if string.className() != nil: failure( "String className" )
if array.className() != nil: failure( "Array className" )
if dictionary.className() != nil: failure( "Dictionary className" )
if printl.className() != nil: failure( "Function className" )
if alpha.className() != "alpha": failure( "Class className" )
if obj.className() != "%obj": failure( "Object className" )
if inst.className() != "mixed": failure( "Instance className" )
if method.className() != nil: failure( "Method className" )

//test 8: className
if aNil.baseClass() != nil: failure( "Nil baseClass" )
if integer.baseClass() != nil: failure( "Integer baseClass" )
if float.baseClass() != nil: failure( "Numeric baseClass" )
if range.baseClass() != nil: failure( "Range baseClass" )
if string.baseClass() != nil: failure( "String baseClass" )
if array.baseClass() != nil: failure( "Array baseClass" )
if dictionary.baseClass() != nil: failure( "Dictionary baseClass" )
if printl.baseClass() != nil: failure( "Function baseClass" )
if alpha.baseClass() != nil: failure( "Class baseClass" )
if obj.baseClass() == nil: failure( "Object baseClass" )
if inst.baseClass() != mixed: failure( "Instance baseClass" )
if method.baseClass() != nil: failure( "Method baseClass" )

//test 9: derived from
if obj.derivedFrom( "impossible" ): failure( "Negative derived from" )
if not obj.derivedFrom( "%obj" ): failure( "Obj derived from %obj" )
if not obj.derivedFrom( "mixed" ): failure( "Obj derived from mixed" )
if not obj.derivedFrom( "beta" ): failure( "Obj derived from beta" )
if not obj.derivedFrom( "alpha" ): failure( "Obj derived from alpha" )

//test 10: trim
try
   aNil.trim()
   failure( "Nil has trim" )
end

try
   integer.trim()
   failure( "Integer has trim" )
end

try
   float.trim()
   failure( "Float has trim" )
end

try
   range.trim()
   failure( "Range has trim" )
end

try
   string.trim()
catch
   failure( "String does not have trim" )
end

try
   array.trim()
   failure( "Array has trim" )
end

try
   dictionary.trim()
   failure( "Dictionary has trim" )
end

try
   printl.trim()
   failure( "Function has trim" )
end

try
   alpha.trim()
   failure( "Class has trim" )
end

try
   obj.trim()
   failure( "Object has trim" )
end

try
   inst.trim()
   failure( "Instance has trim" )
end

try
   method.trim()
   failure( "Method has trim" )
end

success()

/* End of file */
