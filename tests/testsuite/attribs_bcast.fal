/****************************************************************************
* Falcon test suite
*
* ID: 38e
* Category: attributes
* Subcategory:
* Short: Attribute broadcasts
* Description:
*  This test verifies broadcast semantics.
* [/Description]
*
****************************************************************************/

attributes
   a_one, a_two, a_three
end

function vector_eq( v1, v2 )
   if v1.len() != v2.len(): return false
   for i in [0:v1.len()]
      if v1[i] != v2[i]: return false
   end

   return true
end

class CObj( name, attrib )
   name = name
   called = nil
   static callcount = 0

   init
      if attrib.type() == AttributeType
         give attrib to self
      end
   end

   function a_one( param )
      self.called = [1, param ]
      self.callcount = self.callcount+1
      return false
   end

   function a_two( param )
      self.called = [2, param ]
      self.callcount = self.callcount+1
      return false
   end

   function reset()
      self.callcount = 0
   end

end

// create 4 objects with different attributes
o1 = CObj( "one", a_one )
o2 = CObj( "two", a_two )
o3 = CObj( "three", a_three )
o4 = CObj( "four" )  // without attribute

// broadcast on one
o1.reset()
broadcast( a_one )
if not vector_eq( o1.called, [1, nil] )
   failure( "Broadcast on one/nil" )
end
if o1.callcount != 1: failure( "Excessive broadcast on one" )

// broadcast on one + two, with one param
o1.reset()
broadcast( [ a_one, a_two ], "Hello" )
if not vector_eq( o1.called, [1, "Hello"] )
   failure( "Broadcast on one+two/Hello (one)" )
end

if not vector_eq( o2.called, [2, "Hello"] )
   failure( "Broadcast on one+two/Hello (two)" )
end
if o1.callcount != 2: failure( "Excessive broadcast on one+two" )

// assign a_one and a_two to four.
give a_one, a_two  to o4

o1.reset()
broadcast( [ a_one, a_two ], "World" )

if not vector_eq( o1.called, [1, "World"] )
   failure( "Broadcast on one+two/Hello (one)" )
end
if not vector_eq( o2.called, [2, "World"] )
   failure( "Broadcast on one+two/Hello (two)" )
end
if not vector_eq( o4.called, [2, "World"] )
   failure( "Broadcast on one+two/World (four)" )
end
// o1, o2 and o4 twice!
if o1.callcount != 4: failure( "Excessive broadcast on double one+two" )

// Finally, call an unexisting attribute
o1.reset()
broadcast( a_three )
if o1.callcount != 0: failure( "Broadcast to none" )

// and to existing attributes, but at unexhisting handlers
give a_three to o1, o2, o3, o4

broadcast( a_three, "some", "random", "parameter" )
if o1.callcount != 0: failure( "Broadcast to all but no receiver" )

// finally, remove executables and try again
o1.a_one = nil
o2.a_one = nil
o3.a_one = nil
o4.a_one = nil
broadcast( a_one, "some", "random", "parameter" )
if o1.callcount != 0: failure( "Broadcast to all but cleared receiver" )

// Test also an interrupted chain
function interrupter()
   self.callcount ++
   return true
end

o1.a_one = interrupter
o2.a_one = interrupter
o3.a_one = interrupter
o4.a_one = interrupter

o1.callcount = 0
broadcast( [a_one, a_one] )
if o1.callcount != 1: failure( "Broadcast interruption" )

success()

/* End of file */
