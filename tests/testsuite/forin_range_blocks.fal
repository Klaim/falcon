/****************************************************************************
* Falcon test suite
*
* CVS-Id: $Id: forin_range_blocks.fal,v 1.1 2007/07/20 21:30:37 jonnymind Exp $
*
* ID: 16o
* Category: loops
* Subcategory: forin
* Short: Forin ranges blocks
* Description:
*   Cheks the forin loop used on ranges with forfirst,
*   forlast and formiddle clauses.
*
* [/Description]
*
****************************************************************************/

// Test for open range

result = 0
count = 0
vals_first = []
vals_last = []
vals_middle = []

for c in [10:]
	forfirst: vals_first += c
	result += c
	count++
	formiddle: vals_middle += c
	forlast: vals_last += c
end

if result != 10: failure( "Open range - value" )
if count != 1: failure( "Open range - times" )
if vals_first.len() != 1: failure( "Open range - forfirst" )
if vals_middle.len() != 0: failure( "Open range - formiddle" )
if vals_last.len() != 1: failure( "Open range - forlast" )

//===================================================
// Test for empty range, positive

result = 0
count = 0
vals_first = []
vals_last = []
vals_middle = []

for c in [10:10]
	forfirst: vals_first += c
	result += c
	count++
	formiddle: vals_middle += c
	forlast: vals_last += c
end

if result != 0: failure( "Empty range - value" )
if count != 0: failure( "Empty range - times" )
if vals_first.len() != 0: failure( "Empty range - forfirst" )
if vals_middle.len() != 0: failure( "Empty range - formiddle" )
if vals_last.len() != 0: failure( "Empty range - forlast" )

//===================================================
// Test for filled range, upwards

result = 0
count = 0
vals_first = []
vals_last = []
vals_middle = []

for c in [1:5]
	forfirst: vals_first += c
	result += c
	count++
	formiddle: vals_middle += c
	forlast: vals_last += c
end

if result != 1+2+3+4: failure( "Upward range - value" )
if count != 4: failure( "Upward range - times" )
if vals_first.len() != 1: failure( "Upward range - forfirst" )
if vals_middle.len() != 3: failure( "Upward range - formiddle" )
if vals_last.len() != 1: failure( "Upward range - forlast" )

//===================================================
// Test for filled range, downward

result = 0
count = 0
vals_first = []
vals_last = []
vals_middle = []

for c in [5:1]
	forfirst: vals_first += c
	result += c
	count++
	formiddle: vals_middle += c
	forlast: vals_last += c
end

if result != 1+2+3+4+5: failure( "Downward range - value" )
if count != 5: failure( "Downward range - times" )
if vals_first.len() != 1: failure( "Downward range - forfirst" )
if vals_middle.len() != 4: failure( "Downward range - formiddle" )
if vals_last.len() != 1: failure( "Downward range - forlast" )

//===================================================
// Test for filled range, one

result = 0
count = 0
vals_first = []
vals_last = []
vals_middle = []

for c in [1:2]
	forfirst: vals_first += c
	result += c
	count++
	formiddle: vals_middle += c
	forlast: vals_last += c
end

if result != 1: failure( "Upward unique range - value" )
if count != 1: failure( "Upward unique range - times" )
if vals_first.len() != 1: failure( "Upward unique range - forfirst" )
if vals_middle.len() != 0: failure( "Upward unique range - formiddle" )
if vals_last.len() != 1: failure( "Upward unique range - forlast" )

//===================================================
// Test for filled range, two, down

result = 0
count = 0
vals_first = []
vals_last = []
vals_middle = []

for c in [2:1]
	forfirst: vals_first += c
	result += c
	count++
	formiddle: vals_middle += c
	forlast: vals_last += c
end

if result != 1+2: failure( "Downward double range - value" )
if count != 2: failure( "Downward double range - times" )
if vals_first.len() != 1: failure( "Downward double range - forfirst" )
if vals_middle.len() != 1: failure( "Downward double range - formiddle" )
if vals_last.len() != 1: failure( "Downward double range - forlast" )

success()

/* End of file */
