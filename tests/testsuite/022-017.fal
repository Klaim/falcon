/*
@name Array methods - slice
@category Core-array

@output
Array methods - slice
Test as a method:
["a", "b", "c"], 0: [] - ["a", "b", "c"]
["a", "b", "c"], 1: ["a"] - ["b", "c"]
["a", "b", "c"], 2: ["a", "b"] - ["c"]
["a", "b", "c"], 3: ["a", "b", "c"] - []
["a", "b", "c"], 0, 1: ["b", "c"] - ["a"]
["a", "b", "c"], 1, 1: ["a", "c"] - ["b"]
["a", "b", "c"], 2, 1: ["a", "b"] - ["c"]
["a", "b", "c"], 3, 1: ["a", "b", "c"] - []
["a", "b", "c"], 0, 2: ["c"] - ["a", "b"]
["a", "b", "c"], 1, 2: ["a"] - ["b", "c"]
["a", "b", "c"], 2, 2: ["a", "b"] - ["c"]
["a", "b", "c"], 3, 2: ["a", "b", "c"] - []
Test as a static function:
["a", "b", "c"], 0: [] - ["a", "b", "c"]
["a", "b", "c"], 1: ["a"] - ["b", "c"]
["a", "b", "c"], 2: ["a", "b"] - ["c"]
["a", "b", "c"], 3: ["a", "b", "c"] - []
["a", "b", "c"], 0, 1: ["b", "c"] - ["a"]
["a", "b", "c"], 1, 1: ["a", "c"] - ["b"]
["a", "b", "c"], 2, 1: ["a", "b"] - ["c"]
["a", "b", "c"], 3, 1: ["a", "b", "c"] - []
["a", "b", "c"], 0, 2: ["c"] - ["a", "b"]
["a", "b", "c"], 1, 2: ["a"] - ["b", "c"]
["a", "b", "c"], 2, 2: ["a", "b"] - ["c"]
["a", "b", "c"], 3, 2: ["a", "b", "c"] - []
Done
@endoutput
*/

> "Array methods - slice"

tests = .[ 
   .[ .['a' 'b' 'c'] 0 ]
   .[ .['a' 'b' 'c'] 1 ]
   .[ .['a' 'b' 'c'] 2 ]
   .[ .['a' 'b' 'c'] 3 ]
   
   .[ .['a' 'b' 'c'] 0 1]
   .[ .['a' 'b' 'c'] 1 1]
   .[ .['a' 'b' 'c'] 2 1]
   .[ .['a' 'b' 'c'] 3 1]

   .[ .['a' 'b' 'c'] 0 2]
   .[ .['a' 'b' 'c'] 1 2]
   .[ .['a' 'b' 'c'] 2 2]
   .[ .['a' 'b' 'c'] 3 2]
   
]

function test( code, x )
   >> ", ".merge(^[x] {(v) ^+ v.describe() } =>[]), ": "
   n = code(x)
   > x[0].describe(), " - ", n.describe()
end

tests1 = [] 
for arr in tests
   arr1 = arr.clone()
   arr1[0] = arr[0].clone()
   tests1 += arr1
end

> "Test as a method:"
^[ tests ] .[test {(x) x.len > 1 ? call(x[0].slice, x[1:]) : call(x[0].slice) }]

> "Test as a static function:"
^[ tests1 ] .[test {(x) call( Array.slice, x) }]

> "Done"
