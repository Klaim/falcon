/*
@name Rule -- backtracking cut

@output
Rule cut
Cutting out the first expression
A: 0; B: 0
A: 0; B: 1
A: 0; B: 2
A: 0; B: 3
First test complete
Cutting out the second expression
A: 0; B: 0
Second test complete
Orginal value A: A Not initialized
Orginal value B: B Not initialized
Orginal value C: Not used
Done
@endoutput

*/

> "Rule cut"

x = VMContext()
dd = x.dataDepth
cd = x.codeDepth

inc = function ( v )
   var = init
   if not var
      var = 0
   end
   
   if var < 3
      init = var + 1
      return? var
   else
      return var
   end
end

function test0()
   > "Cutting out the first expression"
   a = "Not initialized"
   b = "Not initialized"
   rule
      a = inc()
      !
      b = inc()
      > @"A: $a; B: $b" 
      false
      or
      > "First test complete"
   end
end

function test1()
   > "Cutting out the second expression"
   a = "A Not initialized"
   b = "B Not initialized"
   c = "Not used"
   rule
      a = inc()
      b = inc()
      !
      > @"A: $a; B: $b" 
      false
      or
      > "Second test complete"
   end
   
   > "Orginal value A: ", a
   > "Orginal value B: ", b
   > "Orginal value C: ", c
end

test0()
test1()

dd1 = x.dataDepth
cd1 = x.codeDepth

if dd1 != dd
   raise "Data stack corrupted"
end

if cd1 != cd
   raise "Code stack corrupted"
end

> "Done"

