/*
   FALCON - Samples

   FILE: th_join2.fal

   This test combines waits on multiple threads to join automation.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sun, 13 Apr 2008 23:26:44 +0200

   -------------------------------------------------------------------
   (C) Copyright 2004: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/


load threading
const threadCount = 2

class MyThreadOk(id) from Thread
   id = id

   function run()
      str = ""
      sleep( random() * 2 )
      for i in [ord('A'): ord( 'A' ) + 26]
         str *= i
      end

      return str
   end
end

class MyThreadFail(id) from Thread
   id = id

   function run()
      sleep( random() * 3 )
      raise "Ops, raised an error!"
   end
end

class MyThreadBadFail(id) from Thread
   id = id

   function run()
      sleep( random() * 3 )
      self.id[400] = 10  // will surely generate an array access error.
   end
end

class MyDetacher(id) from Thread
   id = id

   function run()
      sleep( random() * 3 )
      self.detach()
   end
end

//===========================================
// Main function
//

threads = []
for i in [0:threadCount]
   threads += MyThreadOk( "ID" + i.toString() )
end

for i in [threadCount:threadCount*2]
   threads += MyThreadFail( "ID" + i.toString() )
end

for i in [threadCount*2:threadCount*3]
   threads += MyThreadBadFail( "ID" + i.toString() )
end

for i in [threadCount*3:threadCount*4]
   threads += MyDetacher( "ID" + i.toString() )
end

// start all the threads
for t in threads
   t.start()
end


// wait for all them.
start = seconds()
fmt = Format( ".3" )
while threads
   thnum = Threading.vwait( threads, 0.1 )
   >> "Elapsed: ", fmt.format(seconds() - start), "\r"

   // have been really signaled?
   if ( thnum >= 0 )
      >> "                                         \r"  // clear the row
      // extract the thread that has been terminated
      th = threads[thnum]
      threads[thnum:thnum + 1] = []
      // join the thread
      performJoin( th )
   end
end

function performJoin( t )
   try
      output = t.join()
      > "Thread ", t.id, " terminated: ", output

   catch ThreadError in error
      se = error.subErrors[0]
      > "Thread ", t.id, " had an error: ", se.heading()

   catch JoinError in error
      > "Thread ", t.id, " has been detached."

   catch InterruptedError in error
      > "Interrupted while waiting for the threads... quitting"

   catch in error
      > "Error for the threads: ", error
      > "...quitting."
   end
end

> "Main thread complete."
