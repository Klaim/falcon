/*
@name Message queue with delay
@category Parallel

@long 110
@checkpoint STEP

@result OK
*/

load rnd

randomSeed(1231)
size = 10000
size10 = size/10
size100 = size/100

agents = 5
data = []
data.reserve(size)
queue = MessageQueue() // fair
for i = 1 to agents
   data += -1
end

mtx = Mutex()
barrier = Barrier()

function process( id )
   waiter = Waiter( barrier )   
   waiter.add( queue, {=>
      v = queue.pop()
      > "Got: ",v 
      mtx.lock()
      data[v] += id
   })
      
   waiter.wait()
end


function control()
   queue.subscribersFence(agents).wait()

   for i = 1 to size      
      if random(0,0,1)
         rest( random(1,10) )
      end
      
      // ask the agents to post 
      mtx.lock()
      data += 0
      mtx.unlock()
      queue.send( data.len-1 )      
            
      if i % size100 == 0: > "STEP"      
   end   
   // declare we're done.
   barrier.open()
end


> "Message queue with delay"
pfunc = [Parallel, control]
for i = 1 to agents
   pfunc += [[process, i]]
end

p = pfunc()
p.launch()

// check
// we need the sum of the agents.
count = 0
for i = 1 to agents
   count += i
end


for i = 0 to data.len
   if data[i] != count
      > "Check failed at step " + i
      return failed
   end
   if i % size10 == 0: > "STEP"
end

return "OK"
