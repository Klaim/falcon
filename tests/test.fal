load dbi

dbh = DBIConnect( "pgsql" )
inspect(dbh)

//try
    > "Create table status: ", dbh.execute( "CREATE TABLE names (name VARCHAR(45), age integer, dob date, tob time, tsob timestamp)" )
    > "      Insert status: ", dbh.execute( "INSERT INTO names VALUES ('John', 20, '2007-10-20', '10:20:30', '2007-10-20 10:20:30')" )
    > "      Insert status: ", dbh.execute( "INSERT INTO names VALUES ('Jane', 21, '2006-09-19', '06:09:19', '2006-09-19 06:09:19')" )
    > "      Insert status: ", dbh.execute( "INSERT INTO names VALUES ('Jim', 22, '2005-08-18', '05:08:18', '2005-08-18 05:08:18')" )
//catch 
//    > "Table could not be created, assuming it already exists"
//end

>
> "Performing a query"
rs = dbh.query( "SELECT * FROM names" )
> "Column count: ", rs.getColumnCount()
> "   Row count: ", rs.getRowCount()
inspect( rs )

> "Columns: "
for c in rs.getColumnNames()
    > "   ", c
end

> "Rows: "
while rs.next() == 0
    > rs.asString( 0 ), ", ", rs.asInteger( 1 ), ", ", rs.asDate( 2 ), ", ", rs.asTime( 3 ), ", ", rs.asDateTime( 4 )
end

rs.close()

> "Query fetching arrays: "
rs = dbh.query( "SELECT * FROM names" )

while (let p = rs.fetchArray())
    > p[0], " was born on ", p[2]
end

rs.close()

> "Query fetching dict: "
rs = dbh.query( "SELECT * FROM names" )

while (let p = rs.fetchDict())
    > p["name"], " is ", p["age"], " and was born at ", p["tob"]
end

rs.close()

> "Updating database"
> "Update mass status: ", dbh.execute( "UPDATE names SET name='Jeff'" )
> " Drop table status: ", dbh.execute( "DROP TABLE names" )

dbh.close()
