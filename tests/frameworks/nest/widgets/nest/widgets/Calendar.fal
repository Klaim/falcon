import from nest.widgets.widget in wid
import from nest.js

/*# Calendar form widget.
   @param id The widget ID
   @param currentDate the Date on which to "center" the Calendar default is today

   This widget shows a calendar centered on a date.

*/

/*#

@code
+=============================+  << span id == [widgetid]
+                        [X]  +  << div id == [widgetid].bar  class="windowbar"
+ |<< <|  month / year |> >>| +  << div id == [widgetid].head -> ...
+                             +
+ Sun Mon ...             Sat + << div id == [widgetid].intest (each span class="intest")
+ [  ]  [  ]  1  2         .. + << div id == [widgetid].body
+  ...                        + << each row div id == [widgetid].row
+  ...                        + << each cell: span class='day' (or 'noday' if empty), 'today' or 'busyday'
+      [ 15 ]                 + << span class='today'
+ ...         [25!]           + << span class='xday'
+=============================+
@endcode

The buttons generate a message from current widget with message id:
- nexty
- nextm
- prevy
- prevm

The div [widgetid].head is divided into 3 parts:
- class = btnprev
- class = curdate
- class = btnnext

Buttons id in order:
- [widgetid].back1y  (under span id=btnprev)
- [widgetid].back1m  (under span id=btnprev)
- [widgetid].fwd1m   (under span id=btnnext)
- [widgetid].fwd1y   (under span id=btnnext)

*/
class Calendar(id, currentDate) from wid.Widget( id )
   tag = "span"
   currentDate   = nil
   isSelfClosing = false
   isAJAXHost = true

   cellWidth = 35
   cellHeight = 30
   
   monthNames = .[
      i"January"
      i"February"
      i"March"
      i"April"
      i"May"
      i"June"
      i"July"
      i"August"
      i"September"
      i"October"
      i"November"
      i"December"]

   dayNames = .[
      i"Sun"
      i"Mon"
      i"Tru"
      i"Wed"
      i"Thu"
      i"Fri"
      i"Sat"]

   firstDay = 0

   jsMethods = [
      "busyDays" => "Array()",
      
      "daysPerMonth" => "
         function( month, year ) {
            var dpm = Array(31,28,31,30,31,30,31,31,30,31,30,31);
            var days = dpm[month-1];
            if ( days == 28 && this.isLeapYear( year ) ) days = 29;
            return days;
         }",
         
      "isLeapYear" => "
         function isleap( year ) {
            var yr = parseInt(yr);
            if (yr%4 == 0) {
               if (yr%100 == 0) {
                  return yr%100 != 0 || yr%400 == 0;
               }
               return true;
            }
            return false;
         }",
         
      "create" => "
         function() {
            this.style.paddingTop=0;
            var bar = document.createElement('div');
            bar.id = this.id + '.bar';
            bar.style.height='16px';            
            bar.style.paddingRight='9px';
            bar.style.paddingLeft='9px';
            bar.className = 'windowbar';
            
            var closebtn = document.createElement('button');
            closebtn.id = this.id + '.closebtn';
            closebtn.innerHTML='X';
            closebtn.style.width = '30px';
            closebtn.style.height = '13px';
            closebtn.style.fontSize = '8pt';
            closebtn.style.padding = '0';
            closebtn.style.margin = '0pt';
            closebtn.style.fontWeight = 'bold';
            closebtn.style.fontFamily = 'arial, sans';
            closebtn.style.float = 'right';
            
            bar.appendChild( closebtn );
            
            var head = document.createElement('div');
            head.style.clear = 'both';
            head.id = this.id + '.head';
            this.createHead( head );
         
            var intest = document.createElement('div');
            intest.id = this.id + '.intest';
            this.createIntest( intest );
            
            this.appendChild( bar );
            this.appendChild( head );
            this.appendChild( intest );
         }",

      "createHead" => "
         function( headDiv ) {
            var btnBack1Year = document.createElement('button');
            btnBack1Year.id = this.id + '.back1y';
            btnBack1Year.innerHTML ='&lt;&lt;';
            var btnBack1Month = document.createElement('button');
            btnBack1Month.id = this.id + '.back1m';
            btnBack1Month.innerHTML ='&lt;';
            var btnprev = document.createElement('span');
            btnprev.className = 'btnprev';

            this.curMonthSpan = document.createElement('span');
            this.curMonthSpan.id = this.id + '.current';
            this.curMonthSpan.className = 'curdate';
            
            var btnFwd1Month = document.createElement('button');
            btnFwd1Month.id = this.id + '.fwd1m';
            btnFwd1Month.innerHTML ='&gt;';
            var btnFwd1Year = document.createElement('button');
            btnFwd1Year.id = this.id + '.fwd1y';
            btnFwd1Year.innerHTML ='&gt;&gt;';

            var btnnext = document.createElement('span');
            btnnext.className = 'btnnext';
            
            btnprev.appendChild( btnBack1Year );
            btnprev.appendChild( btnBack1Month );
            btnnext.appendChild( btnFwd1Month );
            btnnext.appendChild( btnFwd1Year );

            headDiv.appendChild( btnprev );
            headDiv.appendChild( this.curMonthSpan );
            headDiv.appendChild( btnnext );

            this.setCurMonth();
         }
      ",

      "setCurMonth" => "
         function() {
            var mname = this.monthNames[ this.month - 1 ];
            this.curMonthSpan.innerHTML = mname + \" \" + this.year; 
         }
      ",

      "refresh" => "
         function() {
            if( this.body ) {
               this.removeChild( this.body );
            }
            this.body = document.createElement('div');
            this.body.id = this.id + '.body';
            this.appendChild( this.body );

            var days = this.daysPerMonth( this.month, this.year );
            var curday = 1;

            /* put in the first row */
            var row = document.createElement('div');
            row.className = 'row';

            /* calculate the first day of this month */
            var today_date = new Date();
            var today = 0;
            if( this.month == today_date.getMonth()+1 && this.year == today_date.getFullYear() )
            {
               today = today_date.getDate();
            }
            var d = new Date( this.year, this.month-1, 1 );
            var dow = d.getDay() + this.firstDay;
            var rowday = 0;

            /* fill with nodays */
            var nodays = this.firstDay;
            while( nodays < dow ) {
               var noday = document.createElement('span');
               noday.className = 'noday';
               noday.style.width= this.cellWidth + 'px';
               noday.style.height= this.cellHeight+ 'px';
               nodaay.style.display='inline-block';
               noday.innerHTML = '&nbsp;';
               row.addChild( noday );
               ++nodays;
               ++rowday;
            }
            
            while( curday <= days ) {
               var day = document.createElement('span');
               day.className = 'day';
               if ( curday == today )
               {
                  day.id = this.id + '.today';
               }
               if( this.busyDays.indexOf(curday) != -1 ) {
                  day.className = 'busyday';
               }

               day.innerHTML = curday;
               day.style.width= this.cellWidth + 'px';
               day.style.height= this.cellHeight+ 'px';
               day.style.display='inline-block';
               row.appendChild( day );
               ++curday;
               ++rowday;
               if( rowday == 7 ) {
                  this.appendChild( row );
                  var row = document.createElement('div');
                  row.className = 'row';
                  rowday = 0;
               }
            }

            this.appendChild( row );
         }
      ",
       
      "createIntest" => "
         function( headDiv ) {
            for( var i = this.firstDay; i < 7+this.firstDay; i = i + 1 ) {
               var dname = i;
               if ( dname > 6 ) dname = dname - 7;
               var inner = document.createElement('span');
               inner.style.width= this.cellWidth + 'px';
               inner.style.display='inline-block';
               inner.className = 'intest';
               inner.innerHTML = this.dayNames[dname];
               inner.style.width= this.cellWidth + 'px';
               headDiv.appendChild( inner );
            }
         }
      ",

      "goto" => "
         function( month, year ) {
            this.month = month;
            this.year = year;
            this.refresh();
         }"
   ]

   onCreate = "this.create(); this.refresh();"
   
   init
      self.set( ["class" => "calendar", "style" => "display: inline-block"] )
      
      if currentDate 
         self.currentDate = currentDate 
      else 
         self.currentDate = TimeStamp()
         self.currentDate.currentTime()
      end

      self.jsMethods["month"] = self.currentDate.month
      self.jsMethods["year"] = self.currentDate.year
      self.jsMethods["firstDay"] = self.firstDay
      self.jsMethods["cellWidth"] = self.cellWidth
      self.jsMethods["cellHeight"] = self.cellHeight

      self.jsMethods["dayNames"] = "Array('" + "','".merge( self.dayNames ) + "')"
      self.jsMethods["monthNames"] = "Array('" + "','".merge( self.monthNames ) + "')"
      
      // TODO: Remove this when we have automatic parentship
      self.addClassInParentship( Calendar )      
   end


   function renderContent()
      return ""
   end

   function AJAX( params )
      inspect( params )
   end
   
end   