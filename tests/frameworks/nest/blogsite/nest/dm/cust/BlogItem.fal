/***************************************************
* Module Name :
* Author      : Lucone
* Create date : 2011-07-05
* Edit by     : --        in date   : ....-..-..
* Module Description -------------------------------
*        <please insert a module description>
***************************************************/
/***************************************************
--Classes, Object and functions:
*	32	class BlogItem( dbutility )
*	52		function finalize()
*	56	>> --- DML Methods----------------------------------------------------<<
*	58	>>>> List of Items
*	64		function getByID( idBlog )
*	68	>>>> Insert, Update and Delete
*	71		function insert( Title, Content, Author, Section, Tags )
*	105		function update( IDBlog, Title, Content, Author, Section, Tags )
*	140		function delete( IDBlog )
*	147	>> --- Output methods-------------------------------------------------<<
*	148		function postedBy()
*	161		function filedUnder()
*	166		function commentsNumber()
*	182		function tagList()
*	193		function DateFormatted()
*	204	>> --- Private methods------------------------------------------------<<
*	209		function getList( filter, numRec)
***************************************************/
import BlogSection  from nest.dm.cust.BlogSection as BlogSection
import from nest.dm.cust.DateTimeManagement in DateTime

class BlogItem( dbutility )
	_dbuti 	 = nil
	_fields  = nil

	ID		 = nil
	Title  	 = nil
	ShortCnt = nil
	Content  = nil
	Date 	 = nil
	Author 	 = nil
	Section  = nil
	Tags     = nil
	NumOfComments = nil

	init
		self._fields = "d.IDBLOG, d.Title, IFNull(Content, '') as Content, d.Date, d.Author, s.Title as Section"
		self._dbuti = dbutility
	end

	/*	To free the resources used	*/
	function finalize()
		self._dbuti = nil
	end

// Region: DML Methods

// subRegion: List of Items
	/*	Get the blog's into the given section	*/


	/* 	to retrieve just one BlogItem
		with all the related info 		*/
	function getByID( idBlog )
		return self.getList( [@"d.IDBLOG = $(idBlog)"], nil)[0]
	end

// subRegion: Insert, Update and Delete

	/*	Insert a new Item into the db	*/
	function insert( Title, Content, Author, Section, Tags )

		bFeedback = false

		IDSect = self._dbuti.getScalar( "SELECT IDSection FROM tBlogSections WHERE Title = ?;", Section )
		if IDSect
			
			month = "0" + CurrentTime().month
			yearmonth = "" + CurrentTime().year + "" +  month[-2:]

			if self._dbuti.execute("INSERT INTO tBlogData (Title, Content, Author, IDSection, Date, yearmonth) VALUES(?, ?, ?, ?, ?, ?);", \
					[Title, Content, Author, IDSect, CurrentTime().toLongFormat(), yearmonth])

				idBlog = self._dbuti.getScalar( "SELECT last_insert_rowid();" )
				bFeedback = true

				for t in Tags.replace(","," ").split(" ")

					if not t.trim(): continue
					if not self._dbuti.execute("INSERT INTO tBlogTags VALUES(?, ?);", [idBlog, t])

						bFeedback = false
						break

					end

				end

			end

		end

		return bFeedback

	end

	function update( IDBlog, Title, Content, Author, Section, Tags )
		sqlCMD = "
					UPDATE tBlogData
						SET
						    Title = ?,
						    Content = ?,
						    Author = ?,
						    IDSection = ?,
						    Date = ?
					WHERE
							IDBLOG = ? "

		bFeedback = false

		IDSect = self._dbuti.getScalar( "SELECT IDSection FROM tBlogSections WHERE Title = ?;", Section )
		if IDSect

			self._dbuti.execute( sqlCMD, [Title, Content, Author, IDSect, CurrentTime().toLongFormat(), IDBlog] )
			self._dbuti.execute("DELETE FROM tBlogTags WHERE IDBLOG = ?;", IDBlog)
			for t in Tags.replace(","," ").split(" ")

				bFeedback = true

				if not t.trim(): continue
				if not self._dbuti.execute("INSERT INTO tBlogTags VALUES(?, ?);", [IDBlog, t])
					bFeedback = false
					break
				end
			end
		end

		return bFeedback

	end

	function delete( IDBlog )
		self._dbuti.execute("DELETE FROM tBlogTags WHERE IDBLOG = ?;", IDBlog)
		self._dbuti.execute("DELETE FROM tBlogComments WHERE IDBLOG = ?;", IDBlog)
		self._dbuti.execute("DELETE FROM tBlogData WHERE IDBLOG = ?;", IDBlog)
		return true
	end

// Region: Output methods
	function postedBy()

		format = i"Posted by <a href=\"?pid=home&type=author&id=$(self.Author)\">$(self.Author)</a> at $(h):$(m)"
		h = "0" + self.Date.hour
		m = "0" + self.Date.minute

		h = h[-2:]
		m = m[-2:]

		return @format

	end

	function filedUnder()
		format = i"Filed under: <a href=\"?pid=home&type=section&id=$(self.Section)\">$(self.Section)</a>"
		return @format
	end

	function commentsNumber()

		sRet = ""
		if self.NumOfComments == 0
			sRet = i"No comments"
		elif self.NumOfComments > 1
			sRet += self.NumOfComments
			sRet += " comments"
		else
			sRet = i"One comment"
		end

		return sRet

	end

	function tagList()

		s1 = "Tags: "
		for a in self.Tags
			s1 += @"<a href=\"?pid=home&type=tag&id=$(a)\">$(a)</a>"
			formiddle: s1+=", "
		end

		return s1
	end

	function getCalendarList()
		sqlCmd = "select distinct yearmonth from tblogdata order by 1 desc;"
		aRec = self._dbuti.fetchArray( sqlCmd )
		
		ret = "<p class='blogNaviTitle'>" + i"By Date" + "<p>"
		for a in aRec
			s1 = "" + a[0][0:4] + " " + DateTime.monthNames[ int(a[0][4:]) - 1]
			ret += @"<p class='blogNaviItem'><a href=\"?pid=home&type=date&id=$(a[0])\">$(s1)</a></p>"			
		end

		return ret
				
	end
	function DateFormatted()

		nameDay   = DateTime.dayNames[ self.Date.dayOfWeek() ]
		numDay    = self.Date.day
		nameMonth = DateTime.monthNames[ self.Date.month -1 ]

		format = "$(nameDay), $(nameMonth) $(numDay), $(self.Date.year)"
		return @format

	end

// Region: Private methods
	/*	Given a filter and a number of records
		an array with the records retrieved.
		filter is an array [ "field=value", ....]
		numRec is a number or a nil					*/
	function getList( filter, numRec)

		sqlCmd  = "SELECT DISTINCT " + self._fields
		sqlCmd  += " FROM tBlogData d  LEFT JOIN tBlogSections s ON s.IDSection = d.IDSection "

		sqlWhere   = ""
		if filter
			sqlWhere += "WHERE "
			sqlWhere += " AND ".merge( filter )
			if sqlWhere.find("TAG =") > -1
				sqlCmd += "LEFT JOIN tBlogTags t ON t.IDBLOG = d.IDBLOG "
			end
		end
		sqlCmd += sqlWhere

		sqlCmd += " ORDER BY Date desc"
		if numRec: sqlCmd  += @" LIMIT $(numRec);"

		aRec = self._dbuti.fetchDict( sqlCmd )
		ret  = []

		// Retrieving tags
		for b in aRec

			blog = BlogItem()
			blog.ID       = b[ "IDBLOG" ]
			blog.Title    = b[ "Title" ]
			blog.Content  = b[ "Content" ].trim()
			if blog.Content.len() > 100
				blog.ShortCnt = blog.Content[0:101] + "..."
			else
				blog.ShortCnt = blog.Content
			end
			t = TimeStamp()
			t.fromLongFormat(b[ "Date" ])
			blog.Date 	  = t
			blog.Author   = b[ "Author" ]
			blog.Section  = b[ "Section" ]

			aTag = self._dbuti.fetchDict( "SELECT TAG FROM tBlogTags WHERE IDBLOG = ?;", blog.ID)

			sTags = []
			for s in aTag
				sTags +=  s[ "TAG" ]
			end

			blog.Tags = sTags

			blog.NumOfComments = self._dbuti.getScalar( "SELECT Count(*) as numHit FROM tBlogComments WHERE IDBLOG = ?;", blog.ID)

			ret += blog

		end

		return ret

	end


end