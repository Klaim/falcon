/*#
 * @file        WebAPI.fal
 * @brief       Web API service.
 * @begin       23-Aug-2010
 * @author      <a href="mailto:giuseppe.greco@agamura.com">Giuseppe Greco</a>
 *
 * @copyright   (C) 2010 href="http://www.falconpl.org">The Falcon Programming Language</a>
 * @legalnotice Released under FPLL 1.1 or GPL 2.0 at your choice.
 */

import Compiler from compiler as Compiler
import Config from nest as Config
import Service from nest as Service
import NestError from nest as NestError
import findFile from nest.utils as findFile
import reldir from nest.utils as reldir
import from web.htmaker in htmaker

/*#
 * Web API service.
 *
 * Provides functionality for accessing available API objects.
 *
 * @param owner Service owner.
 * @param instance Service instance.
 *
 * @sa nest.Service
 */
class WebAPI(owner, instance) from Service(owner, instance)

    /*#
     * The directory where API objects are stored.
     */
    apidir = nil

    /*#
     * Compiler services.
     */
    _compiler = Compiler()

    /*#
     * Rendering map.
     */
    _render = [
        "home" => self._renderHome,
        "detail" => self._renderDetail,
        "invoke" => self._renderInvoke
    ]

    /*#
     * @see nest.Service.startup
     */
    function startup()
        self.apidir = reldir(Config.site_srv_dir, self.className())
    end

    /*#
     * @see nest.Service.run
     */
    function run()
    end

    /*#
     * @see nest.Service.render
     */
    function render()
        self.Service.render()
        return self._render[Request.getField("pid", "home")]()
    end

    /*#
     * @see nest.Service.finalize
     */
    function finalize()
    end

    /*#
     * Gets the specified API objects.
     *
     * If no API object is specified, this function gets all the API objects
     * available on the system. API objects represent functionality made
     * available thru an URL.
     *
     * @return The API object.
     */
    function getApiObjects()
        exts = ["fam", "fal"]
        apiObjects = [ => ]

        if paramCount() > 0
            for i = 0 to paramCount() - 1
                if not (file = findFile(self.apidir, paramNumber(i), exts))
                    raise NestError(NestError.mod_notfound, "", paramNumber(i))
                end
                apiObjects[paramNumber(i)] = self._loadApiObject(file, paramNumber(i))
            end
        else
            direnum = Directory(self.apidir)
            while (file = direnum.read())
                name = Path(file).file
                if file = findFile(self.apidir, name, exts)
                    apiObjects[name] = self._loadApiObject(file, name)
                end
            end
        end

        return apiObjects.values()
    end

    /*#
     * Loads the specified API object.
     *
     * @param file The file containing the API object to load.
     * @param name The name of the API object to load.
     *
     * @return The API object.
     */
    function _loadApiObject(file, name)
        try
            module = self._compiler.loadFile(file, name)
            moduleClass = module.get(name)
        catch AccessError
            raise NestError(NestError.no_mod_class, "", name)
        end

        return moduleClass
    end

    /*#
     * Renders the API summary.
     *
     * @return The API summary.
     */
    function _renderHome()
        for apiObject in self.getApiObjects()
            docData = apiObject.docData()
            detail = Nest.pageLink("detail", ["function" => docData["name"]])
            forfirst
                tbody = htmaker.TBody()
                .[tbody.add
                    .[htmaker.TR().add
                        htmaker.TH(i"Name")
                        htmaker.TH(i"Description")
                    ]()
                ]()
            end
            .[tbody.add
                .[htmaker.TR().add
                    htmaker.TD().add(htmaker.A(detail, docData["name"]))
                    htmaker.TD(docData["description"])
                ]()
            ]()
            forlast; table = htmaker.TABLE().add(tbody); end
        end

        if not table; table = htmaker.P(i"No function available."); end

        stringStream = StringStream()
        table.render(4, stringStream)

        return stringStream.closeToString()
    end

    /*#
     * Renders the API object detail.
     *
     * @return The API object detail.
     */
    function _renderDetail()
        docData = self.getApiObjects(Request.getField("function"))[0].docData()
        invokeParams = ["function" => docData["name"]]

        try; for param in docData["parameters"]
            invokeParams[param["name"]] = param["name"]
            forfirst; ntbody = htmaker.TBody(); end
            .[ntbody.add
                .[htmaker.TR().add
                    htmaker.TD(i"name").CLASS("subheader")
                    htmaker.TD(i"description").CLASS("subheader")
                    htmaker.TD(i"Mandatory").CLASS("subheader")
                ]()
                .[htmaker.TR().add
                    htmaker.TD(param["name"])
                    htmaker.TD(param["description"])
                    htmaker.TD(param["mandatory"] ? i"Yes" : i"No")
                ]()
            ]()
        end; catch AccessError; end

        invoke = Nest.pageLink("invoke", invokeParams)

        tbody = htmaker.TBody()
        .[tbody.add
            .[htmaker.TR().add
                htmaker.TH(i"Name")
                htmaker.TD(docData["name"])
            ]()
            .[htmaker.TR().add
                htmaker.TH(i"Description")
                htmaker.TD(docData["description"])
            ]()
            .[htmaker.TR().add
                htmaker.TH(i"Parameters")
                htmaker.TD().add(ntbody ? htmaker.TABLE().add(ntbody) : htmaker.Text(i"N/A"))
            ]()
            .[htmaker.TR().add
                htmaker.TH(i"URL")
                htmaker.TD().add(htmaker.A(invoke, invoke))
            ]()
        ]()
        
        stringStream = StringStream()
        (htmaker.TABLE().add(tbody)).render(4, stringStream)

        return stringStream.closeToString()
    end

    /*#
     * Renders the result of the API object execution.
     *
     * @return The result of the API object execution.
     */
    function _renderInvoke()
        return self.getApiObjects(Request.getField("function"))[0].execute()
    end
end
