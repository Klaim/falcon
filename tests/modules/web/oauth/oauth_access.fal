/*
   FALCON - Samples

   FILE: oauth_access.fal

   Second step of OAUTH request.

   This test uses a token file generated by oauth_request.fal and
   exchange an OAuth request token with an OAuth access token,
   that can then be used to send authorized requests.

   The input file is updated with the access token, and can then be
   used by oauth_call.fal.

   OAuth mandates that the request token must be invalid after this
   operation, so it's totally uesless to keep the old file (the data
   in that would be discarded by the remote OAuth server no matter
   the result of the operation on this side).
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sat, 25 Dec 2010 16:32:16 +0100

   -------------------------------------------------------------------
   (C) Copyright 2010: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

import from web.oauth in oauth
import from curl

if args.len() < 2 or args.len() > 3
   > "Usage: oauth_access.fal <verifier> <address> [<token file>]"
   > '

   This test uses a token file generated by oauth_request.fal and
   exchange an OAuth request token with an OAuth access token,
   that can then be used to send authorized requests.

   The input file is updated with the access token, and can then be
   used by oauth_call.fal.

   OAuth mandates that the request token must be invalid after this
   operation, so it''s totally uesless to keep the old file (the data
   in that would be discarded by the remote OAuth server no matter
   the result of the operation on this side).

   If not given, the token file name defaults to token.oauth.
   '

   return
end

verifier = args[0]
address = args[1]
file = args.len() > 2 ? args[2] : "token.oauth"

> "Opening file ", file
try
   fin = InputStream( file )
   cust_id = fin.grabLine()
   cust_secret = fin.grabLine()
   token = fin.grabLine()
   secret = fin.grabLine()
   fin.close()

   > "Read request token: ", token
   client = oauth.Client( cust_id, cust_secret )
   xtok = oauth.Token(token, secret)
   xtok.verifier = verifier
   
   > "Exchanging the token..."
   access_tok = client.getToken( address, nil, xtok )
   > "Exchange complete; access token: ", access_tok.token

   extra = access_tok.getExtraData()
   if extra
      > "="*70
      > "Extra data in token: "
      extra.do( {k,v => >k,": ",v})
      > "="*70
   end
      
   > "Writing access token file: ", file
   fout = OutputStream( file )
   fout.writeText( cust_id + "\n" )
   fout.writeText( cust_secret + "\n" )
   fout.writeText( access_tok.token + "\n" )
   fout.writeText( access_tok.secret + "\n" )
   fout.close()
   
   > "Done."

catch IoError in err
   > "I/O Error while reading or writing files."
   > err
   
catch curl.CurlError in err
   > "Network error while contacting the remote server."
   > err

catch oauth.ProtoError in err
   > "OAuth protocol error."
   > err
end


