/****************************************************************************
* Falcon test suite
*
* ID: 10d
* Category: zlib
* Subcategory:
* Short: Zlib on large strings
* Description:
*   Compress and Uncompress rather large and variegated string data.
* [/Description]
*
****************************************************************************/

load zlib

// some functions to fill the buffers
function blank( buffer, pos )
   buffer[pos] = 0
end

function modPos( buffer, pos )
   buffer[pos] = pos % 256
end

function flatRnd( spread, buffer, pos )
   buffer[pos] = 256 / 2 + int((0.5 - random()) * spread)
end

function flatInt( spread, buffer, pos )
   buffer[pos] = 5600 + int((0.5 - random()) * spread)
end

buffers = []
buffers += [[strReplicate( ' ', 256 ), blank]]
buffers += [[strReplicate( ' ', 512 ), modPos]]
buffers += [[strReplicate( ' ', 1024 ), modPos]]
buffers += [[strReplicate( ' ', 2048 ), [flatRnd, 10] ]]
buffers += [[strReplicate( ' ', 4096 ), [flatRnd, 100] ]]

// some oddly shaped buffer
buffers += [[strReplicate( ' ', 129 ), modPos]]
buffers += [[strReplicate( ' ', 1200 ), modPos]]
buffers += [[strReplicate( ' ', 3121 ), blank]]

// also an international string
buffers += [[strReplicate( ' ', 3121 ), [flatInt,1000] ]]

// fill the buffers
for buffer, algo in buffers
   for pos in [0:buffer.len()]
      algo(buffer, pos)
   end
end

// compress them
z = ZLib()
compbufs = []
for i in [0:buffers.len()]
   try
      compbufs += z.compressText( buffers[i][0] )
   catch ZLibError in err
      failure( "Buffer " + i + " failed compression:\n" +
         err )
   end
end

// uncompress the buffers and see if they are the same.
function compareBuffers( b1, b2 )
   if b1.len() != b2.len()
      return -1
   end

   for pos in [0:b1.len()]
      if b1[pos] != b2[pos]
         return pos
      end
   end

   return nil
end

for i in [0:buffers.len()]
   try
      unc = z.uncompressText( compbufs[i] )
   catch ZLibError in err
      failure( "Buffer " + i + " failed de-compression:\n" +
         err )
   end

   res = compareBuffers( buffers[i][0], unc )
   if res != nil
      if res == -1
         failure( "Buffer " + i + " different in size" )
      else
         failure( "Buffer " + i + " different at position " + res )
      end
   end
end

success()

