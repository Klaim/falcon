/****************************************************************************
* Falcon test suite
*
*
* ID: 51b
* Category: gc
* Subcategory: strings
* Short: Garbage collection - strings
* Description:
*  Test for correct accounting of garbage collection when strings are
*  involved
* [/Description]
*
****************************************************************************/

print() // create a reusable frame

// clean memory -- serialzation may dirty the gc.
GC.perform( true )
aliveMem = GC.aliveMem
items = GC.items
usedMem = GC.usedMem

// test0 : keep a reference to a methodized static string.
// gc may crash if not properly handled
ref = "a static string".len

//====================================
// TEST 1
// drop a static string
str = "Hello world".clone()
str += " world"
str = nil

GC.perform( true )

if aliveMem != GC.aliveMem: failure( "dropped string - unmatching allocated memory" )
if usedMem != GC.usedMem: failure( "dropped string - unmatching used memory" )
if items != GC.items: failure( "dropped string - unmatching live items items" )

//====================================
// TEST 2
// string manipulation - insert string.

// modifying a static string creates a new buffer string, so the allocation size changes.
strres = "Hello "
strres[4:5] = " world"
GC.perform( true )

aliveMem = GC.aliveMem
usedMem = GC.usedMem
items = GC.items

str = strres.clone()
str1 = " great "
str[5:6] = str1   // here we have an insertion

// Empty the strings...
str = nil
str1 = nil

// ...and empty the A register
a = 0*1

GC.perform( true )

if aliveMem != GC.aliveMem: failure( "insertion - unmatching allocated memory" )
if usedMem != GC.usedMem: failure( "insertion - unmatching used memory" )
if items != GC.items: failure( "insertion - unmatching live items items" )

//====================================
// TEST 3
// string manipulation - cut down string
str = strres.clone() + " world"
str[5:12] = ""   // here we have a deletion

// Empty the strings...
str = nil

// ...and empty the A register
a = 0*1

GC.perform( true )

if aliveMem != GC.aliveMem: failure( "cut - unmatching allocated memory" )
if usedMem != GC.usedMem: failure( "cut - unmatching used memory" )
if items != GC.items: failure( "cut - unmatching live items items" )

//====================================
// TEST 4
// string manipulation - append string
str = strres.clone()
str += "world"   // here we have an addition

// Empty the strings...
str = nil

// ...and empty the A register
a = 0*1

GC.perform( true )

if aliveMem != GC.aliveMem: failure( "append - unmatching allocated memory" )
if usedMem != GC.usedMem: failure( "append - unmatching used memory" )
if items != GC.items: failure( "append - unmatching live items items" )

//====================================
// TEST 5
// string change type - append string
str = strres.clone()
str += 921   // here we have an addition of an unicode high

// Empty the strings...
str = nil

// ...and empty the A register
a = 0*1

GC.perform( true )

if aliveMem != GC.aliveMem: failure( "unicode - unmatching allocated memory" )
if usedMem != GC.usedMem: failure( "unicode - unmatching used memory" )
if items != GC.items: failure( "unicode - unmatching live items items" )

success()

/* End of file */
