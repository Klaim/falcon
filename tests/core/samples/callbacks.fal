/*
   FALCON - Samples

   FILE: callbacks.fal

   Show how to create event-driven callabacks.

   The main loop accepts a sequence of words;
   the first word is interpreted as an event which is
   broadcasted through the "scope" attribute.

   Three listener are instantiated, and they handle
   scope with through marshall callback facility.

   Incoming messages are then sent to the on[Message] handler.
   This classes interpret the test, pass and remove messages.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Tue, 25 Dec 2007 13:36:39 +0100

   -------------------------------------------------------------------
   (C) Copyright 2007: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

class Manager( name )
   name = name

   // let's subscribe at creation
   init
      subscribe( "scope", self )
   end

   function on_scope( msg )
      try
         self.getProperty( "on_" + msg[0] )(msg[1])
      catch AccessError
         > "Malformed command"
      end
   end
   
   // Just say the parameter and block processing
   function on_test( p1 )
      > self.name, ": onTest - ", p1
   end

   // Just say the parameter but allow broadcast over scope
   function on_pass( p1 )
      > self.name, ": onPass - ", p1
   end

   // say the parameter, block broadcast but remove ourself
   function on_remove( p1 )
      > self.name, ": onRemove - ", p1
      unsubscribe( "scope", self )
      consume()
   end
end

//=====================================================
// Main script
//
managers = map( Manager, [ "one", "two", "three" ] )

> "Event handlers demonstration."
>
> "Input an event followed by an optional parameter."
> "The event is broadcasted via the \"scope\" attribute to three objects."
> "The marshallCB function translates the first word into a callback"
> "in the objects. Known handled events are:"
> "   test x - calls the onTest method on the first available handler"
> "   pass x - calls the onPass method on all the handlers"
> "   remove x - calls the onRemove method on the first handler, "
> "              which removes himself and won't be called again."
>
> "   Write an empty linie to terminate."

// accepts the first line
>> "> "; line = input()
while line
   // splits the line in words
   msg = strSplit( line, " " )
   // boradcasts the message through the 'scope' parameter
   broadcast( "scope", msg )
   >> "> "; line = input()
end

/* end of file */
