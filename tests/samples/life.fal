/*****************************************************
   The life game
*/
ALIVE=ord("O")
DEAD=ord("-")

write = stdOut().write

class Life( width, height )
   w = width
   h = height

   thisgen = nil
   nextgen = nil

   // we need an array of rows...
   init
      self.thisgen = arrayBuffer( height+1 )
      self.nextgen = arrayBuffer( height+1 )
      for row in [1: height+1]
         self.thisgen[row] = arrayBuffer( width+1 )
         self.nextgen[row] = arrayBuffer( width+1 )
         for col in [1:width+1]
            self.thisgen[row][col] = 0
            self.nextgen[row][col] = 0
         end
      end
   end

   function spawn( shape, left, top )
      for y in [0: shape.h]
         for x in [0: shape.w]
            self.thisgen[top+y][left+x] = shape[y*shape.w+x]
         end
      end
   end

   // run the CA and produce the next generation
   function evolve()
      static
         w = self.w
      end
      next = self.nextgen
      data = self.thisgen

      ym1,y=self.h-1,self.h
      for yp1 in [1:self.h+1]
         xm1,x=w-1,w
         nextRow = next[y]
         for xp1 in [1:w+1]
            rm1 = data[ym1]
            ry = data[y]
            rp1 = data[yp1]
            sum = rm1[xm1] + rm1[x] + rm1[xp1] + \
                        ry[xm1] + ry[xp1] + \
                        rp1[xm1] + rp1[x] + rp1[xp1]
            nextRow[x] = (sum==2) and ry[x] ? 1 : sum==3 ? 1 : 0
            xm1,x = x,xp1
         end
         ym1,y = y,yp1
      end

      // exchange data.
      self.nextgen = self.thisgen
      self.thisgen = next
   end

   // Display this generation
   function draw()
      static
         out = strReplicate( " ", self.h*(self.w+1) ) // Write all at once
         height = self.h+1
         width = self.w
      end

      p = 0
      for y in [1:height]
         row = self.thisgen[y]
         for x in [0:width]
            if row[x+1]
               out[p+x] = ALIVE
            else
               out[p+x] = DEAD
            end
         end
         p += self.w
         out[p] = 10
         p++
      end

      write( out )
   end

end

/**************************************************
   Shapes that we may want to use as tests
   They are arrays with w and h bindings.
**************************************************/
HEART = [1,0,1,1,0,1,1,1,1]; HEART.w = 3; HEART.h = 3
GLIDER = [0,0,1,1,0,1,0,1,1]; GLIDER.w = 3; GLIDER.h = 3
EXPLODE = [0,1,0,1,1,1,1,0,1,0,1,0]; EXPLODE.w = 3; EXPLODE.h = 4
FISH = [0,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0]; FISH.w = 5; FISH.h = 4
BUTTERFLY = [1,0,0,0,1,0,1,1,1,0,1,0,0,0,1,1,0,1,0,1,1,0,0,0,1]
   BUTTERFLY.w = 5; BUTTERFLY.h = 5

/****************************************************
* Main routine
****************************************************/

// create some life
life = Life( 40, 20 )

// some spawning
/*life.spawn(GLIDER, 2, 2)
life.spawn(EXPLODE, 40, 10)
life.spawn(FISH, 10, 14)*/

life.spawn(GLIDER, 5,4)
  life.spawn(EXPLODE, 25,10)
  life.spawn(FISH, 4,12)
// run until break
gen = 1
write("\x1b[2J")	// ANSI clear screen
while gen <= 2000
   life.evolve()
   write("\x1b[H")	// ANSI home cursor
   life.draw()
   write( "Life - generation " + gen++ )
   //sleep(0.05) // slight delay
end

printl()
