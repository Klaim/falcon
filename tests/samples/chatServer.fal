#!/usr/local/bin/falcon
/*
   FALCON - Samples

   FILE: chatServer.fal

   A simple server for chatClient.fal samples.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: 2006-05-11 12:35

   -------------------------------------------------------------------
   (C) Copyright 2004: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
*/

load socket
/********************************
  This class stores outgoing messages
*********************************/
class CliMessage( cli, msg )
   client = cli
   message = msg
end

/********************************
  This class register clients.
*********************************/
class Client( com_)
   name = "unknown"
   com = com_
   idleTime = 0
   messages = []
   msgIn = ""

   function alive()
      self.idleTime = seconds()
   end


   /** Sends a mesasge. */
   function send( msg )
      sent = self.com.send( msg )
      // all the message has been sent? -- if no, resend
      while sent < len( msg )
         msg = msg[sent+1:]
         sent = self.com.send( msg )
      end
   end

end


/********************************
  output functions
*********************************/

function warn()
   print( "WARN: " )
   pass printl
end

function messageReceived( idFrom, idTo )
   print( "MSG ", idFrom, "->", idTo, ": " )
   params = []
   for i in [2 : paramCount()]
      print( paramNumber(i) )
   end
   printl()
end


/********************************
  Manage Logins
*********************************/

function manageLogins()
   global clients
   global waitingClients

   cliData = strBuffer(256)
   for cli in waitingClients
      try
         if cli.com.readAvailable(0)
            size = cli.com.recv( cliData )
            if size == 0
               // client closed
               cli.com.dispose()
               continue dropping
            else
               if cliData[0:6] == "[IAM_]"
                  cliId = cliData[6:-3]
                  if cliId in clients
                     cli.messages += CliMessage( nil, "[SERV]ID Already present." )
                  else
                     // and accept the new one
                     cli.messages += CliMessage( nil, "[SERV]ID " + cliId + " accepted." )

                     // notify all the clients
                     names = ""
                     for name, tgcli in clients
                     	// tell the client about the others
                        tgcli.messages += CliMessage( nil, "[SERV]Client \"" + cliId + "\" has joined." )
                        names += name
                        formiddle: names += ", "
                     	forlast: names += "."
                     end

                     cli.messages += CliMessage( nil, "[SERV]Nick list: "+ names )
                     // accept in.
                     cli.name = cliId
                     clients[ cliId ] = cli
                     warn( "client ", cliId, " logged in.")

                     // remove from waiting clients
                     continue dropping

                  end
               else
                  cli.messages += CliMessage( nil, "[SERV]You must send IAM." )
               end
            end
         end
      catch in error
         warn( "Error while receiving client login: ", error.toString() )
      end
   end
end

/********************************
  Manage incoming data
*********************************/

function manageIncoming()
   global clients

   cliData = strBuffer(1500)
   gone = []

   for name, cli in clients
      com = cli.com
      try
         if com.readAvailable(0)
            size = com.recv( cliData )
            if size == 0
               // he's gone
               warn( "Client ", name, " closed connection" )
               gone += name
               com.dispose()
            else
               cli.msgIn += cliData
               if not parseMessage( cli )
                  gone += name
                  com.close()
               else
                  cli.alive()
               end
            end
         end
      catch in error
         warn( "Error while reading from client: ", error.toString() )
         gone += name
         com.dispose()
      end
   end

   // remove gone elements
   for name in gone
      dictRemove( clients, name )
   end

   // and notify clients
   for name,cli in clients
      for name in gone
         cli.messages += CliMessage( nil, "[SERV]Client \"" + name + "\" is gone." )
      end
   end

end

/********************************
  Manage outgoing data
*********************************/
function manageOutgoing()
   global clients

   // and notify clients
   for name, cli in clients
      if len( cli.messages ) != 0 and cli.com.writeAvailable(0)
      	error = 0
      	for climsg in cli.messages
				try
					cli.send( climsg.message + "\r\n" )
               > "Sending ", climsg.message
				catch in error
					warn( "Error while writing to client: ", error.toString() )
					cli.com.dispose()
					error = 1
					break
				end
			end
			// empty messages
			cli.messages = []

			// drop the client on error
			if error: continue dropping
      end
   end
end

/********************************
  Manage Incoming Messages
*********************************/

function parseMessage( cli )
   global clients

   // complete message?
   message = cli.msgIn
   pos = strFind( message, "\r\n" )
   // still nothing
   if pos == -1
      if len( message ) > 10000: return false
      return true
   end

   // ok, we have a complete line.
   if pos == len(message) - 2
      cli.msgIn = ""
   else
      cli.msgIn = message[pos + 2:]
   end
   message = message[0:pos]

   // let's see what the client want to do.
   switch( message[0:6] )
      case "[PONG]"
         return true

      case "[WALL]"
         //send = message[8:]
         for name, clitg in clients
            if cli.name != clitg.name
               clitg.messages += CliMessage( cli, message )
            end
         end

      case "[PRIV]"
         // get the person to which the msg should go.
         try
            pos = strFind( message, ":" )
            username = message[6:pos]
            clitg = clients[ username ] // may throw
            if pos != len( message ): clitg.messages += CliMessage( cli, "<" + cli.name + ">" + message[pos+1:] )
         catch
            cli.messages += CliMessage( cli, "[SERV]Target client does not exist / malformed message." )
         end

      case "[BYE_]"
         //close
         return false

      default
         printl( "Default" )
         clitg = clients[ username ] // may throw
         clitg.messages += CliMessage( cli, "[SERV]Malformed message" )
   end

   return true
end


/********************************
  Main program
*********************************/

// create and bind the server
server = TCPServer()

if len( args ) == 1
   server.bind( args[0] )
elif len( args ) == 2
   server.bind( args[0], args[1] )
else
   printl( "Usage: chatServer.fal address port" )
   printl( "  or   chatServer.fal port" )
   exit(1)
end

// registered clients
clients = [=>]
// clients waiting to be logged in.
waitingClients = []

while true
   client = server.accept(0)

   if client != nil
      printl( "New connection from ", client.getHost(), ":", client.getService() );
      client.send( "[SERV]Hello from server.\r\n" );
      clientData = Client( client )
      waitingClients += clientData
   end

   // first manage login attemps
   manageLogins()
   manageIncoming()
   manageOutgoing()

   // sleep a bit
   sleep( 0.10 )
end
