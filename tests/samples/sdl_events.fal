#!/usr/bin/falcon
/*
   FALCON - SDL MODULE Samples

   FILE: sdl_events.fal

   Show minimal management of events.
   This small program also shows how Falcon coroutines and SDL events
   can interact.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: Sun, 16 Mar 2008 21:15:18 +0100
   Last modified because:

   -------------------------------------------------------------------
   (C) Copyright 2008: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
   In order to use this file in its compiled form, this source or
   part of it you have to read, understand and accept the conditions
   that are stated in the LICENSE file that comes boundled with this
   package.
*/

load sdl

object MyEventManager
   quitRequest = false
   subs = [
      "sdl_MouseMotion",
      "sdl_Quit",
      "sdl_Expose",
      "UserEvent" ]

   init
      for event in self.subs: subscribe( event, self )
   end
      
   function on_sdl_MouseMotion( state, x, y, xrel, yrel )
      >> "         X=",x, " Y=",y, " Xrel=", xrel, " YRel=",yrel, "       \r"
   end

   function on_sdl_Quit( state, x, y, xrel, yrel )
      > strReplicate( " ", 60 )
      > "== Quit! =="
      self.quitRequest = true
      broadcast( "UserEvent", 0, "I am quit" )
   end

   function on_sdl_Expose()
      global screen
      screen.UpdateRect()
   end

   function on_UserEvent( code, item )
      > item, strReplicate( " ", 60 )
   end
end


//==============================================
// Coroutine to display a blinking cursor
//

function blinker( screen )
   r = SDLRect( 280, 200, 80, 80 )
   black = screen.MapRGBA( 0, 0, 0, 0 )
   white = screen.MapRGBA( 255, 255, 255, 255 )
   color = white

   time = 0
   while not MyEventManager.quitRequest
      sleep( 0.5 )
      color = (color == white ? black : white )
      screen.FillRect( r, color )
      screen.UpdateRect( r )
      time ++
      if time > 8
         time = 0
         broadcast( "UserEvent", 0, "Reset..." )
      end
   end
end

//==============================================
// Main program
//

try
   a = SDL.InitAuto( SDL.INIT_VIDEO )
   SDL.LoadBMP("falcon-ico.bmp").SetIcon()
   SDL.WM_SetCaption( "Falcon SDL Event Handler Test" )
   screen = SDL.SetVideoMode( 640, 480 )

   // draw a cloured band - first hardware
   try
      band = SDL.CreateRGBSurface( SDL.HWSURFACE, 640, 1, 32 )
   catch SDLError
      > "Hardware surface creation failed, try with software creation."
      // then software -- let it fail if it fails
      band = SDL.CreateRGBSurface( SDL.SWSURFACE, 640, 1, 32 )
   end
   
   launch blinker( screen )

   pixels = band.pixels
   for bid in [0:640]
      pixels[bid] = band.MapRGBA( 150, bid%128, (bid+128)%256,  250 )
   end

   rect = SDLRect( 0,0,640,1)
   for y in [0:480]
      rect.y = y
      band.BlitSurface( nil, screen, rect )
   end
   screen.UpdateRect()

   // make a solid rectangle
   
   > "Success! - Now start moving the mouse."
   > "Click the X on the bar to quit the app."

   SDL.StartEvents()
   count = 0
   while not MyEventManager.quitRequest
      sleep(0.01)
      >> count++, "\r"
      //SDL.WaitEvent()
   end

catch in e
   > "Test failed: "
   > e
end

/* end of file */
