
queue = SyncQueue( true )
done = Barrier()
semWrite = Semaphore(1)

function consumer( id, control )
   semWrite.wait(50)
   > "Entering the consumer ", VMContext().id
   semWrite.post()

   spurious = [0,0]
   onSignaled = {queue =>
      item = queue.pop()      
      control[id] = "Received " + item.describe()
      if item == nil
         spurious[0]++
      else
         spurious[1]++
      end
      //> VMContext().describe()
   }
   
   wl = Waiter( done )
   wl.add( queue, onSignaled )
   res = wl.wait(1000)
   
   semWrite.wait(50)
   > "Out res: ", res.describe() 
   > "Exiting consumer ", VMContext().id, " with ", spurious[0],"/",spurious[1], " spurious wakeups."
   semWrite.post()
end


function controller( control )
   > "Entering the controller"
   
   // start all
   queue.push("Hello world!")
   count = 0
   now  = seconds()
   while seconds() - now < 5.0
      //if count % 100 == 0
         >> @"$({seconds()-now}.2) ${control[0]}, ${control[1]}, ${control[2]}                    \r"
      //end
      //rest(100)
      ++count
      queue.push("Hello again! " + count, 1, seconds(), count )
   end 
   
   >
   > "Exiting the controller ", VMContext().id
   > GC.contexts.describe()
   
   done.open()
end

> "Starting"

ctrl = [0, 0, 0]
f0 = {=> consumer(0, ctrl) }
f1 = {=> consumer(1, ctrl) }
f2 = {=> consumer(2, ctrl) }
f3 = {=> controller(  ctrl) }

p = Parallel( f0, f1, f2, f3 )
p.launch()

> "Done"
