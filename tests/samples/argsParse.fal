#!falcon
/*
   FALCON - Samples

   FILE: argsParer.fal

   Demonstration of the CmdlineParser facility
   Launch with the parameter -?
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: mer nov 3 2004
   Last modified because:

   -------------------------------------------------------------------
   (C) Copyright 2004: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
   In order to use this file in its compiled form, this source or
   part of it you have to read, understand and accept the conditions
   that are stated in the LICENSE file that comes boundled with this
   package.
*/

attributes
   used
end

object MyParser from CmdlineParser
   freeParams = []
   opt_d = nil
   opt_l = nil
   opt_m = nil
   sw_k = 0
   sw_n = 0

   function onOption( option )
      give used to self

      switch option
         case "?", "help"
            self.usage()
         case "d", "m", "l", "long"
            self.expectValue()
         case "k"
            self.sw_k = 1
         case "n"
            self.sw_n = 1
         case "v", "version"
            printl( "argsParse.fal - version 1.0" );
         case "z", "sleep"
            self.terminate()
         default
            self.unrecognized( option )
      end
   end

   function onValue( option, value )
      switch option
         case "d"
            self.opt_d = value
         case "m"
            self.opt_m = value
         case "l", "long"
            self.opt_l = value
      end
      // can't be anything else, as this function call must
      // be authorized from onOption
   end

   function onFree( param )
      give used to self
      self.freeParams += param
   end

   function onSwitchOff( sw )
      give used to self
      switch sw
         case "k"
            self.sw_k = 0
         case "n"
            self.sw_n = 0
         default
            self.unrecognized( sw )
      end
   end

   function unrecognized( option )
      printl( "Unrecognized option \"", option, "\"\n\n" );
      self.usage()
      exit(0)
   end

   function usage()
      if self hasnt used
         printl( "Provide some parameters to test this script.\n" )
      end

      printl("  -?,--help\t\tPrints this help\n"
         "  -d <value>\t\tSets the D option\n"
         "  -m <value>\t\tSets the M option\n"
         "  -l <value>\t\tSets the L option\n"
         "  --long <value>\tLong version of -l\n"
         "  -k        \t\tK switch on\n"
         "  -n        \t\tN switch on\n"
         "  -z,--sleep\t\tIgnore the rest of the command\n\n"
         "Single char option can be \"chained\" i.e. -knd <value>. When chaining more than\n"
         "one option requiring a parameter, only the last one will actually be considered.\n"
         "Switches can be turend off by appendig a \"-\"after them.\n"
         "Words eneterd without being prepended by '-', or a '-' by itself, are considered\n"
         "\"free options\", and will be listed separately. A \"--\" will be interpreted as\n"
         "end of parse marker, and everything given after that mark will be passed as\n"
         "free options.\n" )
   end

   function dump()
      if self.opt_d: printl( "D option: ", self.opt_d )
      if self.opt_l: printl( "L option: ", self.opt_l )
      if self.opt_m: printl( "M option: ", self.opt_m )
      printl( "K switch ", self.sw_k ? "ON" : "OFF" )
      printl( "N switch ", self.sw_n ? "ON" : "OFF" )
      for elem in self.freeParams
         forfirst: >> "Free options: "
         >> elem
         forall: >> ", "
         forlast: > "."
      end
   end
end

if not MyParser.parse() or MyParser hasnt used
   MyParser.usage()
   exit(0)
end

printl( "Option status: " )
MyParser.dump()

/* end */
