#!/usr/local/bin/falcon
/*
   FALCON - Samples

   FILE: gcctl.fal

   $Id: gcctl.fal,v 1.2 2007/03/18 19:21:13 jonnymind Exp $

   Sample showing script controlled garbage collection.
   -------------------------------------------------------------------
   Author: Giancarlo Niccolai
   Begin: mer nov 3 2004
   Last modified because:

   -------------------------------------------------------------------
   (C) Copyright 2004: the FALCON developers (see list in AUTHORS file)

   See LICENSE file for licensing details.
   In order to use this file in its compiled form, this source or
   part of it you have to read, understand and accept the conditions
   that are stated in the LICENSE file that comes boundled with this
   package.
*/

printl( "Starting controlled garbage collection demonstration." )
const loops = 1000000
const each = 1000

// let's disable the automatic GC
gcEnable( 0 )

// now let's set a low amount of memory as GC tresholds
// 250 kb for starting a loop and 75 free mem to start a reclaim.
gcSetThreshold( 250000, 75000 )
allocMem = 0
allocItm = 0
aliveMem = 0
aliveItm = 0

for i = 1 to loops
   var = [ 1, 2, strBuffer(100), "This is a static string", 5 ]
   var1 = [ i, var ]
   var2 = [ i, var1 ]

   // keep var2 alive so that the loop won't clear all mem

   if i % each == 0
   	gcGetParams( $allocMem, $allocItm )
   	print( "\rAfter ", i, " loops am: ", allocMem, " ai: ", allocItm )
   	// if we have allocated more than 1 M
      if allocMem > 10000000
      	printl()
      	print( "Starting a garbage loop..." )
      	gcPerform()
      	printl( " complete" )
      	gcGetParams( $allocMem, $allocItm, $aliveMem, $aliveItm )
   		printl( "\rNow memory is am: ", allocMem, " ai: ", allocItm, \
   				" aliveMem was: ", aliveMem, "/", aliveItm )
      end
   end

   var2 = 0
end

printl()
printl( "Test complete." )
exit(0)

/* end of process.fal */
